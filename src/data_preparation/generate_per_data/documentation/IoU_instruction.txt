# Arithmetic
Also known as integer overflow and integer underflow.

Integer overflows and underflows are not a new class of vulnerability, but they are especially dangerous in smart contracts, where unsigned integers are prevalent and most developers are used to simple int types (which are often just signed integers). If overflows occur, many benign-seeming codepaths become vectors for theft or denial of service.

## Attack Scenario
A smart contract's withdraw() function allows you to retrieve ether donated to the contract as long as your balance remains positive after the operation.
An attacker attempts to withdraw more than his or her current balance.
The withdraw() function check's result is always a positive amount, allowing the attacker to withdraw more than allowed. The resulting balance underflows and becomes an order of magnitude larger than it should be.

## Examples
The most straightforward example is a function that does not check for integer underflow, allowing you to withdraw an infinite amount of tokens:
```
function withdraw(uint _amount) {
	require(balances[msg.sender] - _amount > 0);
	msg.sender.transfer(_amount);
	balances[msg.sender] -= _amount;
}
```
The second example (spotted during the Underhanded Solidity Coding Contest) is an off-by-one error facilitated by the fact that an array's length is represented by an unsigned integer:
```
function popArrayOfThings() {
	require(arrayOfThings.length >= 0);
	arrayOfThings.length--; 
}
```
The third example is a variant of the first example, where the result of arithmetic on two unsigned integers is an unsigned integer:
```
function votes(uint postId, uint upvote, uint downvotes) {
	if (upvote - downvote < 0) {
		deletePost(postId)
	}
}
```
The fourth example features the soon-to-be-deprecated var keyword. Because var will change itself to the smallest type needed to contain the assigned value, it will become an uint8 to hold the value 0. If the loop is meant to iterate more than 255 times, it will never reach that number and will stop when the execution runs out of gas:
```
for (var i = 0; i < somethingLarge; i ++) {
	// ...
}
```

## 3 Integer Overflow/Underflow
Integer overflow/underflow vulnerability happens when an arithmetic operation attempts to create a numeric value that is outside the range of the integer type..


### How to label the integer overflow/underflow vulnerability?
We refer to several expert patterns to label the integer overflow/underflow vulnerability. 
1) **arithmeticOperation** that checks whether there is arithmetic operation between variables.
2) **safeLibraryInvocation** that checks whether the arithmetic operations between variables are constrained by a security library function.
3) **conditionDeclaration** that checks whether the variable for the arithmetic operation is judged by the conditional statement.
We consider a function as suspicious to have a integer overflow or underflow vulnerability if it fulfills the combined pattern: **ArithmeticOperation ∧ (SafeLibraryInvoc ∨ ConditionDeclaration)**.


#### arithmeticOperation
Note that we treat those functions with the arithmetic operations _(e.g., +, -, *)_ as the target functions. As such, we first utilize the pattern **arithmeticOperation** to filter those functions without the arithmetic operations.



#### safeLibraryInvoc

Case 1: When there are arithmetic operations between the variables and the arithmetic operations are constrained by the security library function, we label the corresponding function to have no integer overflow/underflow vulnerability.
    
    ```
        1.library SafeMath {
        2.    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        3.      assert(b <= a);
        4.      return a - b;
        5.    }
        6.    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        7.      c = a + b;
        8.      assert(c >= a);
        9.      return c;
        10.    }
        11.}
        12.contract StandardToken {
        13.    using SafeMath for uint256;
        14.    mapping(address => uint256) balances; 
        15.    function transfer(address to, uint256 value) public returns (bool) {
        16.        balances[msg.sender] = balances[msg.sender].sub(value);
        17.        balances[to] = balances[to].add(value);
        18.        return true;
        19.    }
        20.}
    ```
    
As can be seen, the subtraction operation between the _balances[msg.sender]_ and the _value_ (line 16) is constrained by the security library function (line 2). Thus, we label the corresponding function _transfer_ to have no integer overflow/underflow vulnerability, i.e., label = 0.


#### conditionDeclaration

case 1: When the arithmetic operations and corresponding variables appear in the strict conditional statements (e.g., assert, require), we label the corresponding function to have no integer overflow/underflow vulnerability.
   
    ```
        1.contract Overflow_fixed_assert {
        2.    uint8 sellerBalance = 0;
        3.    function add(uint8 value) returns (uint) {
        4.        sellerBalance += value;
        5.        assert(sellerBalance >= value);
        6.        return sellerBalance;
        7.    }
        8.}
    ```
    
It can be observed, there is an addition operation between the _sellerBalance_ and the _value_ (line 4), and _assert_ statement contains the comparison between the r_sellerBalance_ and the _value_ (line 5). Thus, we label the corresponding function _add_ to have no integer overflow/underflow vulnerability, i.e., label = 0.


Case 2: When the subtraction operation appears in the strict conditional statement (e.g., assert, require) for comparison and the conditional statement appears before the subtraction operation, we label the corresponding function to have no integer overflow/underflow vulnerability.

    ```
        1.contract HiroyukiCoinDark {
        2.    mapping(address => uint256) public balanceOf;
        3.    function transfer(address to, uint value, bytes data) public returns (bool) {
        4.        require(balanceOf[msg.sender] >= value);
        5.        balanceOf[msg.sender] = balanceOf[msg.sender] - value;
        6.        balanceOf[to] = balanceOf[_to] + value;
        7.        assert(msg.sender.call.value(value)());
        8.        return true;
        9.    }
        10.}
    ```
 
As can be seen, there is a subtraction operation between the _balanceOf[msg.sender]_ and the _value_ (line 5), and the _require_ statement contains the comparison between the _balanceOf[msg.sender]_ and the _value_ (line 4). Thus, we label the corresponding function to have no integer overflow/underflow vulnerability, i.e., label = 0.


Case 3: When the function does not satisfy case 1 and case 2, we label the corresponding function to have integer overflow/underflow vulnerability.
    
    ```
        1. contract Overflow_add {
        2.    uint8 sellerBalance = 0;
        3.    function add(uint8 value) returns (uint) {
        4.        sellerBalance += value;
        5.        return sellerBalance;
        6.    }
        7. }
    ```
    
It can be observed, there is an addition operation between the _sellerBalance_ and the _value_ (line 4), and no conditional statement used to constrain the two variables after the addition operation. Thus, we label the corresponding function _add_ to have the integer overflow/underflow vulnerability, i.e., label = 1.


How to fix integeroverflow/underflow vulnerability code:

# *1- Use SafeMath (or Solidity 0.8+ Built-in Overflow Protection)*
Solidity prior to version 0.8 does not have built-in overflow/underflow protection. If you're using an older version, you must use SafeMath to safely handle arithmetic operations.

### **Vulnerable Code:**
function transfer(address _to, uint256 _value) public returns (bool) {
    balances[msg.sender] -= _value; //  Can underflow!
    balances[_to] += _value; //  Can overflow!
    return true;
}


### **fixed Code (Using SafeMath):**
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract SecureContract {
    using SafeMath for uint256; //  Enables SafeMath

    mapping(address => uint256) balances;

    function transfer(address _to, uint256 _value) public returns (bool) {
        balances[msg.sender] = balances[msg.sender].sub(_value); //  Prevents underflow
        balances[_to] = balances[_to].add(_value); //  Prevents overflow
        return true;
    }
}



# *2-  Use Require Statements to Prevent Underflow*
Before subtracting values, always ensure that the subtraction will not result in an underflow by using a require condition.

### **Vulnerable Code:**
function withdraw(uint256 _amount) public {
    balances[msg.sender] -= _amount; //  Can underflow if _amount > balance
}

### **fixed Code**
function withdraw(uint256 _amount) public {
    require(balances[msg.sender] >= _amount, "Insufficient balance"); // Prevents underflow
    balances[msg.sender] -= _amount;
}


# *3- Use Checked Loops to Avoid Overflow*
Be careful when iterating large numbers, especially with small integer types (uint8, uint16, etc.), as they may overflow when reaching their maximum value.

### **Vulnerable Code:**
function loopExample() public {
    for (uint8 i = 0; i < 300; i++) { // i overflows after 255
        // Some logic
    }
}

### **fixed Code**
function loopExample() public {
    for (uint256 i = 0; i < 300; i++) { // Uses uint256, preventing overflow
        // Some logic
    }
}


# *4- Avoid Off-by-One Errors in Arrays*
When modifying an array’s length, be cautious to avoid underflow and ensure that the operation makes logical sense.

### **Vulnerable Code:**
function popArray() public {
    require(array.length >= 0); //  Condition is always true (uint can't be negative)
    array.length--; // Underflow risk
}

### **fixed Code**
function popArray() public {
    require(array.length > 0, "Array is empty"); // Correct check
    array.pop(); // Use pop() instead of manual decrement
}

## **5- Validate Multiplication to Prevent Overflow**
Unchecked multiplication can cause **overflow**, leading to incorrect calculations for payments, rewards, or token transfers. Always validate the result before proceeding.

### **Vulnerable Code (Unchecked Multiplication)**
```solidity
require(msg.value == numTokens * PRICE_PER_TOKEN); // Can overflow

### **fixed Code**
require(numTokens > 0, "Invalid number of tokens"); //  Prevents division by zero
uint256 totalCost = numTokens * PRICE_PER_TOKEN;
require(numTokens == 0 || totalCost / numTokens == PRICE_PER_TOKEN, "Multiplication overflow"); // Correct overflow check
require(msg.value == totalCost, "Incorrect Ether sent"); //  Ensures correct payment

## **6- Validate Addition Before Updating Balances**
When increasing balances, ensure that the new value does not exceed the uint256 limit to prevent overflow.

### **Vulnerable Code**
function mintTokens(uint256 numTokens) public {
    balanceOf[msg.sender] += numTokens; // Can overflow
}

### **fixed Code**
require(balanceOf[msg.sender] + numTokens >= balanceOf[msg.sender], "Addition overflow detected"); //  Prevents overflow
balanceOf[msg.sender] += numTokens; //  Safe addition

## **7- Validate Ether Transfers to Avoid Overflow**
When sending Ether based on a multiplication result, validate the calculation before transferring funds.

### **Vulnerable Code**
function sellTokens(uint256 numTokens) public {
    msg.sender.transfer(numTokens * PRICE_PER_TOKEN); //  Can overflow
}

### **fixed Code**
require(numTokens > 0, "Invalid number of tokens"); //  Prevents division by zero
uint256 payout = numTokens * PRICE_PER_TOKEN;
require(payout / numTokens == PRICE_PER_TOKEN, "Multiplication overflow"); //  Correct overflow check
(bool success, ) = msg.sender.call{value: payout}(""); //  Secure transfer method
require(success, "Transfer failed"); //  Ensures successful transfer
