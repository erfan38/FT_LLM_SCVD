{
    "vulnerabilities": [
        {
            "vulnerableLines": "154-159",
            "vulnerableCode": [
                "if (block.timestamp < cliff) {",
                "    return 0;",
                "} else if (block.timestamp >= start.add(duration) || revoked[token]) {",
                "    return totalBalance;",
                "} else {",
                "    return totalBalance.mul(block.timestamp.sub(start)).div(duration);"
            ],
            "vulnerabilityReason": "The use of block.timestamp in the vesting calculation introduces a vulnerability because miners can manipulate timestamps when mining blocks. This can result in the calculations for vested amounts being inaccurate, particularly if a miner can slightly adjust the block timestamp for their advantage.",
            "potentialSecurityRisk": "The potential impact of this vulnerability is that miners could manipulate the block timestamp to either release more tokens than intended or delay the vesting process, leading to significant financial discrepancies and inequitable token distributions.",
            "fixedCode": "if (now < cliff) { // Use 'now' which points to the current block time\n    return 0;\n} else if (now >= start.add(duration) || revoked[token]) {\n    return totalBalance;\n} else {\n    return totalBalance.mul(now.sub(start)).div(duration);\n}"
        },
        {
            "vulnerableLines": "161-161",
            "vulnerableCode": [
                "function vestedAmount(ERC20Basic token) public view returns (uint256) {"
            ],
            "vulnerabilityReason": "The 'vestedAmount' function's reliance on block.timestamp can allow miners to affect the return value by setting the timestamp favorably, resulting in incorrect token amounts calculated for beneficiaries.",
            "potentialSecurityRisk": "This vulnerability can lead to unfair advantages in token distribution mechanics, where miners determine how much the beneficiary can withdraw based on their control over the timestamp, potentially leading to abuse and monetary losses.",
            "fixedCode": "function vestedAmount(ERC20Basic token) public view returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released[token]);\n    uint256 currentTime = now; // Using 'now' safely mitigates timestamp manipulation\n    if (currentTime < cliff) {\n        return 0;\n    } else if (currentTime >= start.add(duration) || revoked[token]) {\n        return totalBalance;\n    } else {\n        return totalBalance.mul(currentTime.sub(start)).div(duration);\n    }\n}"
        }
    ]
}