{
    "vulnerabilities": [
        {
            "vulnerableLines": "124-124",
            "vulnerableCode": [
                "require(block.timestamp > lockStartTime);"
            ],
            "vulnerabilityReason": "The function `allocateToken` checks if the current block's timestamp is greater than `lockStartTime`, which could be manipulated by miners. Miners can include their transaction with a block having a manipulated timestamp, allowing them to bypass the lock on token allocation if they wish to exploit the situation.",
            "potentialSecurityRisk": "This vulnerability can be exploited by a malicious miner to allocate tokens prematurely, enabling them to gain tokens earlier than intended, which undermines the vesting schedule and could lead to financial losses for stakeholders.",
            "fixedCode": "require(now > lockStartTime.add(TIME_TOLERANCE));"
        },
        {
            "vulnerableLines": "153-153",
            "vulnerableCode": [
                "uint256 stage = (block.timestamp.sub(lockStartTime)).div(vestingMonths);"
            ],
            "vulnerabilityReason": "The use of `block.timestamp` in the `vestStage` function allows for stage calculation based on manipulated timestamps. This makes the vesting schedule vulnerable to miner influence, leading to unpredictable token release stages.",
            "potentialSecurityRisk": "Manipulated timestamps could enable miners to calculate a more favorable vesting stage, leading to inappropriate token releases, which undermines the contract's intended distribution schedule and could distort the project's equity structure.",
            "fixedCode": "uint256 currentTime = now; uint256 stage = (currentTime.sub(lockStartTime)).div(vestingMonths);"
        }
    ]
}