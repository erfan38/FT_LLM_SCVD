{
    "vulnerabilities": [
        {
            "vulnerableLines": "208-212",
            "vulnerableCode": [
                "balanceOf[_addressToRefund] = 0;",
                "if (_addressToRefund.call.value(amount)()) {"
            ],
            "vulnerabilityReason": "The balance is set to zero before the call to transfer funds. If the recipient is a malicious contract, it can call back into the `calcRefund` function before the balance reset takes effect, allowing multiple withdrawals before the state update.",
            "potentialSecurityRisk": "An attacker could drain funds by exploiting this reentrancy vulnerability, allowing them to withdraw more than their balance by recursively calling back into `calcRefund`.",
            "fixedCode": "uint amount = balanceOf[_addressToRefund];  \nbalanceOf[_addressToRefund] = 0;  \nif (amount > 0) {  \n    if (_addressToRefund.call.value(amount)()) {  \n        LogFundTransfer(_addressToRefund, amount, false);  \n    } else {  \n        balanceOf[_addressToRefund] = amount;  \n    }  \n}"
        }
    ]
}