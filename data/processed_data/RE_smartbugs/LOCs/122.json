{
    "vulnerabilities": [
        {
            "vulnerableLines": "74-74",
            "vulnerableCode": [
                "if (!msg.sender.call.value(amount)()) throw;"
            ],
            "vulnerabilityReason": "This line performs an external call to send ethers back to the user before the internal state is updated. Therefore, if the external contract (user's contract) calls back into this contract during execution, it can exploit the state and re-enter the withdraw function, potentially leading to multiple withdrawals without the balance being updated.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that invokes a reentrancy attack, draining the contract of its funds by calling the withdraw function multiple times before the contract has a chance to update the user's balance.",
            "fixedCode": "require(amount <= tokens[0][msg.sender], 'Insufficient balance');  // Check user's balance\n\ntokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);  // Update balance before sending ETH\nif (!msg.sender.call.value(amount)()) throw;  // Send ETH after updating balance\nWithdraw(0, msg.sender, amount, tokens[0][msg.sender]);  // Log withdrawal event"
        }
    ]
}