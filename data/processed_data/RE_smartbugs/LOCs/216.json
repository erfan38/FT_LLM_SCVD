{
    "vulnerabilities": [
        {
            "vulnerableLines": "134-141",
            "vulnerableCode": [
                "require(balanceOf[msg.sender] >= _value);",
                "balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);",
                "balanceOf[_to] = balanceOf[_to].add(_value);",
                "ContractReceiver receiver = ContractReceiver(_to);",
                "receiver.tokenFallback(msg.sender, _value, _data);",
                "emit Transfer(msg.sender, _to, _value, _data);",
                "emit Transfer(msg.sender, _to, _value);"
            ],
            "vulnerabilityReason": "The function modifies the state (balances) before making an external call to the receiving contract via `tokenFallback`. This allows the receiving contract to call back to the `transferToContract` function before the state changes are finalized, enabling reentrancy attacks.",
            "potentialSecurityRisk": "An attacker could craft a malicious contract to call back into `transferToContract`, allowing them to withdraw more tokens than they are entitled to. This could lead to token theft or exhausting the balance of the contract.",
            "fixedCode": "function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    require(balanceOf[msg.sender] >= _value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value, _data);\n    emit Transfer(msg.sender, _to, _value);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    return true;\n}"
        }
    ]
}