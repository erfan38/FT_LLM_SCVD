{
    "vulnerabilities": [
        {
            "vulnerableLines": "200-200",
            "vulnerableCode": [
                "stubF.call.value(calcStubFundPercent).gas(estGas)();"
            ],
            "vulnerabilityReason": "The external call to stubF is made before updating the state of user deposits. This allows an attacker to exploit the contract by recursively calling the fallback function while the current transaction has not yet completed, leading to reentrancy vulnerabilities.",
            "potentialSecurityRisk": "An attacker can drain funds by re-entering the contract via the fallback function, allowing multiple withdrawals before the user deposit is updated.",
            "fixedCode": "(bool success, ) = stubF.call.value(calcStubFundPercent).gas(estGas)();\nrequire(success, 'Transfer failed');"
        },
        {
            "vulnerableLines": "183-206",
            "vulnerableCode": [
                "function makeDeposit() private {",
                "    uint value = msg.value;",
                "    uint calcProjectPercent = value.mul(percentProjectFund).div(100);",
                "    uint calcStubFundPercent = value.mul(percentStubFund).div(100);",
                "    if (msg.value > 0) {",
                "        require(msg.value >= minPayment, 'Minimum deposit 1 finney');",
                "        if (userDeposit[msg.sender] == 0) {",
                "            emit NewInvestor(msg.sender, msg.value);",
                "        }",
                "        userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);",
                "        userTime[msg.sender] = now;",
                "        insertBeneficiaries(msg.sender, 0, 0, msg.value);",
                "        projectFund.transfer(calcProjectPercent);",
                "        stubF.call.value(calcStubFundPercent).gas(estGas)();",
                "        counterDeposits += msg.value;",
                "        emit NewDeposit(msg.sender, msg.value);",
                "    } else {",
                "        receivePercent();",
                "    }",
                "}"
            ],
            "vulnerabilityReason": "The order of operations causes the external call to stubF to be executed before updating the userDeposit mapping. This allows potential recursive calls to exploit the contract state and withdraw funds without proper balance checks.",
            "potentialSecurityRisk": "An attacker could exploit this by re-entering the contract before the deposit is recorded, leading to repeated withdrawals of funds exceeding their actual deposits.",
            "fixedCode": "require(msg.value >= minPayment, 'Minimum deposit 1 finney');\nuserDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\nuserTime[msg.sender] = now;\ninsertBeneficiaries(msg.sender, 0, 0, msg.value);\nprojectFund.transfer(calcProjectPercent);\n(bool success, ) = stubF.call.value(calcStubFundPercent).gas(estGas)();\nrequire(success, 'Transfer failed');\ncounterDeposits += msg.value;\nemit NewDeposit(msg.sender, msg.value);"
        }
    ]
}