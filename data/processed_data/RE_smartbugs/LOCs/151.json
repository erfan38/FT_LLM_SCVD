{
    "vulnerabilities": [
        {
            "vulnerableLines": "60-66",
            "vulnerableCode": [
                "if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(",
                "EXEC_SEL, msg.sender, _exec_id, _calldata",
                ")) == false) {",
                "checkErrors(_exec_id);",
                "address(msg.sender).transfer(address(this).balance);"
            ],
            "vulnerabilityReason": "The contract performs a low-level call to `address(app_storage)` which can lead to reentrancy. The state-changing operation (the transfer of balance) occurs after this external call, allowing an attacker to execute another call back into the contract before the state is updated.",
            "potentialSecurityRisk": "A malicious contract could exploit this vulnerability by re-entering the `exec` function during the transfer operation, allowing the attacker to withdraw more funds than they are entitled to, potentially draining the contract's balance.",
            "fixedCode": "if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(EXEC_SEL, msg.sender, _exec_id, _calldata)) == false) { checkErrors(_exec_id); address(msg.sender).transfer(address(this).balance); return false; } success = checkReturn(); require(success, 'Execution failed'); address(msg.sender).transfer(address(this).balance);"
        },
        {
            "vulnerableLines": "240-249",
            "vulnerableCode": [
                "if(address(app_storage).call(",
                "abi.encodeWithSelector(EXEC_SEL,",
                "msg.sender,",
                "_exec_id,",
                "abi.encodeWithSelector(UPDATE_EXEC_SEL, _new_exec_addr)",
                "') == false) {"
            ],
            "vulnerabilityReason": "The contract calls `address(app_storage)` which could lead to reentrancy attacks. The sequence allows for an external call to execute with potential state manipulation prior to confirming the call's success. This makes it susceptible to attackers who could execute reentrant calls before state updates occur.",
            "potentialSecurityRisk": "An attacker could re-enter the function during the call to `app_storage`, bypassing the state logic, allowing them to manipulate the contract's state and extract funds illicitly.",
            "fixedCode": "if(address(app_storage).call(abi.encodeWithSelector(EXEC_SEL, msg.sender, _exec_id, abi.encodeWithSelector(UPDATE_EXEC_SEL, _new_exec_addr))) == false) { checkErrors(_exec_id); return false; } success = checkReturn(); require(success, 'Execution failed');"
        }
    ]
}