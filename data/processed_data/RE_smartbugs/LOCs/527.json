{
    "vulnerabilities": [
        {
            "vulnerableLines": "93-93",
            "vulnerableCode": [
                "require(FIRST_SUPPORT.call.value(ads).gas(gasleft())());"
            ],
            "vulnerabilityReason": "The use of call.value() in the fallback function allows external contracts to call back into this function before the state changes are applied, which can lead to multiple executions of this fallback function leading to unintended behavior and fund loss.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly invoke the fallback function, withdrawing more funds than intended and potentially draining the contract balance.",
            "fixedCode": "require(ads <= address(this).balance, \"Insufficient balance!\");\n(,bool success) = FIRST_SUPPORT.call.value(ads)();\nrequire(success, \"Transfer failed!\");"
        },
        {
            "vulnerableLines": "119-119",
            "vulnerableCode": [
                "dep.depositor.transfer(dep.expect);"
            ],
            "vulnerabilityReason": "The transfer call is made before the state of the deposit (the expected value) is updated or checked sufficiently. If malicious code in the 'depositor' contract re-enters this contract before the withdrawal state is updated, it can manipulate the funds being transferred.",
            "potentialSecurityRisk": "An external contract can exploit this function to repeatedly withdraw funds, causing an imbalance in the balance of the contract and allowing for potential fund theft.",
            "fixedCode": "if (money >= dep.expect) {\n    dep.depositor.transfer(dep.expect);\n    money -= dep.expect;\n} else {\n    dep.depositor.transfer(money);\n    dep.expect -= money;\n    break;\n} // Ensure to check balance before transfer"
        }
    ]
}