{
    "vulnerabilities": [
        {
            "vulnerableLines": "280-283",
            "vulnerableCode": [
                "if (msg.sender.call.value(_amount)()) {",
                "    _useFromDailyLimit(_amount);",
                "    totalRewarded += _amount;",
                "    emit RewardSuccess(now, msg.sender, _amount);"
            ],
            "vulnerabilityReason": "The function `_sendReward` uses `msg.sender.call.value(_amount)()` to send Ether, which is an external call that executes before the state changes are applied. This allows a malicious contract to re-enter the function and call `_sendReward` again, causing it to execute multiple times before the state is updated, leading to potential fund loss.",
            "potentialSecurityRisk": "A malicious actor could exploit this by deploying a contract that re-enters the `_sendReward` function, draining the contract's balance by withdrawing more funds than intended, as the balance is not updated until after sending the Ether.",
            "fixedCode": "function _sendReward(uint _reward) private { \n    uint _amount = _cappedReward(_reward);\n    if (_reward > 0 && _amount == 0) {\n        emit RewardFailure(now, msg.sender, _amount, \"Not enough funds, or daily limit reached.\");\n        return;\n    }\n    // Check if there are enough funds before making the external call\n    require(_amount <= address(this).balance, \"Insufficient funds in contract.\");\n    // Update state before transferring funds to prevent reentrancy\n    _useFromDailyLimit(_amount);\n    totalRewarded += _amount;\n    (bool success, ) = msg.sender.call.value(_amount)();\n    require(success, \"Transfer failed\");\n    emit RewardSuccess(now, msg.sender, _amount);\n}"
        }
    ]
}