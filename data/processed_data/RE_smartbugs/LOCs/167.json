{
    "vulnerabilities": [
        {
            "vulnerableLines": "1255-1255",
            "vulnerableCode": [
                "if (!address(admin).call.value(_com)())"
            ],
            "vulnerabilityReason": "The contract uses `call.value()` to send Ether to the admin without checking if the call was successful, allowing the contract to continue execution and potentially modifying the state even if the Ether transfer fails.",
            "potentialSecurityRisk": "An attacker could create a malicious fallback function in the admin address's contract, which could cause a reentrant call back into this function, allowing for fund misappropriation or denial of service.",
            "fixedCode": "(bool success, ) = address(admin).call.value(_com)(); require(success, \"Transfer to admin failed\");"
        },
        {
            "vulnerableLines": "1287-1287",
            "vulnerableCode": [
                "admin.transfer(_p3d.sub(_potAmount));"
            ],
            "vulnerabilityReason": "The `transfer()` method is being called to send Ether to the admin without checking if the operation succeeds, which can allow a reentrant call to occur before the contract updates its state properly.",
            "potentialSecurityRisk": "If the admin address is a contract, an attacker could exploit this by triggering a reentrant call, possibly allowing the attacker to withdraw more funds than intended through multiple calls before the state is updated.",
            "fixedCode": "(bool success, ) = admin.call.value(_p3d.sub(_potAmount))(''); require(success, \"Transfer to admin failed\");"
        },
        {
            "vulnerableLines": "414-414",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The transfer occurs directly before state variables are updated, meaning an attack could happen where the recipient could call back into the contract before the player's earnings are reset.",
            "potentialSecurityRisk": "An attacker can exploit reentrancy by calling the withdraw function multiple times before the state changes are completed, effectively draining the contract's funds.",
            "fixedCode": "uint256 withdrawalAmount = plyr_[_pID].win.add(plyr_[_pID].gen).add(plyr_[_pID].aff); plyr_[_pID].win = 0; plyr_[_pID].gen = 0; plyr_[_pID].aff = 0; (bool success, ) = plyr_[_pID].addr.call.value(withdrawalAmount)(''); require(success, \"Transfer failed\");"
        },
        {
            "vulnerableLines": "442-442",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The method here sends Ether and then modifies state variables afterwards, which allows a malicious contract to re-enter before the state variables are updated, enabling repeated withdrawals.",
            "potentialSecurityRisk": "This can lead to draining the contract if the recipient is a malicious contract that calls back before the state is updated, thus allowing multiple withdrawals in a single transaction.",
            "fixedCode": "uint256 withdrawalAmount = plyr_[_pID].win.add(plyr_[_pID].gen).add(plyr_[_pID].aff); plyr_[_pID].win = 0; plyr_[_pID].gen = 0; plyr_[_pID].aff = 0; (bool success, ) = plyr_[_pID].addr.call.value(withdrawalAmount)(''); require(success, \"Transfer failed\");"
        }
    ]
}