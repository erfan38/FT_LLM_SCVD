{
    "vulnerabilities": [
        {
            "vulnerableLines": "340-340",
            "vulnerableCode": [
                "_customerAddress.transfer(_dividends);"
            ],
            "vulnerabilityReason": "The contract uses the transfer method to send dividends after updating the internal state. This allows an attacker to call withdraw and during the transfer, could re-enter the contract for additional withdrawals before the internal state is fully updated.",
            "potentialSecurityRisk": "A malicious actor could execute a reentrant attack, allowing them to withdraw more funds than they are entitled to without the contract's state being accurately reflected, possibly draining the contract's balance.",
            "fixedCode": "uint256 _withdrawAmount = _dividends; _dividends = 0; _customerAddress.transfer(_withdrawAmount);"
        },
        {
            "vulnerableLines": "483-483",
            "vulnerableCode": [
                "if(!fundAddress_.call.value(ethToPay).gas(400000) {"
            ],
            "vulnerabilityReason": "Using low-level call to transfer ether without updating the state first leaves the contract open to reentrancy attacks. An attacker could exploit this by executing a callback during the low-level call, affecting the contract's state inconsistently.",
            "potentialSecurityRisk": "A malicious contract could call back into this contract before the state is updated, potentially allowing more ether to be withdrawn than intended or leading to an inconsistent contract state.",
            "fixedCode": "require(fundAddress_.send(ethToPay), 'Transfer failed');"
        }
    ]
}