{
    "vulnerabilities": [
        {
            "vulnerableLines": "53-53",
            "vulnerableCode": [
                "extraBalance.call.value(msg.value - token)();"
            ],
            "vulnerabilityReason": "The contract uses `call.value()` to transfer Ether before updating the state variables, which allows an attacker to call back into the contract before the state changes take effect, potentially manipulating balances and total supply.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to withdraw more tokens than they should, draining the contract's funds by making recursive calls during the Ether transfer.",
            "fixedCode": "uint token = (msg.value * 20) / divisor(); \nrequire(extraBalance.call.value(msg.value - token)(), 'Ether transfer failed'); \n// Update state variables after the call \nbalances[_tokenHolder] += token;\ntotalSupply += token;\nweiGiven[_tokenHolder] += msg.value;"
        },
        {
            "vulnerableLines": "74-74",
            "vulnerableCode": [
                "if (msg.sender.call.value(weiGiven[msg.sender])()) {"
            ],
            "vulnerabilityReason": "The contract uses `call.value()` for refunds without first updating the internal state. This allows reentrancy attacks as an attacker can call back into the contract before the `weiGiven` state is reset and potentially withdraw additional funds.",
            "potentialSecurityRisk": "An attacker could exploit this to repeatedly invoke the refund mechanism, draining the contract's Ether balance through reentrant calls before the state is updated.",
            "fixedCode": "uint weiAmount = weiGiven[msg.sender];\nweiGiven[msg.sender] = 0; \n// Ensure the balance can be paid out\nrequire(msg.sender.call.value(weiAmount)(), 'Refund transfer failed');"
        }
    ]
}