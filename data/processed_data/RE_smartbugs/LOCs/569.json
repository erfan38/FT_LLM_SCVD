{
    "vulnerabilities": [
        {
            "vulnerableLines": "85-85",
            "vulnerableCode": [
                "if (!founder.call.value(msg.value)()) throw;"
            ],
            "vulnerabilityReason": "The function 'buyRecipient' uses 'call.value()' to send Ether to the 'founder' address before updating any state variables. This order of operations creates a window where a reentrancy attack can occur, allowing an attacker to invoke the function again before the state is updated, potentially draining the contract of funds.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability by calling back into the 'buyRecipient' function while Ether is being transferred, allowing them to withdraw more funds than they are entitled to, leading to a complete depletion of the contract's Ether balance.",
            "fixedCode": "// Ensure to update the state before making the external call to prevent reentrancy:\n\"presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value); // Update state first\\n balances[recipient] = safeAdd(balances[recipient], tokens); // Update recipient balance\\n if (!founder.call.value(msg.value)()) throw; // Then make the transfer\""
        }
    ]
}