{
    "vulnerabilities": [
        {
            "vulnerableLines": "182-182",
            "vulnerableCode": [
                "_wasRefundSuccess = _prevMonarch.send(msg.value);"
            ],
            "vulnerabilityReason": "The external call to send Ether via `_prevMonarch.send(msg.value)` occurs before the contract's state is updated. If `_prevMonarch` is a malicious contract, it can call back into the `overthrow` method before the state changes are applied, allowing the attacker to drain funds.",
            "potentialSecurityRisk": "A malicious contract could exploit this vulnerability by reversing the transaction after receiving funds, re-invoking the `overthrow` function to withdraw Ether multiple times before the contract updates its state variables, potentially draining the contract's funds.",
            "fixedCode": "// Use the Checks-Effects-Interactions pattern\ntre\nuint256 prizeToSend = msg.value;\nif (!_isClean) {\n    require(_prevMonarch.send(prizeToSend), 'Refund failed');\n}"
        },
        {
            "vulnerableLines": "254-256",
            "vulnerableCode": [
                "_paySuccessful = _winner.call.value(_prize)();",
                "_paySuccessful = _winner.call.value(_prize).gas(_gasLimit)();"
            ],
            "vulnerabilityReason": "The call to `_winner.call.value(_prize)()` occurs before setting `vars.isPaid` to true, allowing a reentrant call if `_winner` is a malicious contract that could call back into `sendPrize` before the state is finalized.",
            "potentialSecurityRisk": "A malicious participant could exploit this to call `sendPrize` again before the state variable changes, enabling them to drain additional funds in a single transaction.",
            "fixedCode": "// Update state before sending funds\nvars.isPaid = true;\n(bool success, ) = _winner.call.value(_prize)();\nrequire(success, 'Transfer failed.');"
        },
        {
            "vulnerableLines": "289-289",
            "vulnerableCode": [
                "require(settings.collector.call.value(_feesSent)());"
            ],
            "vulnerabilityReason": "The contract transfers fees with `settings.collector.call.value(_feesSent)()`, which does not handle state changes before the external call, leading to potential reentrancy if `collector` is a malicious contract.",
            "potentialSecurityRisk": "If `settings.collector` is a malicious contract, it could perform reentrant calls back to this contract, thereby altering the expected state and potentially draining funds designed for other purposes.",
            "fixedCode": "// Ensure sufficient balance and send fees\nrequire(settings.collector.call.value(_feesSent)(),'Fees transfer failed.');"
        }
    ]
}