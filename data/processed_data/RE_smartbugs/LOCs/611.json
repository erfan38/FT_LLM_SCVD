{
    "vulnerabilities": [
        {
            "vulnerableLines": "349-352",
            "vulnerableCode": [
                "            shareCom.transfer(_p1);",
                "            admin.transfer(_p2);",
                "            plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee));"
            ],
            "vulnerabilityReason": "The contract performs Ether transfers before updating the player's earnings. This allows an attacker to exploit this by re-entering the contract before it actually registers that the funds have been withdrawn, potentially draining funds multiple times.",
            "potentialSecurityRisk": "This creates a significant risk of reentrancy during the transfer process, where an attacker can recursively call the withdraw function and deplete the contract's funds.",
            "fixedCode": "uint256 withdrawAmount = _eth.sub(_withdrawFee);\nplyr_[_pID].addr.transfer(withdrawAmount);\nadmin.transfer(_p2);\nshareCom.transfer(_p1);"
        },
        {
            "vulnerableLines": "714-714",
            "vulnerableCode": [
                "        if (address(admin).call.value((_com / 2))() == false)"
            ],
            "vulnerabilityReason": "Using .call() for Ether transfer does not revert on failure, and since this is done without checking and updating the contract state before, it allows for reentrancy vulnerabilities if the destination address contains callback logic.",
            "potentialSecurityRisk": "An attacker could exploit this to create a scenario in which they call back to the contract before the state is properly updated, allowing them to affect the funds available in the contract.",
            "fixedCode": "(bool success, ) = address(admin).call.value((_com / 2))();\nrequire(success, \"Transfer to admin failed\");"
        },
        {
            "vulnerableLines": "720-720",
            "vulnerableCode": [
                "        if (address(shareCom).call.value((_com / 2))() == false)"
            ],
            "vulnerabilityReason": "Similar to the previous issue with calling admin, this function's transfer does not handle failures properly and involves external calls before the state is updated, potentially leading to reentrancy attacks.",
            "potentialSecurityRisk": "An attacker could manipulate the operations within the shareCom contract or call back into this function, allowing for multiple withdrawals before the state reflects the new balance.",
            "fixedCode": "(bool success, ) = address(shareCom).call.value((_com / 2))();\nrequire(success, \"Transfer to shareCom failed\");"
        },
        {
            "vulnerableLines": "746-746",
            "vulnerableCode": [
                "        groupCut.transfer(_aff1);"
            ],
            "vulnerabilityReason": "The transfer occurs before any state updates are applied, providing an opportunity for an attacker to re-enter and drain funds before the affected address's balance is correctly updated in the contract's state.",
            "potentialSecurityRisk": "As with the previous issues, this presents a pathway for attackers to exploit the sequence of execution to withdraw multiple times, exhausting the funds within the contract before the updates are made.",
            "fixedCode": "(bool success, ) = groupCut.call.value(_aff1)();\nrequire(success, \"Transfer to groupCut failed\");"
        }
    ]
}