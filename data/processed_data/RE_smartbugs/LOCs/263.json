{
    "vulnerabilities": [
        {
            "vulnerableLines": "132-143",
            "vulnerableCode": [
                "function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {",
                "require(_value > 0",
                "&& frozenAccount[msg.sender] == false ",
                "&& frozenAccount[_to] == false",
                "&& now > unlockUnixTime[msg.sender]",
                "&& now > unlockUnixTime[_to]);",
                "if (isContract(_to)) {",
                "require(balanceOf[msg.sender] >= _value);",
                "balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);",
                "balanceOf[_to] = balanceOf[_to].add(_value);",
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The function performs state changes (updating balances) before making an external call to `_to`. This allows an attacker to exploit the external call if `_to` is a contract that could re-enter the `transfer` function before the balances are fully updated.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that calls back into the `transfer` function while the state is still inconsistent. This could lead to repeated withdrawals, draining the contract's funds.",
            "fixedCode": ">     function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) { >         require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to]); >         if (isContract(_to)) { >             require(balanceOf[msg.sender] >= _value); >             balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); >             balanceOf[_to] = balanceOf[_to].add(_value); >             // Make the external call after changing state >             Transfer(msg.sender, _to, _value, _data); // event emitted before call >             require(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data)); >             return true; >         } "
        },
        {
            "vulnerableLines": "399-409",
            "vulnerableCode": [
                "function autoDistribute() payable public {",
                "require(distributeAmount > 0",
                "&& balanceOf[owner] >= distributeAmount",
                "&& frozenAccount[msg.sender] == false",
                "&& now > unlockUnixTime[msg.sender]);",
                "if(msg.value > 0) owner.transfer(msg.value);",
                "balanceOf[owner] = balanceOf[owner].sub(distributeAmount);",
                "balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);",
                "Transfer(owner, msg.sender, distributeAmount);"
            ],
            "vulnerabilityReason": "In this function, the contract updates the owner and msg.sender's balance before transferring Ether to the owner. This allows an external call to be made to `owner` before updates are complete, which can lead to reentrancy.",
            "potentialSecurityRisk": "A malicious contract can take advantage of this vulnerability to trick the `autoDistribute` function into executing multiple times before the balance changes are registered, potentially draining the funds or causing unintended distributions.",
            "fixedCode": ">     function autoDistribute() payable public { >         require(distributeAmount > 0 && balanceOf[owner] >= distributeAmount && frozenAccount[msg.sender] == false && now > unlockUnixTime[msg.sender]); >         uint256 toDistribute = distributeAmount; >         // Update balance prior to the transfer to prevent reentrancy attack >         balanceOf[owner] = balanceOf[owner].sub(toDistribute); >         balanceOf[msg.sender] = balanceOf[msg.sender].add(toDistribute); >         if(msg.value > 0) { >             // External call to transfer funds >             require(owner.send(msg.value)); >         } >         Transfer(owner, msg.sender, toDistribute); >     }"
        }
    ]
}