{
    "vulnerabilities": [
        {
            "vulnerableLines": "54-54",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The external call to `_to` is made before updating the balance of the sender and receiver. This allows a malicious contract to execute a fallback function that can call `transfer` again before the original transfer state is updated, leading to potential reentrancy.",
            "potentialSecurityRisk": "A malicious contract could exploit this by repeatedly entering the `transfer` function before any updates are made to the state, potentially draining funds from the contract or allowing unauthorized transfers.",
            "fixedCode": "require(balanceOf(msg.sender) >= _value, 'Insufficient balance');\nbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\nbalances[_to] = safeAdd(balanceOf(_to), _value);\nassert(_to.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data)); // Only call the fallback after state update."
        },
        {
            "vulnerableLines": "140-140",
            "vulnerableCode": [
                "receiver.tokenFallback(msg.sender, _value, _data);"
            ],
            "vulnerabilityReason": "The call to the external contract's `tokenFallback` function occurs before updating the state for the sender's balance, risking a reentrancy attack similar to that seen in the previous issue.",
            "potentialSecurityRisk": "A malicious receiver could invoke a reentrant call to the `transferToContract` function or any data-altering function between the state updates, potentially allowing an attacker to withdraw more tokens than they are entitled to.",
            "fixedCode": "require(balanceOf(msg.sender) >= _value, 'Insufficient balance');\nbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\nbalances[_to] = safeAdd(balanceOf(_to), _value);\nreceiver.tokenFallback(msg.sender, _value, _data); // Ensure state is updated before external call."
        }
    ]
}