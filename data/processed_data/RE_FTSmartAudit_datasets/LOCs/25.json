{
    "vulnerabilities": [
        {
            "vulnerableLines": "11-11",
            "vulnerableCode": [
                "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); "
            ],
            "vulnerabilityReason": "The function uses `msg.sender.call.value(amountToWithdraw)()` to send Ether before updating the user's balance. This allows a malicious contract to receive the Ether and re-enter the `withdrawBalance` function before the user's balance is set to zero, resulting in multiple withdrawals.",
            "potentialSecurityRisk": "An attacker can exploit this by deploying a malicious contract that re-invokes the `withdrawBalance` function through a fallback function, allowing them to withdraw more Ether than they are supposed to by utilizing the unmodified balance.",
            "fixedCode": "        userBalances[msg.sender] = 0; // First, zero out the user's balance\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"); // Then send the Ether\n        require(success); // Check transfer success"
        }
    ]
}