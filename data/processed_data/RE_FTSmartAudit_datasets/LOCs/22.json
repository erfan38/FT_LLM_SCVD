{
    "vulnerabilities": [
        {
            "vulnerableLines": "48-48",
            "vulnerableCode": [
                "            if(msg.sender.call.value(_am)())"
            ],
            "vulnerabilityReason": "The function makes an external call to `msg.sender` using `call.value(_am)()` before updating the user's balance, allowing for a reentrancy attack. If `msg.sender` is a contract that calls back into the `Collect` function before the balance is updated, it can withdraw more than it is allowed to.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by deploying a malicious contract that re-enters the `Collect` function, draining funds from the `balances` mapping before it gets updated. This could result in significant financial loss for the bank contract.",
            "fixedCode": "            if (balances[msg.sender] >= MinSum && balances[msg.sender] >= _am) {\n                balances[msg.sender] -= _am; // Update balances first\n                if (!msg.sender.call.value(_am)()) {\n                    balances[msg.sender] += _am; // Revert if the call fails\n                } else {\n                    Log.AddMessage(msg.sender, _am, \"Collect\");\n                }\n            }"
        }
    ]
}