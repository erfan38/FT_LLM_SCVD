{
    "vulnerabilities": [
        {
            "vulnerableLines": "46-46",
            "vulnerableCode": [
                "            if(msg.sender.call.value(_am)())"
            ],
            "vulnerabilityReason": "The function `CashOut` sends Ether to `msg.sender` using `call.value(_am)()` before updating the balance with `balances[msg.sender]-=_am`. This order allows a malicious contract to re-enter the `CashOut` function before the balance is updated, allowing it to withdraw more than intended.",
            "potentialSecurityRisk": "An attacker can deploy a malicious contract that calls `CashOut`, triggering a reentrant call back into the function before the balance update occurs. This could allow the attacker to withdraw more funds than they actually have in their balance, ultimately draining the contract's funds.",
            "fixedCode": "            balances[msg.sender]-=_am; // Update balance before external call\n            if(!msg.sender.call.value(_am)()) { \n                balances[msg.sender] += _am; // Revert the balance they would have lost if the call failed \n            } else {\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            } // Fixed by moving balance update before external call and adding a check for call success."
        }
    ]
}