{
    "vulnerabilities": [
        {
            "vulnerableLines": "68-68",
            "vulnerableCode": [
                "balances[tokenWallet] = saleCap;"
            ],
            "vulnerabilityReason": "The line sets the balance of the token wallet to the sale cap without checking if the sale cap exceeds the maximum uint256 value or if it results in underflow from a previous state.",
            "potentialSecurityRisk": "This could allow an attacker to manipulate the sale cap, resulting in incorrect balances or allowing them to gain control over more tokens than intended, leading to possible funds mismanagement.",
            "fixedCode": "balances[tokenWallet] = saleCap <= MAX_UINT256 ? saleCap : MAX_UINT256; // Ensures saleCap does not exceed limits."
        },
        {
            "vulnerableLines": "88-90",
            "vulnerableCode": [
                "saleCap = saleCap - amount;",
                "balances[tokenWallet] = balances[tokenWallet].sub(amount);"
            ],
            "vulnerabilityReason": "The subtraction operations here are vulnerable to underflow errors if `amount` is greater than `saleCap` or `balances[tokenWallet]` respectively.",
            "potentialSecurityRisk": "If `saleCap` or the token wallet balance is manipulated, this could trigger an underflow, allowing for potentially unauthorized increases in balance or incorrectly managing sale caps, leading to funds being lost or drained.",
            "fixedCode": "require(amount <= saleCap, \"Amount exceeds saleCap\"); \nsaleCap = saleCap.sub(amount); \nbalances[tokenWallet] = balances[tokenWallet].sub(amount);"
        },
        {
            "vulnerableLines": "96-104",
            "vulnerableCode": [
                "require(balances[0xb1].add(balances[tokenWallet]).sub(_saleCap) > 0);",
                "if (balances[tokenWallet] > _saleCap) {",
                "amount = balances[tokenWallet].sub(_saleCap);",
                "balances[0xb1] = balances[0xb1].add(amount);",
                "} else {",
                "amount = _saleCap.sub(balances[tokenWallet]);",
                "balances[0xb1] = balances[0xb1].sub(amount);"
            ],
            "vulnerabilityReason": "This condition evaluates if the total balances minus `_saleCap` is greater than zero without ensuring thereâ€™s no underflow growing from subtracting balances in the condition; the checks on individual balances also lack SafeMath protection for subtracting.",
            "potentialSecurityRisk": "This logic could allow negative balances inadvertently, leading to exploit opportunities whereby tokens could be extracted incorrectly from the contract's total supply or leading to corrupt states.",
            "fixedCode": "require(balances[0xb1].add(balances[tokenWallet]) >= _saleCap, \"Total balance insufficient\"); \nif (balances[tokenWallet] >= _saleCap) { \n   amount = balances[tokenWallet].sub(_saleCap); \n   balances[0xb1] = balances[0xb1].add(amount); \n} else { \n   amount = _saleCap.sub(balances[tokenWallet]); \n   require(balances[0xb1] >= amount, \"Insufficient funds in balances[0xb1]\"); \n   balances[0xb1] = balances[0xb1].sub(amount); \n}"
        },
        {
            "vulnerableLines": "125-131",
            "vulnerableCode": [
                "uint256 bonusRatio = etherAmount.div(500 ether);",
                "uint256 bonusCount = SafeMath.mul(bonusRatio, 10);",
                "uint256 bouns = SafeMath.mul(tokenAmount, bonusCount);",
                "uint256 realBouns = SafeMath.div(bouns, 100);"
            ],
            "vulnerabilityReason": "The line calculating `bonusCount` and `bouns` uses `mul` without proper checks for the potential overflow of these multiplications, especially when working with large numbers in this context.",
            "potentialSecurityRisk": "Overflow here could lead to reward schemes being manipulated granting excessive bonuses or completely breaking the logic of token distribution, impacting the contract's integrity.",
            "fixedCode": "require(etherAmount <= MAX_UINT256 / 500 ether, \"EtherAmount too high for bonusRatio calculation\"); \nuint256 bonusRatio = etherAmount.div(500 ether); \nrequire(bonusCount <= MAX_UINT256 / 10, \"BonusCount calculation overflow\"); \nuint256 bonusCount = SafeMath.mul(bonusRatio, 10); \nuint256 bouns = SafeMath.mul(tokenAmount, bonusCount); \nrequire(bouns <= MAX_UINT256 / 100, \"Bouns calculation overflow\"); \nuint256 realBouns = SafeMath.div(bouns, 100);"
        },
        {
            "vulnerableLines": "169-173",
            "vulnerableCode": [
                "uint256 amount = value.mul(bonus);",
                "uint256 p1Bouns = getBounsByAmount(value, amount);",
                "amount = amount + p1Bouns;"
            ],
            "vulnerabilityReason": "The multiplication of `value` and `bonus` lacks checks to prevent overflow, which could happen if the multiplicated result exceeds the uint256 limit.",
            "potentialSecurityRisk": "An overflow could allow erroneous amounts to be processed, allowing more tokens to be minted than intended, skewing tokenomics and causing potential losses.",
            "fixedCode": "require(value <= MAX_UINT256 / bonus, \"Value too high for amount calculation\"); \nuint256 amount = value.mul(bonus); \nuint256 p1Bouns = getBounsByAmount(value, amount); \nrequire(amount + p1Bouns >= amount, \"Overflow detected on amount + p1Bouns\"); \namount = amount.add(p1Bouns);"
        },
        {
            "vulnerableLines": "182-182",
            "vulnerableCode": [
                "saleCap = saleCap - amount;"
            ],
            "vulnerabilityReason": "The line decreases the `saleCap` without checking if `amount` exceeds the current `saleCap`, which risks resulting in an underflow.",
            "potentialSecurityRisk": "If `amount` is greater than `saleCap`, this could lead to negative balances or errant logic causing potential funds to be lost.",
            "fixedCode": "require(amount <= saleCap, \"Amount exceeds saleCap\"); \nsaleCap = saleCap.sub(amount);"
        },
        {
            "vulnerableLines": "185-185",
            "vulnerableCode": [
                "weiRaised = weiRaised + value;"
            ],
            "vulnerabilityReason": "The addition of `value` to `weiRaised` is not checked, which could lead to overflow if the accumulated weiRaised exceeds max uint256.",
            "potentialSecurityRisk": "Overflowing this can allow incorrect handling of donation or purchase scenarios invoking logical flaws in financial computations.",
            "fixedCode": "require(weiRaised + value >= weiRaised, \"Overflow detected on weiRaised\"); \nweiRaised = weiRaised.add(value);"
        }
    ]
}