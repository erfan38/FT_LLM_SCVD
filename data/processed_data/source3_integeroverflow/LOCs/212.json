{
    "vulnerabilities": [
        {
            "vulnerableLines": "26-27",
            "vulnerableCode": [
                "balances[msg.sender] -= _value;",
                "balances[_to] += _value;"
            ],
            "vulnerabilityReason": "The contract adjusts balances without checking for overflow or underflow. Specifically, subtracting _value from balances[msg.sender] could lead to underflow if _value exceeds the current balance, while adding _value to balances[_to] could result in overflow if the new balance exceeds MAX_UINT256.",
            "potentialSecurityRisk": "Attacker can exploit this vulnerability by transferring more tokens than the balance allows, causing an integer underflow. This can lead to arbitrary token balances, allowing transfer of unlimited tokens to any address, resulting in loss of funds.",
            "fixedCode": "require(balances[msg.sender] >= _value, 'Insufficient balance');\nbalances[msg.sender] = balances[msg.sender] - _value;\nrequire(balances[_to] + _value >= balances[_to], 'Overflow detected');\nbalances[_to] = balances[_to] + _value;"
        },
        {
            "vulnerableLines": "35-36",
            "vulnerableCode": [
                "balances[_to] += _value;",
                "balances[_from] -= _value;"
            ],
            "vulnerabilityReason": "Similar to the transfer function, the transferFrom function also modifies balances without any overflow or underflow checks. Adding _value to balances[_to] can overflow if the result exceeds MAX_UINT256, and subtracting _value from balances[_from] can cause underflow if _value exceeds balances[_from].",
            "potentialSecurityRisk": "An attacker can manipulate the transferFrom function to create a situation where the allowance or balance is adjusted below zero, resulting in unintended token grants or a situation where the contract can be left in an undefined state, allowing for unauthorized withdrawals of tokens.",
            "fixedCode": "require(balances[_from] >= _value, 'Insufficient balance');\nrequire(balances[_to] + _value >= balances[_to], 'Overflow detected');\nbalances[_from] = balances[_from] - _value;\nbalances[_to] = balances[_to] + _value;"
        }
    ]
}