{
    "vulnerabilities": [
        {
            "vulnerableLines": "30-31",
            "vulnerableCode": [
                "balanceOf[msg.sender] -= _value;",
                "balanceOf[_to] += _value;"
            ],
            "vulnerabilityReason": "The contract performs arithmetic operations to modify the `balanceOf` mapping without checking for overflow or underflow. If `_value` exceeds the balance of `msg.sender`, this will cause an underflow, producing a misleadingly high balance (due to the wrap around). Additionally, if adding `_value` to `balanceOf[_to]` results in exceeding the maximum uint256 limit, it could cause an overflow, resulting in incorrect balances.",
            "potentialSecurityRisk": "This vulnerability can lead to scenarios where users can manipulate their token balances, allowing them to transfer more tokens than they own, potentially leading to unauthorized token creation and severe financial losses for users or the contract owner.",
            "fixedCode": "require(balanceOf[msg.sender] >= _value, \"Insufficient balance\");\nbalanceOf[msg.sender] = balanceOf[msg.sender] - _value;\nrequire(balanceOf[_to] + _value >= balanceOf[_to], \"Overflow detected\");\nbalanceOf[_to] = balanceOf[_to] + _value;\n// Using Solidity 0.8+ built-in overflow/underflow checks or SafeMath."
        },
        {
            "vulnerableLines": "50-53",
            "vulnerableCode": [
                "balanceOf[_from] -= _value;",
                "balanceOf[_to] += _value;",
                "allowance[_from][msg.sender] -= _value;"
            ],
            "vulnerabilityReason": "The `balanceOf[_from]` and `allowance[_from][msg.sender]` values are decremented without checks for underflow. If `_value` is greater than the respective balances or allowances, it could result in unintended behavior, such as returning a misleadingly large balance or allowance after wrap around.",
            "potentialSecurityRisk": "An attacker could exploit this by initiating transfers larger than allowed, causing underflows and increasing their allowed limits maliciously, resulting in the potential theft of tokens or unauthorized access to user funds.",
            "fixedCode": "require(balanceOf[_from] >= _value, \"Insufficient balance\");\nrequire(allowance[_from][msg.sender] >= _value, \"Allowance exceeded\");\nbalanceOf[_from] = balanceOf[_from] - _value;\nrequire(balanceOf[_to] + _value >= balanceOf[_to], \"Overflow detected\");\nbalanceOf[_to] = balanceOf[_to] + _value;\nallowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;"
        }
    ]
}