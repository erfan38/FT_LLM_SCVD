{
    "vulnerabilities": [
        {
            "vulnerableLines": "6-7",
            "vulnerableCode": [
                "balances[msg.sender] = balances[msg.sender] - amount;",
                "balances[to] = balances[to] + amount;"
            ],
            "vulnerabilityReason": "The contract performs arithmetic operations directly on `balances[msg.sender]` and `balances[to]` without any checks for underflow or overflow. Subtracting `amount` from `balances[msg.sender]` could cause an underflow if `amount` is greater than the current balance, resulting in a negative balance (which in Solidity's earlier versions would wrap around to a large positive value). Adding `amount` to `balances[to]` could overflow if the resulting balance exceeds the maximum value of uint256.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by transferring more tokens than they own, causing their balance to underflow, which could result in them becoming a high holder of tokens unlawfully. Additionally, tokens could be created without limit if `balances[to]` overflows, enabling potential theft of funds.",
            "fixedCode": "require(balances[msg.sender] >= amount, \"Insufficient balance\");\nbalances[msg.sender] = balances[msg.sender] - amount;\nrequire(balances[to] + amount >= balances[to], \"Overflow detected\");\nbalances[to] = balances[to] + amount; // Using Solidity 0.8+ built-in overflow/underflow checks or SafeMath for older versions."
        }
    ]
}