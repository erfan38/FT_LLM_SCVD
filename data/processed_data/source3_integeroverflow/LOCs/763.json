{
    "vulnerabilities": [
        {
            "vulnerableLines": "88-90",
            "vulnerableCode": [
                "saleCap = saleCap - amount;",
                "balances[tokenWallet] = balances[tokenWallet].sub(amount);"
            ],
            "vulnerabilityReason": "The operation 'saleCap - amount' could lead to an underflow if 'amount' is greater than 'saleCap'. Additionally, 'balances[tokenWallet].sub(amount)' could lead to an underflow if 'amount' exceeds 'balances[tokenWallet]'.",
            "potentialSecurityRisk": "An underflow could allow an attacker to manipulate the saleCap or token balances, leading to potentially unauthorized transfers or incorrect accounting of the sale cap.",
            "fixedCode": "require(saleCap >= amount, 'Insufficient sales cap');\nsaleCap = saleCap.sub(amount);\nbalances[tokenWallet] = balances[tokenWallet].sub(amount);"
        },
        {
            "vulnerableLines": "96-104",
            "vulnerableCode": [
                "require(balances[0xb1].add(balances[tokenWallet]).sub(_saleCap) > 0);",
                "amount = balances[tokenWallet].sub(_saleCap);",
                "balances[0xb1] = balances[0xb1].add(amount);",
                "amount = _saleCap.sub(balances[tokenWallet]);",
                "balances[0xb1] = balances[0xb1].sub(amount);"
            ],
            "vulnerabilityReason": "The subtraction and addition in these operations could lead to overflow or underflow if the values involved are not properly validated. Specifically, 'balances[tokenWallet]' may be less than 'saleCap', and 'balances[0xb1] + amount' may exceed the max uint256 value.",
            "potentialSecurityRisk": "This can lead to incorrect balance updates, allowing an attacker to manipulate the balance of 'balances[0xb1]' and undermine the functionality of the smart contract.",
            "fixedCode": "require(balances[tokenWallet] >= _saleCap, 'Insufficient balance for the sale cap');\namount = balances[tokenWallet].sub(_saleCap);\nbalances[0xb1] = balances[0xb1].add(amount);\nrequire(balances[0xb1] >= amount, 'Overflow detected');\nbalances[0xb1] = balances[0xb1].sub(amount);"
        },
        {
            "vulnerableLines": "169-169",
            "vulnerableCode": [
                "uint256 amount = value.mul(bonus);"
            ],
            "vulnerabilityReason": "The multiplication operation 'value.mul(bonus)' could lead to overflow if the result exceeds the maximum value for uint256.",
            "potentialSecurityRisk": "This may allow an attacker to withdraw more tokens than intended or to manipulate arithmetic operations to achieve unintended effects, leading to potential loss of funds.",
            "fixedCode": "require(value > 0 && bonus > 0, 'Invalid value or bonus');\nuint256 amount = value.mul(bonus);\nrequire(amount >= value, 'Overflow detected');"
        }
    ]
}