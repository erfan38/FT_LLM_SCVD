{
    "vulnerabilities": [
        {
            "vulnerableLines": "10-10",
            "vulnerableCode": [
                "uint256 stakingDuration = now - stakingStart;"
            ],
            "vulnerabilityReason": "The subtraction operation can lead to an underflow if 'now' is less than 'stakingStart'. This situation can arise if the staking start time is set in the future, causing the duration to be a negative number.",
            "potentialSecurityRisk": "If an underflow occurs, this could lead to incorrect calculations of staking duration, which may result in erroneous reward calculations. This can allow stakers to unintentionally receive rewards that are higher than expected, leading to economic exploits.",
            "fixedCode": "uint256 stakingDuration = now >= stakingStart ? now - stakingStart : 0; // Ensure no underflow occurs."
        },
        {
            "vulnerableLines": "12-12",
            "vulnerableCode": [
                "return stakers[msg.sender]._stakedAmount * monthsPassed * 2 / 100;"
            ],
            "vulnerabilityReason": "The multiplication operation can cause an overflow if '_stakedAmount' and 'monthsPassed' are sufficiently large. Since both values are user-defined, they can potentially exceed the uint256 limit when multiplied, causing unpredictable behavior in the contract.",
            "potentialSecurityRisk": "If an overflow occurs during the reward calculation, the return value could wrap around and result in a much smaller number, causing the staker to receive less reward than intended or even zero rewards, which could exploit the system by manipulating stake amounts and reward calculations.",
            "fixedCode": "require(stakers[msg.sender]._stakedAmount <= type(uint256).max / (monthsPassed * 2 / 100), \"Calculation overflow\");\nreturn stakers[msg.sender]._stakedAmount * monthsPassed * 2 / 100; // Safe multiplication after overflow check."
        }
    ]
}