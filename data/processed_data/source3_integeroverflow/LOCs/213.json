{
    "vulnerabilities": [
        {
            "vulnerableLines": "241-242",
            "vulnerableCode": [
                "ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (10 - i));",
                "lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (10 - i));"
            ],
            "vulnerabilityReason": "The code performs division operations where the divisor can become very small (specifically, 10 - i) in certain iterations, leading to potential unintended behavior like overflow, especially if the operation's results are not expected due to low divisor values and unchecked previous conditions.",
            "potentialSecurityRisk": "If 'i' equals 10, it will cause a division by zero, which will likely result in a revert. However, if 'i' is very close to 10, it can still create smaller fractions that, when multiplied, could cause unexpected results in lockedance and ownerance leading to incorrect balances being assigned or deducted.",
            "fixedCode": "require(10 > i, \"Invalid division operation\"); \nownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (10 - i)); \nlockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (10 - i));"
        },
        {
            "vulnerableLines": "259-260",
            "vulnerableCode": [
                "ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (11 - j));",
                "lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (11 - j));"
            ],
            "vulnerabilityReason": "Similar to the previous example, the divisor (11 - j) can become too small or even lead to division by zero when 'j' reaches 11, which results in a critical failure during execution and can lead to miscalculated balances.",
            "potentialSecurityRisk": "If 'j' equals 11, it will cause division by zero, causing the contract to revert. Moreover, if the division yields unintended results due to low divisor values, it could cause incorrect balances to be maintained, which may allow for unauthorized fund access.",
            "fixedCode": "require(11 > j, \"Invalid division operation\"); \nownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (11 - j)); \nlockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (11 - j));"
        }
    ]
}