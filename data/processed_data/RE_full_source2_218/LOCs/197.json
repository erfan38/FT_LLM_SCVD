{
    "vulnerabilities": [
        {
            "vulnerableLines": "8-8",
            "vulnerableCode": [
                "require(_participant.call.value(weiAmount)());"
            ],
            "vulnerabilityReason": "The use of 'call.value(weiAmount)()' allows external calls before the state is updated. If the participant is a malicious contract, it can execute its fallback function, which may re-enter the 'reject' function before 'deposited[_participant]' is set to zero, allowing multiple withdrawals of funds.",
            "potentialSecurityRisk": "A malicious contract could exploit this by re-entering the function to drain funds, leading to a loss of Ether from the contract as it allows the same amount to be withdrawn multiple times.",
            "fixedCode": "uint256 weiAmount = deposited[_participant];\nrequire(weiAmount > 0, 'No funds to withdraw');\n// Set the participant's deposit to zero before sending funds to prevent reentrancy.\ndeposited[_participant] = 0;\n(bool success, ) = _participant.call.value(weiAmount)();\nrequire(success, 'Transfer failed');"
        }
    ]
}