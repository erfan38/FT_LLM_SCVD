{
    "vulnerabilities": [
        {
            "vulnerableLines": "9-9",
            "vulnerableCode": [
                "msg.sender.call.value(_am);"
            ],
            "vulnerabilityReason": "The `call.value(_am)` allows `msg.sender` to execute arbitrary code before the state is updated. If `msg.sender` is a smart contract, it could re-enter the `Collect` function and withdraw more funds than it should before the balance is deducted in the next line.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by creating a malicious contract that calls back into the `Collect` function, potentially draining funds from the contract by repeatedly withdrawing within a single transaction.",
            "fixedCode": "// Update balance first to mitigate reentrancy risk\nBal[msg.sender] -= _am;\n(bool success, ) = msg.sender.call.value(_am)();\nrequire(success, \"Transfer failed\");"
        }
    ]
}