{
    "vulnerabilities": [
        {
            "vulnerableLines": "301-301",
            "vulnerableCode": [
                "lockedAt = block.timestamp;"
            ],
            "vulnerabilityReason": "The contract uses block.timestamp to set a locking time, which can be manipulated by miners leading to improper management of the token's locked state. This affects how and when the tokens can be accessed by the team reserve wallets.",
            "potentialSecurityRisk": "Miners could set the block timestamp to a future time to unlock tokens earlier than intended, allowing for unauthorized access to funds that are supposed to be locked until a certain period.",
            "fixedCode": "lockedAt = now; // Alternatively, use block.timestamp + TIME_TOLERANCE to increase security against manipulation."
        },
        {
            "vulnerableLines": "337-337",
            "vulnerableCode": [
                "require(block.timestamp > timeLocks[reserveWallet]);"
            ],
            "vulnerabilityReason": "By relying on block.timestamp to check if the lock period is over, the contract becomes vulnerable to premature unlocking of reserves if a miner manipulates the block timestamp.",
            "potentialSecurityRisk": "A miner could manipulate the timestamp to bypass the lock, allowing the team to claim tokens that should still be locked, leading to financial misconduct and loss of trust in the contract's integrity.",
            "fixedCode": "require(now > timeLocks[reserveWallet] + TIME_TOLERANCE); // Adding a buffer guard against exploit."
        },
        {
            "vulnerableLines": "379-379",
            "vulnerableCode": [
                "uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);"
            ],
            "vulnerabilityReason": "The calculation of the vesting stage is directly tied to block.timestamp, which can be altered by miners, affecting when team tokens can be claimed based on artificially adjusted timestamps.",
            "potentialSecurityRisk": "This manipulation can allow the team to access their tokens earlier than intended, giving them unfair advantages during the vesting process.",
            "fixedCode": "uint256 stage = (now.sub(lockedAt)).div(vestingMonths); // Use 'now' or introduce a buffer."
        },
        {
            "vulnerableLines": "393-393",
            "vulnerableCode": [
                "return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;"
            ],
            "vulnerabilityReason": "This function checks if the current time is beyond a certain limit determined by block.timestamp, which is subject to miner manipulation, leading to incorrect allowance checks for claiming tokens.",
            "potentialSecurityRisk": "If miners manipulate the timestamp, an address may claim tokens that should still be locked, contributing to financial losses and unfair distribution of resources.",
            "fixedCode": "return now > timeLocks[msg.sender] + TIME_TOLERANCE && claimed[msg.sender] == 0; // Adding a safeguard against timestamp manipulation."
        }
    ]
}