{
    "vulnerabilities": [
        {
            "vulnerableLines": "391-414",
            "vulnerableCode": [
                "function getCurrentFgcCap() public constant returns (uint) {",
                "if (block.timestamp < startsAt) ",
                "return maxEthPerAddress;",
                "uint timeSinceStart = block.timestamp.sub(startsAt);",
                "uint currentPeriod = timeSinceStart.div(TIME_PERIOD_IN_SEC).add(1);",
                "if (currentPeriod < 2) {",
                "return 5000 * 10**token.decimals();",
                "}",
                "if (currentPeriod > 2 && currentPeriod < 5) {",
                "return 1000 * 10**token.decimals();",
                "}",
                "if (currentPeriod > 4 && currentPeriod < 6) {",
                "return 500 * 10**token.decimals();",
                "}",
                "if (currentPeriod > 5 && currentPeriod < 9) {",
                "return 200 * 10**token.decimals();",
                "}",
                "if (currentPeriod > 8 && currentPeriod < 11) {",
                "return 100 * 10**token.decimals();",
                "}",
                "return maxEthPerAddress;"
            ],
            "vulnerabilityReason": "The function relies on block.timestamp to determine the crowdsale period and caps, making it susceptible to miner manipulation. Miners could set the timestamp to affect the maximum token allocation per transaction, since they control the time reported in blocks they mine.",
            "potentialSecurityRisk": "If a miner manipulates the timestamp to extend the period, they could enable larger allocations than intended, leading to unfair advantages in token distribution. Alternatively, they could reduce the token cap, affecting investor confidence and potentially leading to financial loss.",
            "fixedCode": "function getCurrentFgcCap() public constant returns (uint) { require(block.timestamp >= startsAt + TIME_TOLERANCE, 'Crowdsale has not started yet.'); // Adding a time tolerance if (block.timestamp < startsAt) return maxEthPerAddress; /* ... logic unchanged ... */ }"
        },
        {
            "vulnerableLines": "585-586",
            "vulnerableCode": [
                "function isMinimumGoalReached() public constant returns (bool reached) {",
                "return weiRaised >= minimumFundingGoal;"
            ],
            "vulnerabilityReason": "This function does not directly use block.timestamp, but the minimum goal evaluation might rely on time frames. However, since it is a direct comparison against weiRaised and doesn't include time-based conditions, it is less vulnerable than others using time-dependent logic.",
            "potentialSecurityRisk": "While it does not use block.timestamp directly, the overall state of the contract (including goal achievement) could still be influenced indirectly by time manipulations elsewhere in the contract, affecting the funding state of the crowdsale.",
            "fixedCode": "function isMinimumGoalReached() public constant returns (bool reached) { return weiRaised >= minimumFundingGoal; // No change needed in this function as it does not reference block.timestamp."
        },
        {
            "vulnerableLines": "600-619",
            "vulnerableCode": [
                "function getState() public constant returns (State) {",
                "if (finalized) ",
                "return State.Finalized;",
                "else if (address(finalizeAgent) == 0) ",
                "return State.Preparing;",
                "else if (!finalizeAgent.isSane()) ",
                "return State.Preparing;",
                "else if (!pricingStrategy.isSane(address(this))) ",
                "return State.Preparing;",
                "else if (block.timestamp < startsAt) ",
                "return State.PreFunding;",
                "else if (block.timestamp <= endsAt && !isCrowdsaleFull()) ",
                "return State.Funding;",
                "else if (isMinimumGoalReached()) ",
                "return State.Success;",
                "else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) ",
                "return State.Refunding;",
                "else ",
                "return State.Failure;"
            ],
            "vulnerabilityReason": "This function heavily relies on block.timestamp to determine the crowdsale state, making it highly vulnerable to timestamp manipulation by miners. A miner can alter the state transitions by choosing favorable timestamps.",
            "potentialSecurityRisk": "Miners could manipulate the timestamp to force transitions into the Funding or PreFunding states, influencing the crowdsale's operation and fairness. This could lead to premature state changes that favor certain participants or disrupt normal operations.",
            "fixedCode": "function getState() public constant returns (State) { require(block.timestamp + TIME_TOLERANCE >= startsAt, 'Crowdsale not started yet.'); if (finalized) return State.Finalized; /* ... continue unchanged logic ... */}"
        }
    ]
}