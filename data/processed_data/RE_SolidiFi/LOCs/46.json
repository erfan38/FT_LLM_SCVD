[
    {
        "vulnerableLines": "15-19",
        "vulnerabilityReason": "The function uses send to transfer ether before resetting the user's balance to zero, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly call withdrawUserBalances before their balance is set to zero, effectively draining the contract's funds.",
        "fixedCode": "function withdrawUserBalances() public { uint amount = userBalances[msg.sender]; userBalances[msg.sender] = 0; if (!msg.sender.send(amount)) { userBalances[msg.sender] = amount; revert(); } }",
        "vulnerableCode": [
            "}mapping(address => uint) userBalances;",
            "    function withdrawUserBalances() public {",
            "       if (msg.sender.send(userBalances[msg.sender ]))",
            "          userBalances[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "41-48",
        "vulnerabilityReason": "The function sends ether before updating the callCount, allowing reentrancy.",
        "potentialSecurityRisk": "Repeated reentrant invocations could result in an attacker calling the function multiple times, bypassing the call limit and draining funds.",
        "fixedCode": "function callme() public { require(callCount <= 5); callCount += 1; if (!msg.sender.send(10 ether)) { callCount -= 1; revert(); } }",
        "vulnerableCode": [
            "uint256 callCount =0;",
            "function callme() public{",
            "        require(callCount<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        callCount += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "68-75",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance to zero, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this function multiple times before the user balance is set to zero, depleting the contract's ether balance.",
        "fixedCode": "function withdrawUserBalanceWithdrawable() public { uint amount = userBalanceWithdrawable[msg.sender]; userBalanceWithdrawable[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalanceWithdrawable[msg.sender] = amount; revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalanceWithdrawable;",
            "function withdrawUserBalanceWithdrawable() public{",
            "        (bool success,)=msg.sender.call.value(userBalanceWithdrawable[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalanceWithdrawable[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "86-93",
        "vulnerabilityReason": "The withdrawal of funds happens before resetting the user balance, making the function vulnerable to reentrant calls.",
        "potentialSecurityRisk": "An attacker can continuously call this function within a transaction, withdrawing more funds than they are entitled to.",
        "fixedCode": "function withdrawUserBalanceStorage() public { uint amount = userBalanceStorage[msg.sender]; userBalanceStorage[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalanceStorage[msg.sender] = amount; revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalanceStorage;",
            "function withdrawUserBalanceStorage() public{",
            "        (bool success,)= msg.sender.call.value(userBalanceStorage[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalanceStorage[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "101-108",
        "vulnerabilityReason": "The function sends ether before updating the isNotProcessed flag, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to continuously withdraw ether within a single transaction, draining the contract's funds.",
        "fixedCode": "function processStatus() public { require(isNotProcessed); isNotProcessed = false; if (!msg.sender.send(1 ether)) { isNotProcessed = true; revert(); } }",
        "vulnerableCode": [
            "bool isNotProcessed = true;",
            "function processStatus() public{",
            "        require(isNotProcessed);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        isNotProcessed = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "127-130",
        "vulnerabilityReason": "The function sends ether to the user before updating the balance, leading to potential reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could reenter the function to withdraw funds multiple times before their balance is updated.",
        "fixedCode": "function withdrawFundsAvailable(uint256 _weiToWithdraw) public { require(userBalanceAvailable[msg.sender] >= _weiToWithdraw); userBalanceAvailable[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "function withdrawFundsAvailable (uint256 _weiToWithdraw) public {",
            "        require(userBalanceAvailable[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        userBalanceAvailable[msg.sender] -= _weiToWithdraw;"
        ]
    },
    {
        "vulnerableLines": "148-156",
        "vulnerabilityReason": "The function sends ether to the user before updating the isAlreadyProcessed state variable, leading to potential reentrancy vulnerability.",
        "potentialSecurityRisk": "An attacker could reenter the function to withdraw funds multiple times before the state is updated.",
        "fixedCode": "function processStatusTwo() public { require(isAlreadyProcessed); isAlreadyProcessed = false; (bool success, ) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }",
        "vulnerableCode": [
            "bool isAlreadyProcessed = true;",
            "function processStatusTwo() public{",
            "        require(isAlreadyProcessed);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        isAlreadyProcessed = false;",
            "    }"
        ]
    }
]