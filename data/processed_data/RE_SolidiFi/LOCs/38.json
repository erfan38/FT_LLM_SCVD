[
    {
        "vulnerableLines": "48-56",
        "vulnerabilityReason": "The function claimReward_11 sends ether to the user before updating the redeemableEther_11 balance, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly withdraw their balance before it is updated.",
        "fixedCode": "function claimReward_11() public { require(redeemableEther_11[msg.sender] > 0); uint transferValue_11 = redeemableEther_11[msg.sender]; redeemableEther_11[msg.sender] = 0; msg.sender.transfer(transferValue_11); }",
        "vulnerableCode": [
            "contract ERC20Detailed is IERC20 {",
            "",
            "mapping(address => uint) redeemableEther_11;",
            "function claimReward_11() public {        ",
            "        require(redeemableEther_11[msg.sender] > 0);",
            "        uint transferValue_11 = redeemableEther_11[msg.sender];",
            "        msg.sender.transfer(transferValue_11);   ",
            "        redeemableEther_11[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "58-63",
        "vulnerabilityReason": "The function withdraw_balances_1 uses call.value to transfer ether to the user before updating the balance, making it susceptible to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly withdraw the balance before it is updated.",
        "fixedCode": "function withdraw_balances_1() public { uint256 amount = balances_1[msg.sender]; balances_1[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success, \"Transfer failed.\"); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_1;",
            "    function withdraw_balances_1 () public {",
            "       (bool success,) =msg.sender.call.value(balances_1[msg.sender ])(\"\");",
            "       if (success)",
            "          balances_1[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "64-72",
        "vulnerabilityReason": "The function userbalances_41 sends ether before updating the state variable callcount_41, which allows for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly call the function and drain the contract's funds.",
        "fixedCode": "function userbalances_41() public { require(callcount_41); callcount_41 = false; if (!(msg.sender.send(1 ether))) { revert(); } }",
        "vulnerableCode": [
            "  string private _symbol;",
            "bool callcount_41 = true;",
            "function userbalances_41() public{",
            "        require(callcount_41);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcount_41 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "80-86",
        "vulnerabilityReason": "The function withdrawBalance_19 uses send to transfer ether to the user before updating the userBalance_19 balance, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly withdraw their balance before it is updated.",
        "fixedCode": "function withdrawBalance_19() public { uint256 amount = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; require(msg.sender.send(amount), \"Transfer failed.\"); }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_19;",
            "function withdrawBalance_19() public{",
            "        if( ! (msg.sender.send(userBalance_19[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance_19[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "91-98",
        "vulnerabilityReason": "The function withdrawBalance_26 uses call.value to transfer ether to the user before updating the userBalance_26 balance, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly withdraw their balance before it is updated.",
        "fixedCode": "function withdrawBalance_26() public { uint256 amount = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(amount)(\"\"); require(success, \"Transfer failed.\"); }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_26;",
            "function withdrawBalance_26() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_26[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_26[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "The function userbalances_20 sends ether to the user before updating the callcount_20 variable, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly call the function and drain the contract's funds.",
        "fixedCode": "function userbalances_20() public { require(callcount_20); callcount_20 = false; if (!(msg.sender.send(1 ether))) { revert(); } }",
        "vulnerableCode": [
            "bool callcount_20 = true;",
            "function userbalances_20() public{",
            "        require(callcount_20);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcount_20 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "116-120",
        "vulnerabilityReason": "The function uses transfer to send ether before resetting the user's redeemable balance, allowing potential reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit the reentrancy to call this function multiple times, withdrawing more ether than they are allowed.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }",
        "vulnerableCode": [
            "function claimReward_32() public {        ",
            "        require(redeemableEther_32[msg.sender] > 0);",
            "        uint transferValue_32 = redeemableEther_32[msg.sender];",
            "        msg.sender.transfer(transferValue_32);   ",
            "        redeemableEther_32[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "127-134",
        "vulnerabilityReason": "The function uses send to transfer ether before incrementing the counter_42, enabling potential reentrancy.",
        "potentialSecurityRisk": "An attacker may repeatedly call this function before counter_42 is incremented, potentially draining contract funds.",
        "fixedCode": "function callcheck_42() public { require(counter_42 <= 5); counter_42 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_42 =0;",
            "function callcheck_42() public{",
            "        require(counter_42<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_42 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "136-142",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_2, allowing for reentrancy.",
        "potentialSecurityRisk": "A malicious contract could call this function repeatedly before lastPlayer_2 is updated, winning the jackpot multiple times.",
        "fixedCode": "function buyTicket_2() public { require(!(lastPlayer_2.send(jackpot_2))); lastPlayer_2 = msg.sender; jackpot_2 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_2;",
            "      uint jackpot_2;",
            "      function buyTicket_2() public{",
            "        if (!(lastPlayer_2.send(jackpot_2)))",
            "        revert();",
            "      lastPlayer_2 = msg.sender;",
            "      jackpot_2    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "146-152",
        "vulnerabilityReason": "The function uses call.value to send ether before updating balances_17, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, withdrawing more ether than they should before their balance is updated.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_17;",
            "function withdrawFunds_17 (uint256 _weiToWithdraw) public {",
            "        require(balances_17[msg.sender] >= _weiToWithdraw);",
            "        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances_17[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "154-160",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer_37, allowing for potential reentrancy.",
        "potentialSecurityRisk": "A malicious contract could call this function multiple times before lastPlayer_37 is updated, thus winning the jackpot beyond what is intended.",
        "fixedCode": "function buyTicket_37() public { require(!(lastPlayer_37.send(jackpot_37))); lastPlayer_37 = msg.sender; jackpot_37 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_37;",
            "      uint jackpot_37;",
            "      function buyTicket_37() public{",
            "        if (!(lastPlayer_37.send(jackpot_37)))",
            "        revert();",
            "      lastPlayer_37 = msg.sender;",
            "      jackpot_37    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "163-169",
        "vulnerabilityReason": "The function calls transfer before modifying the sender's balance, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this function repeatedly to withdraw more funds than their balance.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_3;",
            "function withdrawFunds_3 (uint256 _weiToWithdraw) public {",
            "        require(balances_3[msg.sender] >= _weiToWithdraw);",
            "    (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances_3[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "171-179",
        "vulnerabilityReason": "The function uses call.value to send jackpot funds before updating the lastPlayer_9, exposing the function to reentrancy.",
        "potentialSecurityRisk": "This allows attackers to repetitively call the function, obtaining more jackpot payouts than intended.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\"); require(success); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_9;",
            "      uint jackpot_9;",
            "      function buyTicket_9() public{",
            "        (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer_9 = msg.sender;",
            "      jackpot_9    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "181-186",
        "vulnerabilityReason": "The function transfers funds before resetting the redeemableEther_25 balance, which is unsafe.",
        "potentialSecurityRisk": "A reentrancy attack can be performed, allowing malicious actors to claim more ether by reentering the function.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_25;",
            "function claimReward_25() public {        ",
            "        require(redeemableEther_25[msg.sender] > 0);",
            "        uint transferValue_25 = redeemableEther_25[msg.sender];",
            "        msg.sender.transfer(transferValue_25);   ",
            "        redeemableEther_25[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "193-198",
        "vulnerabilityReason": "Funds are sent before updating the sender's balance, enabling reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can call this function multiple times before the balance update, allowing fund drains.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_38;",
            "function withdrawFunds_38 (uint256 _weiToWithdraw) public {",
            "        require(balances_38[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_38[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "203-209",
        "vulnerabilityReason": "The function exposes reentrancy risk by calling transfer before updating the redeemable balance.",
        "potentialSecurityRisk": "This might allow attackers to reclaim rewards multiple times, thus depleting the contract",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_4;",
            "function claimReward_4() public {        ",
            "        require(redeemableEther_4[msg.sender] > 0);",
            "        uint transferValue_4 = redeemableEther_4[msg.sender];",
            "        msg.sender.transfer(transferValue_4);   ",
            "        redeemableEther_4[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "214-221",
        "vulnerabilityReason": "The function sends funds using sendmsg.sender..send( before updating the counter, permitting reentrant attacks.",
        "potentialSecurityRisk": "An attacker can exhaust contract funds by repeatedly calling this function if the counter is not updated first.",
        "fixedCode": "function callcheck_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_7 =0;",
            "function callcheck_7() public{",
            "        require(counter_7<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_7 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "226-232",
        "vulnerabilityReason": "The function utilizes send to transfer the jackpot amount before updating lastPlayer_23, introducing a reentrancy risk.",
        "potentialSecurityRisk": "There is potential for an attacker to claim multiple jackpot winnings by reentrant calls before lastPlayer_23 is updated.",
        "fixedCode": "function buyTicket_23() public { require(!(lastPlayer_23.send(jackpot_23))); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_23;",
            "      uint jackpot_23;",
            "      function buyTicket_23() public{",
            "        if (!(lastPlayer_23.send(jackpot_23)))",
            "        revert();",
            "      lastPlayer_23 = msg.sender;",
            "      jackpot_23    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "240-247",
        "vulnerabilityReason": "The function sends ether using send before updating the counter_14 variable, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling the function before the counter is updated, causing a drain of funds.",
        "fixedCode": "function callcheck_14() public { require(counter_14 <= 5); counter_14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_14 =0;",
            "function callcheck_14() public{",
            "        require(counter_14<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_14 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "265-272",
        "vulnerabilityReason": "The function sends ether to the lastPlayer_30 before updating the state variables, which introduces a reentrancy vulnerability.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the jackpot before state variables are correctly updated.",
        "fixedCode": "function buyTicket_30() public { require(lastPlayer_30.send(jackpot_30)); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_30;",
            "      uint jackpot_30;",
            "      function buyTicket_30() public{",
            "        if (!(lastPlayer_30.send(jackpot_30)))",
            "        revert();",
            "      lastPlayer_30 = msg.sender;",
            "      jackpot_30    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "279-284",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker might repeatedly call this function, withdrawing funds multiple times before the balance updates.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) balances_8[msg.sender] = 0; }",
        "vulnerableCode": [
            "mapping(address => uint) balances_8;",
            "    function withdraw_balances_8 () public {",
            "       (bool success,) = msg.sender.call.value(balances_8[msg.sender ])(\"\");",
            "       if (success)",
            "          balances_8[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "292-298",
        "vulnerabilityReason": "The function transfers ether using transfer before zeroing out the balance, which introduces a reentrancy vulnerability.",
        "potentialSecurityRisk": "Reentrancy can be exploited to drain rewards multiple times, leading to significant loss of contract funds.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_39;",
            "function claimReward_39() public {        ",
            "        require(redeemableEther_39[msg.sender] > 0);",
            "        uint transferValue_39 = redeemableEther_39[msg.sender];",
            "        msg.sender.transfer(transferValue_39);   ",
            "        redeemableEther_39[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "320-324",
        "vulnerabilityReason": "The function uses send before updating the balances, allowing potential reentrancy scenarios.",
        "potentialSecurityRisk": "Reentrancy could be exploited to withdraw funds multiple times before the balance is cleared, leading to loss of funds.",
        "fixedCode": "function withdraw_balances_36() public { uint256 balance = balances_36[msg.sender]; if (msg.sender.send(balance)) balances_36[msg.sender] = 0; }",
        "vulnerableCode": [
            "mapping(address => uint) balances_36;",
            "    function withdraw_balances_36 () public {",
            "       if (msg.sender.send(balances_36[msg.sender ]))",
            "          balances_36[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "332-339",
        "vulnerabilityReason": "The function sends ether using send before updating the counter_35 variable, which may allow reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling the function before the counter is updated, causing a drain of funds.",
        "fixedCode": "function callcheck_35() public { require(counter_35 <= 5); counter_35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_35 =0;",
            "function callcheck_35() public{",
            "        require(counter_35<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_35 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "347-354",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user's balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker might repeatedly call this function, withdrawing funds multiple times before the balance updates.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance_40[msg.sender] = 0; }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_40;",
            "function withdrawBalance_40() public{",
            "        (bool success,)=msg.sender.call.value(userBalance_40[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_40[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "361-368",
        "vulnerabilityReason": "The function uses call.value to transfer funds before resetting the user balance, making it vulnerable to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function during the transfer, draining the user's balance before it gets updated.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) userBalance_33[msg.sender] = 0; }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_33;",
            "function withdrawBalance_33() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_33[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_33[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "373-380",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the callcount_27 flag, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker can exploit the function by calling it multiple times before the state variable is updated, draining the contract's funds.",
        "fixedCode": "function userbalances_27() public { require(callcount_27); callcount_27 = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "bool callcount_27 = true;",
            "function userbalances_27() public{",
            "        require(callcount_27);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcount_27 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "389-394",
        "vulnerabilityReason": "Funds are sent before updating the balance, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "Exploiters could repeatedly call the function to drain funds, causing financial loss.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_31;",
            "function withdrawFunds_31 (uint256 _weiToWithdraw) public {",
            "        require(balances_31[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_31[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "401-409",
        "vulnerabilityReason": "The function sends ether before updating the callcount_13 flag, making it susceptible to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could drain funds by repeatedly invoking the function before the state variable is updated.",
        "fixedCode": "function userbalances_13() public { require(callcount_13); callcount_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "bool callcount_13 = true;",
            "function userbalances_13() public{",
            "        require(callcount_13);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        callcount_13 = false;",
            "    }"
        ]
    }
]