[
    {
        "vulnerableLines": "7-12",
        "vulnerabilityReason": "The function uses call.value() to transfer funds to the last player before updating the state variables, exposing it to reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain the jackpot by re-entering before the lastPlayer and jackpot are updated.",
        "fixedCode": "function buyTicket_9() public { address payable lastPlayer = lastPlayer_9; uint jackpot = jackpot_9; (bool success,) = lastPlayer.call.value(jackpot)(\"\"); if (!success) revert(); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }",
        "vulnerableCode": [
            "      function buyTicket_9() public{",
            "        (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer_9 = msg.sender;",
            "      jackpot_9    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "29-34",
        "vulnerabilityReason": "The function uses transfer to send funds before resetting the redeemableEther balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain more ether than their actual balance, depleting the contract's funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_25;",
            "function claimReward_25() public {        ",
            "        require(redeemableEther_25[msg.sender] > 0);",
            "        uint transferValue_25 = redeemableEther_25[msg.sender];",
            "        msg.sender.transfer(transferValue_25);   ",
            "        redeemableEther_25[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "45-50",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user balance, making it susceptible to reentrant attacks.",
        "potentialSecurityRisk": "An attacker can call this function reentrantly to withdraw more funds than their actual balance, compromising the contract's security.",
        "fixedCode": "function withdrawBalance_19() public { uint balance = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }",
        "vulnerableCode": [
            "function withdrawBalance_19() public{",
            "        if( ! (msg.sender.send(userBalance_19[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance_19[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "53-57",
        "vulnerabilityReason": "The function uses send to transfer funds before resetting the user balance, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "Attackers may exploit this function to withdraw more ether than their balance by making reentrant calls.",
        "fixedCode": "function withdraw_balances_36() public { uint balance = balances_36[msg.sender]; balances_36[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) balances_36;",
            "    function withdraw_balances_36 () public {",
            "       if (msg.sender.send(balances_36[msg.sender ]))",
            "          balances_36[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "60-65",
        "vulnerabilityReason": "This function uses send to transfer ether before updating the counter, making the function prone to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit the function to bypass the counter limit, extracting more ether than permitted.",
        "fixedCode": "function checking_35() public { require(counter_35 <= 5); counter_35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "function checking_35() public{",
            "        require(counter_35<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_35 += 1;"
        ]
    },
    {
        "vulnerableLines": "68-75",
        "vulnerabilityReason": "The function calls transfer to send funds before resetting the user balance, which can lead to a reentrant vulnerability.",
        "potentialSecurityRisk": "Attackers may repeatedly invoke this method, draining more ether than their balance and depleting contract funds.",
        "fixedCode": "function withdrawBalance_40() public { uint balance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_40;",
            "function withdrawBalance_40() public{",
            "        (bool success,)=msg.sender.call.value(userBalance_40[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_40[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "77-84",
        "vulnerabilityReason": "Using call.value to transfer funds before decreasing the balance leaves room for reentrancy attacks.",
        "potentialSecurityRisk": "Reentrancy may allow an attacker to call this function multiple times and deplete the contract's fund.",
        "fixedCode": "function withdrawBalance_33() public { uint balance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_33;",
            "function withdrawBalance_33() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_33[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_33[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "86-92",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the callcount_27 flag, enabling reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw ether by exploiting this reentrant vulnerability, depleting the contract's funds.",
        "fixedCode": "function userbalances_27() public { require(callcount_27); callcount_27 = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "bool callcount_27 = true;",
            "function userbalances_27() public{",
            "        require(callcount_27);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcount_27 = false;"
        ]
    },
    {
        "vulnerableLines": "95-100",
        "vulnerabilityReason": "The send operation occurs before the balance deduction, making it prone to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Reentrancy could allow an attacker to withdraw more ether than their balance, jeopardizing the contract's remaining funds.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; if (!msg.sender.send(_weiToWithdraw)) { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) balances_31;",
            "function withdrawFunds_31 (uint256 _weiToWithdraw) public {",
            "        require(balances_31[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_31[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "103-110",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the callcount_13 flag, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter this function multiple times to exploit the contract and receive more ether than permitted.",
        "fixedCode": "function userbalances_13() public { require(callcount_13); callcount_13 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "function userbalances_13() public{",
            "        require(callcount_13);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        callcount_13 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "117-123",
        "vulnerabilityReason": "The function uses call.value to transfer ether before resetting the user balance allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call withdrawBalance_26 before the balance is updated, draining the contract's funds.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success, ) = msg.sender.call.value(balance)(\"\"); if (!success) revert(); }",
        "vulnerableCode": [
            "function withdrawBalance_26() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_26[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_26[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "128-135",
        "vulnerabilityReason": "The function sends ether to msg.sender before updating the callcount_20 variable, leading to reentrancy possibilities.",
        "potentialSecurityRisk": "An attacker could call userbalances_20 multiple times before callcount_20 is updated, allowing them to withdraw more ether than allowed.",
        "fixedCode": "function userbalances_20() public { require(callcount_20); callcount_20 = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "bool callcount_20 = true;",
            "function userbalances_20() public{",
            "        require(callcount_20);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcount_20 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "148-154",
        "vulnerabilityReason": "The function uses transfer to send ether before updating redeemableEther_32, which opens up the potential for reentrancy.",
        "potentialSecurityRisk": "Attackers could call claimReward_32 repeatedly before the redeemableEther_32 balance is zeroed out, draining the contract.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_32;",
            "function claimReward_32() public {        ",
            "        require(redeemableEther_32[msg.sender] > 0);",
            "        uint transferValue_32 = redeemableEther_32[msg.sender];",
            "        msg.sender.transfer(transferValue_32);   ",
            "        redeemableEther_32[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "170-175",
        "vulnerabilityReason": "Funds are transferred to msg.sender before updating the user's balance which leads to a potential reentrancy attack.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw more funds than their balance by invoking the function multiple times.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_38;",
            "function withdrawFunds_38 (uint256 _weiToWithdraw) public {",
            "        require(balances_38[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_38[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "209-215",
        "vulnerabilityReason": "The function uses transfer to send ether before setting redeemableEther_4 to zero, opening up potential reentrancy.",
        "potentialSecurityRisk": "Attackers could repeatedly call claimReward_4, exploiting the function to drain the contract of funds.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_4;",
            "function claimReward_4() public {        ",
            "        require(redeemableEther_4[msg.sender] > 0);",
            "        uint transferValue_4 = redeemableEther_4[msg.sender];",
            "        msg.sender.transfer(transferValue_4);   ",
            "        redeemableEther_4[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "217-242",
        "vulnerabilityReason": "Using transfer inside a loop before modifying state variables, this can lead to potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can call givePrizeMoney multiple times before the contract state is updated, withdrawing more ether than allowed.",
        "fixedCode": "function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable { require(gameList[_fixtureId].open_status == 3); require(gameList[_fixtureId].isDone == false); require(betList[_fixtureId][0].player != address(0)); gameList[_fixtureId].open_status = 5; gameList[_fixtureId].isDone = true; for (uint i= 0 ; i < betList[_fixtureId].length; i++) { uint16 selectedTeam = betList[_fixtureId][i].selectedTeam; uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000; if ((selectedTeam == 1 && _homeDrawAway == 1) || (selectedTeam == 2 && _homeDrawAway == 2) || (selectedTeam == 3 && _homeDrawAway == 3) || (selectedTeam == 4 && _overUnder == 1) || (selectedTeam == 5 && _overUnder == 2) || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2)) || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3)) || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2))) { betList[_fixtureId][i].player.transfer(returnEth); } } emit GivePrizeMoney(_fixtureId, _homeDrawAway, _overUnder); }",
        "vulnerableCode": [
            "  function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {",
            "    require(gameList[_fixtureId].open_status == 3);",
            "    require(gameList[_fixtureId].isDone == false);",
            "    require(betList[_fixtureId][0].player != address(0) );",
            "",
            "    for (uint i= 0 ; i < betList[_fixtureId].length; i++){",
            "      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;",
            "      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;",
            "      if ( (selectedTeam == 1 && _homeDrawAway == 1) ",
            "        || (selectedTeam == 2 && _homeDrawAway == 2) ",
            "        || (selectedTeam == 3 && _homeDrawAway == 3) ",
            "        || (selectedTeam == 4 && _overUnder == 1) ",
            "        || (selectedTeam == 5 && _overUnder == 2) ",
            "        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )",
            "        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )",
            "        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) ",
            "        ){ ",
            "        betList[_fixtureId][i].player.transfer(returnEth);",
            "      }",
            "    }",
            "",
            "    gameList[_fixtureId].open_status = 5;",
            "    gameList[_fixtureId].isDone = true; ",
            "",
            "    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);",
            "  }"
        ]
    },
    {
        "vulnerableLines": "244-250",
        "vulnerabilityReason": "The function sends ether before updating the counter_7, allowing possible reentrant calls to this function before the state is updated.",
        "potentialSecurityRisk": "An attacker could exploit this by invoking the function reentrantly, bypassing the counter limit and draining ether from the contract.",
        "fixedCode": "function checking_7() public { require(counter_7 <= 5); counter_7 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }",
        "vulnerableCode": [
            "function checking_7() public{",
            "        require(counter_7<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_7 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "260-266",
        "vulnerabilityReason": "The function sends ether before updating the lastPlayer_23 and jackpot_23, allowing for reentrancy exploitation.",
        "potentialSecurityRisk": "An attacker could reenter the function and repeatedly claim the jackpot, potentially draining the contract's ether balance.",
        "fixedCode": "function buyTicket_23() public { require(!(lastPlayer_23.send(jackpot_23))); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_23;",
            "      uint jackpot_23;",
            "      function buyTicket_23() public{",
            "        if (!(lastPlayer_23.send(jackpot_23)))",
            "        revert();",
            "      lastPlayer_23 = msg.sender;",
            "      jackpot_23    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "272-279",
        "vulnerabilityReason": "The function performs send operation before updating the counter_14, allowing reentrant calls before the state is finalized.",
        "potentialSecurityRisk": "An attacker could make repeated calls to the function, continuing to withdraw ether beyond the allowed limit.",
        "fixedCode": "function checking_14() public { require(counter_14 <= 5); counter_14 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_14 =0;",
            "function checking_14() public{",
            "        require(counter_14<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_14 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "284-290",
        "vulnerabilityReason": "The function sends ether before updating state variables lastPlayer_30 and jackpot_30, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this gap to repeatedly claim the jackpot, draining the contract of its funds.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_30;",
            "      uint jackpot_30;",
            "      function buyTicket_30() public{",
            "        if (!(lastPlayer_30.send(jackpot_30)))",
            "        revert();",
            "      lastPlayer_30 = msg.sender;",
            "      jackpot_30    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "296-301",
        "vulnerabilityReason": "The function uses call.value to send ether before updating the user's balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could continuously call this function to drain the contract's funds before the user\u2019s balance is updated.",
        "fixedCode": "function withdraw_balances_8() public { uint balance = balances_8[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { balances_8[msg.sender] = 0; } }",
        "vulnerableCode": [
            "mapping(address => uint) balances_8;",
            "    function withdraw_balances_8 () public {",
            "       (bool success,) = msg.sender.call.value(balances_8[msg.sender ])(\"\");",
            "       if (success)",
            "          balances_8[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "308-314",
        "vulnerabilityReason": "The function sends ether before setting the redeemableEther_39 to zero, allowing reentrant calls.",
        "potentialSecurityRisk": "An attacker might exploit the function to repeatedly withdraw rewards, potentially depleting the contract's ether balance.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_39;",
            "function claimReward_39() public {        ",
            "        require(redeemableEther_39[msg.sender] > 0);",
            "        uint transferValue_39 = redeemableEther_39[msg.sender];",
            "        msg.sender.transfer(transferValue_39);   ",
            "        redeemableEther_39[msg.sender] = 0;",
            "    }"
        ]
    }
]