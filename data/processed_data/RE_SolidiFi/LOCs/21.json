[
    {
        "vulnerableLines": "5-12",
        "vulnerabilityReason": "The function sends ether before updating the balance_checking_20 variable, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the state variable is updated, thereby draining the contract's funds.",
        "fixedCode": "function update_20() public{ require(balance_checking_20); balance_checking_20 = false; if( ! (msg.sender.send(1 ether) ) ){ revert(); } }",
        "vulnerableCode": [
            "bool balance_checking_20 = true;",
            "function update_20() public{",
            "        require(balance_checking_20);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        balance_checking_20 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "14-20",
        "vulnerabilityReason": "The function transfers ether before updating the internal state, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can reenter the function and deplete the contract's funds before the state is updated.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_32;",
            "function claimReward_32() public {        ",
            "        require(redeemableEther_32[msg.sender] > 0);",
            "        uint transferValue_32 = redeemableEther_32[msg.sender];",
            "        msg.sender.transfer(transferValue_32);   ",
            "        redeemableEther_32[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "22-27",
        "vulnerabilityReason": "Sending ether before deducting from balances exposes this function to reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to drain contract funds by calling repeatedly before the balance is deducted.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_38;",
            "function withdrawFunds_38 (uint256 _weiToWithdraw) public {",
            "        require(balances_38[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_38[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "29-35",
        "vulnerabilityReason": "The function transfers ether to the user before updating their internal balance, creating reentrancy risk.",
        "potentialSecurityRisk": "Attackers could call this function reentrantly to drain the contract of funds.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_4;",
            "function claimReward_4() public {        ",
            "        require(redeemableEther_4[msg.sender] > 0);",
            "        uint transferValue_4 = redeemableEther_4[msg.sender];",
            "        msg.sender.transfer(transferValue_4);   ",
            "        redeemableEther_4[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "72-80",
        "vulnerabilityReason": "The function sends ether before setting the balance_checking_13 flag to false, enabling reentrancy.",
        "potentialSecurityRisk": "An attacker may reenter the function and withdraw more ether before the flag is updated.",
        "fixedCode": "function update_13() public { require(balance_checking_13); balance_checking_13 = false; (bool success,)=msg.sender.call.value(1 ether)(''); if( ! success ){ revert(); } }",
        "vulnerableCode": [
            "  bool balance_checking_13 = true;",
            "function update_13() public{",
            "        require(balance_checking_13);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        balance_checking_13 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "83-90",
        "vulnerabilityReason": "The function sends ether before changing the balance_checking_41 flag, which allows reentrancy.",
        "potentialSecurityRisk": "Attackers could call the function reentrantly to withdraw more funds than intended.",
        "fixedCode": "function update_41() public { require(balance_checking_41); balance_checking_41 = false; if( ! (msg.sender.send(1 ether) ) ){ revert(); } }",
        "vulnerableCode": [
            "  bool balance_checking_41 = true;",
            "function update_41() public{",
            "        require(balance_checking_41);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        balance_checking_41 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "93-100",
        "vulnerabilityReason": "Funds are sent to the user before the counter is updated, potentially allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can call the function again before the counter increases, allowing continual ether withdrawals.",
        "fixedCode": "function checking_42() public { require(counter_42<=5); counter_42 += 1; if( ! (msg.sender.send(10 ether) ) ){ revert(); } }",
        "vulnerableCode": [
            "  uint256 counter_42 =0;",
            "function checking_42() public{",
            "        require(counter_42<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_42 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "113-119",
        "vulnerabilityReason": "Ether is transferred before deducting the amount from the user's balance, making the function vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker may call the function again before their balance is updated, withdrawing more funds than allowed.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success,)=msg.sender.call.value(_weiToWithdraw)(''); require(success); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances_17;",
            "function withdrawFunds_17 (uint256 _weiToWithdraw) public {",
            "        require(balances_17[msg.sender] >= _weiToWithdraw);",
            "        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances_17[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "149-156",
        "vulnerabilityReason": "Sending ether before the counter is updated can lead to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers might call this function repeatedly before the counter update, potentially draining the contract.",
        "fixedCode": "function checking_7() public { require(counter_7<=5); counter_7 += 1; if( ! (msg.sender.send(10 ether) ) ){ revert(); } }",
        "vulnerableCode": [
            "uint256 counter_7 =0;",
            "function checking_7() public{",
            "        require(counter_7<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_7 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "169-175",
        "vulnerabilityReason": "Funds are transferred out before the user's balance is deducted, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker might call the function repeatedly before the balance update, exploiting the contract for more funds.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success,)=msg.sender.call.value(_weiToWithdraw)(''); require(success); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances_3;",
            "function withdrawFunds_3 (uint256 _weiToWithdraw) public {",
            "        require(balances_3[msg.sender] >= _weiToWithdraw);",
            "    (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances_3[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "178-185",
        "vulnerabilityReason": "Ether is transferred to the last player before updating the state, allowing for reentry.",
        "potentialSecurityRisk": "An attacker might reenter the function to claim more prizes than allowed.",
        "fixedCode": "function buyTicket_9() public { (bool success,) = lastPlayer_9.call.value(jackpot_9)(''); if (!success) revert(); lastPlayer_9 = msg.sender; jackpot_9 = address(this).balance; }",
        "vulnerableCode": [
            "  address payable lastPlayer_9;",
            "      uint jackpot_9;",
            "      function buyTicket_9() public{",
            "        (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer_9 = msg.sender;",
            "      jackpot_9    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "190-195",
        "vulnerabilityReason": "The function sends ether before updating the user's redeemable balance, posing a reentry risk.",
        "potentialSecurityRisk": "The contract's funds could be drained by an attacker calling the function repeatedly.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }",
        "vulnerableCode": [
            "function claimReward_25() public {        ",
            "        require(redeemableEther_25[msg.sender] > 0);",
            "        uint transferValue_25 = redeemableEther_25[msg.sender];",
            "        msg.sender.transfer(transferValue_25);   ",
            "        redeemableEther_25[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "198-204",
        "vulnerabilityReason": "Funds are transferred before updating the user's balance, making the contract susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to gain unauthorized access to the contract's funds.",
        "fixedCode": "function withdrawBalance_19() public { uint256 balance = userBalance_19[msg.sender]; if( ! (msg.sender.send(balance) ) ){ revert(); } userBalance_19[msg.sender] = 0; }",
        "vulnerableCode": [
            "   mapping(address => uint) userBalance_19;",
            "function withdrawBalance_19() public{",
            "        if( ! (msg.sender.send(userBalance_19[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance_19[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "208-214",
        "vulnerabilityReason": "This function sends ether before updating the balance, allowing reentry attacks.",
        "potentialSecurityRisk": "Attackers could drain more ether from the contract than they are entitled to by reentering the function.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,)=msg.sender.call.value(balance)(''); if( ! success ){ revert(); } }",
        "vulnerableCode": [
            "function withdrawBalance_26() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_26[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_26[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "227-233",
        "vulnerabilityReason": "Ether is transferred out before updating the last player's state, enabling reentrancy.",
        "potentialSecurityRisk": "This could allow an attacker to claim more than just one prize, depleting contract funds.",
        "fixedCode": "function buyTicket_23() public { require(!(lastPlayer_23.send(jackpot_23))); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_23;",
            "      uint jackpot_23;",
            "      function buyTicket_23() public{",
            "        if (!(lastPlayer_23.send(jackpot_23)))",
            "        revert();",
            "      lastPlayer_23 = msg.sender;",
            "      jackpot_23    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "244-250",
        "vulnerabilityReason": "Ether is transferred before updating the counter, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could call the function multiple times before the counter is updated, withdrawing multiple amounts.",
        "fixedCode": "function checking_14() public { require(counter_14<=5); counter_14 += 1; if( ! (msg.sender.send(10 ether) ) ){ revert(); } }",
        "vulnerableCode": [
            "function checking_14() public{",
            "        require(counter_14<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_14 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "258-264",
        "vulnerabilityReason": "Ether is sent before updating the state, providing a window for reentrant calls.",
        "potentialSecurityRisk": "Reentrancy attacks could drain contract funds if the function is called repeatedly before state update.",
        "fixedCode": "function buyTicket_30() public { require(!(lastPlayer_30.send(jackpot_30))); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_30;",
            "      uint jackpot_30;",
            "      function buyTicket_30() public{",
            "        if (!(lastPlayer_30.send(jackpot_30)))",
            "        revert();",
            "      lastPlayer_30 = msg.sender;",
            "      jackpot_30    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "277-282",
        "vulnerabilityReason": "The function uses call.value to send funds before interior state is updated, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker may repeatedly call the function before the balance is updated, draining funds.",
        "fixedCode": "function withdraw_balances_8() public { uint256 balance = balances_8[msg.sender]; (bool success,)= msg.sender.call.value(balance)(''); if (success) balances_8[msg.sender] = 0; }",
        "vulnerableCode": [
            "mapping(address => uint) balances_8;",
            "    function withdraw_balances_8 () public {",
            "       (bool success,) = msg.sender.call.value(balances_8[msg.sender ])(\"\");",
            "       if (success)",
            "          balances_8[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "287-293",
        "vulnerabilityReason": "The function transfers ether before updating the user's balance, enabling reentrancy.",
        "potentialSecurityRisk": "The contract could be exploited by reentrant calls, allowing attackers to withdraw more funds.",
        "fixedCode": "function withdraw(uint8 type_, address tokenaddr, uint256 amount) dexstatuscheck public returns (bool) { require(type_ == 0 || type_ == 1); if(type_==0){ require(tokenaddr == address(0)); require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount); require(amount <= address(this).balance); userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount); feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]); msg.sender.transfer(amount.sub(withdrawfee[address(0)])); } else { require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true); require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount); userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount); feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]); Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr]))); } emit DepositandWithdraw( msg.sender, tokenaddr, amount, 1); return true; }",
        "vulnerableCode": [
            "         require(tokenaddr == address(0));",
            "         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);",
            "         require(amount<=address(this).balance);",
            "                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    ",
            "                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);",
            "                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);",
            "                "
        ]
    },
    {
        "vulnerableLines": "305-311",
        "vulnerabilityReason": "Ether is transferred before updating the user's redeemable balance, leaving it open to reentry.",
        "potentialSecurityRisk": "Repeated calls before state update could deplete contract funds through reentrancy.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_39;",
            "function claimReward_39() public {        ",
            "        require(redeemableEther_39[msg.sender] > 0);",
            "        uint transferValue_39 = redeemableEther_39[msg.sender];",
            "        msg.sender.transfer(transferValue_39);   ",
            "        redeemableEther_39[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "485-491",
        "vulnerabilityReason": "This function transfers funds before the user's balance is updated, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker might repeatedly reenter, drawing more funds than allowed by the contract.",
        "fixedCode": "function withdrawBalance_40() public { uint256 balance = userBalance_40[msg.sender]; (bool success,)=msg.sender.call.value(balance)(''); if( ! success ){ revert(); } userBalance_40[msg.sender] = 0; }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_40;",
            "function withdrawBalance_40() public{",
            "        (bool success,)=msg.sender.call.value(userBalance_40[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_40[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "507-512",
        "vulnerabilityReason": "This function sends ether before updating the user's balance, creating a reentrant vulnerability.",
        "potentialSecurityRisk": "An attacker may deplete the contract's funds by calling it repeatedly before the balance is updated.",
        "fixedCode": "function withdrawBalance_33() public { uint256 balance = userBalance_33[msg.sender]; (bool success,)= msg.sender.call.value(balance)(''); if( ! success ){ revert(); } userBalance_33[msg.sender] = 0; }",
        "vulnerableCode": [
            "function withdrawBalance_33() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_33[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_33[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "519-526",
        "vulnerabilityReason": "The function sends ether before setting the flag, enabling reentrancy.",
        "potentialSecurityRisk": "Reentrant calls could drain contract funds by exploiting the delay in state update.",
        "fixedCode": "function update_27() public { require(balance_checking_27); balance_checking_27 = false; if( ! (msg.sender.send(1 ether) ) ){ revert(); } }",
        "vulnerableCode": [
            "bool balance_checking_27 = true;",
            "function update_27() public{",
            "        require(balance_checking_27);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        balance_checking_27 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "531-536",
        "vulnerabilityReason": "Funds are transferred out before the user's balance is deducted, allowing reentrancy.",
        "potentialSecurityRisk": "Repeated calls to the function before state update could drain contract funds.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_31;",
            "function withdrawFunds_31 (uint256 _weiToWithdraw) public {",
            "        require(balances_31[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_31[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    }
]