[
    {
        "vulnerableLines": "3-11",
        "vulnerabilityReason": "The function exampleFunction27 sends ether before updating the isFunctionNotCalled27 flag, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly call exampleFunction27, withdrawing more ether than intended.",
        "fixedCode": "function exampleFunction27() public { require(isFunctionNotCalled27); isFunctionNotCalled27 = false; if (!(msg.sender.send(1 ether))) { revert(); } }",
        "vulnerableCode": [
            "contract CareerOnToken {",
            "  bool isFunctionNotCalled27 = true;",
            "function exampleFunction27() public {",
            "        require(isFunctionNotCalled27);",
            "        if ( !(msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        isFunctionNotCalled27 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "13-18",
        "vulnerabilityReason": "The function withdrawFunds31 sends funds before updating the user balance, making it vulnerable to a reentrant attack.",
        "potentialSecurityRisk": "An attacker could exploit this reentrancy vulnerability to withdraw more ether than their balance allows.",
        "fixedCode": "function withdrawFunds31(uint256 _weiToWithdraw) public { require(balances31[msg.sender] >= _weiToWithdraw); balances31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances31;",
            "function withdrawFunds31 (uint256 _weiToWithdraw) public {",
            "        require(balances31[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances31[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "20-28",
        "vulnerabilityReason": "The function exampleFunction13 uses call.value to send ether before updating the isFunctionNotCalled13 flag, leading to reentrancy risks.",
        "potentialSecurityRisk": "Attackers can exploit this to call the function repeatedly, obtaining more ether than intended.",
        "fixedCode": "function exampleFunction13() public { require(isFunctionNotCalled13); isFunctionNotCalled13 = false; (bool success,) = msg.sender.call.value(1 ether)(''); if (!success) { revert(); } }",
        "vulnerableCode": [
            "  bool isFunctionNotCalled13 = true;",
            "function exampleFunction13() public {",
            "        require(isFunctionNotCalled13);",
            "        (bool success,) = msg.sender.call.value(1 ether)(\"\");",
            "        if ( ! success ){",
            "            revert();",
            "        }",
            "        isFunctionNotCalled13 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "31-39",
        "vulnerabilityReason": "The function buyTicket9 sends ether before updating the lastPlayer address, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract can repeatedly call this function, draining the contract's balance.",
        "fixedCode": "function buyTicket9() public { (bool success,) = lastPlayer9.call.value(jackpot9)(''); if (!success) { revert(); } lastPlayer9 = msg.sender; jackpot9 = address(this).balance; }",
        "vulnerableCode": [
            "  address payable lastPlayer9;",
            "      uint jackpot9;",
            "      function buyTicket9() public {",
            "        (bool success,) = lastPlayer9.call.value(jackpot9)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer9 = msg.sender;",
            "      jackpot9    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "41-47",
        "vulnerabilityReason": "The function claimReward25 transfers funds before resetting the user balance, which can be exploited through reentrancy.",
        "potentialSecurityRisk": "Attackers can repeatedly call this function to siphon more funds than intended.",
        "fixedCode": "function claimReward25() public { require(redeemableEther25[msg.sender] > 0); uint transferValue25 = redeemableEther25[msg.sender]; redeemableEther25[msg.sender] = 0; msg.sender.transfer(transferValue25); }",
        "vulnerableCode": [
            "  mapping(address => uint) redeemableEther25;",
            "function claimReward25() public {        ",
            "        require(redeemableEther25[msg.sender] > 0);",
            "        uint transferValue25 = redeemableEther25[msg.sender];",
            "        msg.sender.transfer(transferValue25);   ",
            "        redeemableEther25[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "49-55",
        "vulnerabilityReason": "The function withdrawBalance19 sends ether before resetting the user balance, enabling potential reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract might exploit this vulnerability to withdraw more funds than its balance.",
        "fixedCode": "function withdrawBalance19() public { uint256 balance = userBalance19[msg.sender]; if (!(msg.sender.send(balance))) { revert(); } userBalance19[msg.sender] = 0; }",
        "vulnerableCode": [
            "  mapping(address => uint) userBalance19;",
            "function withdrawBalance19() public {",
            "        if ( !(msg.sender.send(userBalance19[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance19[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "57-64",
        "vulnerabilityReason": "The function withdrawBalance26 uses call.value before updating the user balance, leading to reentrancy risks.",
        "potentialSecurityRisk": "Attackers can exploit this reentrancy vulnerability to continuously withdraw funds, draining the contract.",
        "fixedCode": "function withdrawBalance26() public { uint256 balance = userBalance26[msg.sender]; (bool success,) = msg.sender.call.value(balance)(''); if (!success) { revert(); } userBalance26[msg.sender] = 0; }",
        "vulnerableCode": [
            "  mapping(address => uint) userBalance26;",
            "function withdrawBalance26() public {",
            "        (bool success,) = msg.sender.call.value(userBalance26[msg.sender])(\"\");",
            "        if ( ! success ){",
            "            revert();",
            "        }",
            "        userBalance26[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "66-73",
        "vulnerabilityReason": "The function exampleFunction20 sends ether before updating the isFunctionNotCalled20 flag, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "A malicious contract could reenter this function multiple times, withdrawing excessive ether.",
        "fixedCode": "function exampleFunction20() public { require(isFunctionNotCalled20); isFunctionNotCalled20 = false; if (!(msg.sender.send(1 ether))) { revert(); } }",
        "vulnerableCode": [
            "  bool isFunctionNotCalled20 = true;",
            "function exampleFunction20() public {",
            "        require(isFunctionNotCalled20);",
            "        if ( !(msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        isFunctionNotCalled20 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "76-82",
        "vulnerabilityReason": "The function claimReward32 transfers funds before resetting the user's redeemable balance, permitting reentrancy.",
        "potentialSecurityRisk": "An attacker can repeatedly call this contract to drain ether from the contract by exploiting the reentrancy vulnerability.",
        "fixedCode": "function claimReward32() public { require(redeemableEther32[msg.sender] > 0); uint transferValue32 = redeemableEther32[msg.sender]; redeemableEther32[msg.sender] = 0; msg.sender.transfer(transferValue32); }",
        "vulnerableCode": [
            "  mapping(address => uint) redeemableEther32;",
            "function claimReward32() public {        ",
            "        require(redeemableEther32[msg.sender] > 0);",
            "        uint transferValue32 = redeemableEther32[msg.sender];",
            "        msg.sender.transfer(transferValue32);   ",
            "        redeemableEther32[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "84-89",
        "vulnerabilityReason": "The function withdrawFunds38 sends ether before updating the user balance, allowing for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could reenter this function multiple times to withdraw more ether than their balance.",
        "fixedCode": "function withdrawFunds38(uint256 _weiToWithdraw) public { require(balances38[msg.sender] >= _weiToWithdraw); balances38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances38;",
            "function withdrawFunds38 (uint256 _weiToWithdraw) public {",
            "        require(balances38[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances38[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "92-98",
        "vulnerabilityReason": "The function claimReward4 transfers funds before resetting the user's redeemable balance, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Attackers can exploit this reentrancy to deplete the contract's ether by calling the function repeatedly.",
        "fixedCode": "function claimReward4() public { require(redeemableEther4[msg.sender] > 0); uint transferValue4 = redeemableEther4[msg.sender]; redeemableEther4[msg.sender] = 0; msg.sender.transfer(transferValue4); }",
        "vulnerableCode": [
            "  mapping(address => uint) redeemableEther4;",
            "function claimReward4() public {        ",
            "        require(redeemableEther4[msg.sender] > 0);",
            "        uint transferValue4 = redeemableEther4[msg.sender];",
            "        msg.sender.transfer(transferValue4);   ",
            "        redeemableEther4[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "122-128",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling the function before the counter is updated, potentially draining the contract's ether.",
        "fixedCode": "function callme7() public { require(counter7 <= 5); counter7 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "function callme7() public {",
            "        require(counter7<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter7 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "150-157",
        "vulnerabilityReason": "The function calls send before updating the state variable, which can lead to a reentrancy attack.",
        "potentialSecurityRisk": "An attacker could repeatedly withdraw the jackpot before the state variables are updated, leading to a potential drain of funds.",
        "fixedCode": "function buyTicket23() public { if (!lastPlayer23.send(jackpot23)) revert(); lastPlayer23 = msg.sender; jackpot23 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer23;",
            "      uint jackpot23;",
            "      function buyTicket23() public {",
            "        if (!(lastPlayer23.send(jackpot23)))",
            "        revert();",
            "      lastPlayer23 = msg.sender;",
            "      jackpot23    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "182-189",
        "vulnerabilityReason": "Ether is sent using send before updating the counter, which can allow reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can call this function repeatedly before the counter is updated, enabling withdrawal of more ether than intended.",
        "fixedCode": "function callme14() public { require(counter14 <= 5); counter14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter14 =0;",
            "function callme14() public {",
            "        require(counter14<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter14 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "198-205",
        "vulnerabilityReason": "The function sends ether before updating the state, permitting potential reentrancy issues.",
        "potentialSecurityRisk": "An attacker can trigger this function multiple times before the jackpot and lastPlayer are updated, possibly draining contract funds.",
        "fixedCode": "function buyTicket30() public { if (!lastPlayer30.send(jackpot30)) revert(); lastPlayer30 = msg.sender; jackpot30 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer30;",
            "      uint jackpot30;",
            "      function buyTicket30() public {",
            "        if (!(lastPlayer30.send(jackpot30)))",
            "        revert();",
            "      lastPlayer30 = msg.sender;",
            "      jackpot30    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "213-218",
        "vulnerabilityReason": "The function uses call.value to send ether before updating the user's balance, leading to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before their balance is zeroed, thereby draining ether from the contract.",
        "fixedCode": "function withdraw_balances8() public { uint balance = balances8[msg.sender]; balances8[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { balances8[msg.sender] = balance; } }",
        "vulnerableCode": [
            "mapping(address => uint) balances8;",
            "    function withdraw_balances8 () public {",
            "       (bool success,) = msg.sender.call.value(balances8[msg.sender])(\"\");",
            "       if (success)",
            "          balances8[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "223-229",
        "vulnerabilityReason": "Using transfer to send ether before resetting the redeemable balance allows potential reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly claim rewards before the state is updated, thus draining funds from the contract.",
        "fixedCode": "function claimReward39() public { require(redeemableEther39[msg.sender] > 0); uint transferValue39 = redeemableEther39[msg.sender]; redeemableEther39[msg.sender] = 0; msg.sender.transfer(transferValue39); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther39;",
            "function claimReward39() public {        ",
            "        require(redeemableEther39[msg.sender] > 0);",
            "        uint transferValue39 = redeemableEther39[msg.sender];",
            "        msg.sender.transfer(transferValue39);   ",
            "        redeemableEther39[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "238-242",
        "vulnerabilityReason": "The function sends ether before resetting the user's balance, leading to reentrancy issues.",
        "potentialSecurityRisk": "Attackers might exploit this to call the function multiple times, withdrawing more ether than their balance allows.",
        "fixedCode": "function withdraw_balances36() public { uint balance = balances36[msg.sender]; balances36[msg.sender] = 0; if (!msg.sender.send(balance)) { balances36[msg.sender] = balance; } }",
        "vulnerableCode": [
            "mapping(address => uint) balances36;",
            "    function withdraw_balances36 () public {",
            "       if (msg.sender.send(balances36[msg.sender]))",
            "          balances36[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "248-255",
        "vulnerabilityReason": "The function callme35 uses send to transfer ether before updating the counter35, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the counter is incremented, potentially draining funds from the contract.",
        "fixedCode": "function callme35() public { require(counter35 <= 5); counter35 += 1; if (!(msg.sender.send(10 ether))) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter35 =0;",
            "function callme35() public {",
            "        require(counter35<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter35 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "262-269",
        "vulnerabilityReason": "The function withdrawBalance40 uses call.value to transfer funds before resetting the user's balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function during the fund transfer, allowing them to drain the contract funds before their balance is reset.",
        "fixedCode": "function withdrawBalance40() public { uint256 balance = userBalance40[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { userBalance40[msg.sender] = 0; } else { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance40;",
            "function withdrawBalance40() public {",
            "        (bool success,) = msg.sender.call.value(userBalance40[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance40[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "275-282",
        "vulnerabilityReason": "The function withdrawBalance33 uses call.value to transfer funds before resetting the user's balance, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this to reentrantly call the function multiple times and drain more funds than their actual balance.",
        "fixedCode": "function withdrawBalance33() public { uint256 balance = userBalance33[msg.sender]; (bool success,) = msg.sender.call.value(balance)(\"\"); if (success) { userBalance33[msg.sender] = 0; } else { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance33;",
            "function withdrawBalance33() public {",
            "        (bool success,) = msg.sender.call.value(userBalance33[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance33[msg.sender] = 0;",
            "    }"
        ]
    }
]