[
    {
        "vulnerableLines": "6-13",
        "vulnerabilityReason": "The function sends ether to the previous last player before updating the lastPlayer_2 address, allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly claim jackpot_2 before the lastPlayer_2 address is updated, draining the contract's funds.",
        "fixedCode": "function buyTicket_2() public { lastPlayer_2 = msg.sender; uint amount = jackpot_2; jackpot_2 = address(this).balance; if (!(lastPlayer_2.send(amount))) { revert(); } }",
        "vulnerableCode": [
            "  address payable lastPlayer_2;",
            "      uint jackpot_2;",
            "      function buyTicket_2() public{",
            "        if (!(lastPlayer_2.send(jackpot_2)))",
            "        revert();",
            "      lastPlayer_2 = msg.sender;",
            "      jackpot_2    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "16-22",
        "vulnerabilityReason": "The function uses call.value to transfer ether before the user's balance is deducted, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their balance allows, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds_17(uint256 _weiToWithdraw) public { require(balances_17[msg.sender] >= _weiToWithdraw); balances_17[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances_17;",
            "function withdrawFunds_17 (uint256 _weiToWithdraw) public {",
            "        require(balances_17[msg.sender] >= _weiToWithdraw);",
            "        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances_17[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "25-32",
        "vulnerabilityReason": "The function sends ether to the previous last player before updating the lastPlayer_37 address, allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly claim jackpot_37 before the lastPlayer_37 address is updated, draining the contract's funds.",
        "fixedCode": "function buyTicket_37() public { lastPlayer_37 = msg.sender; uint amount = jackpot_37; jackpot_37 = address(this).balance; if (!(lastPlayer_37.send(amount))) { revert(); } }",
        "vulnerableCode": [
            "  address payable lastPlayer_37;",
            "      uint jackpot_37;",
            "      function buyTicket_37() public{",
            "        if (!(lastPlayer_37.send(jackpot_37)))",
            "        revert();",
            "      lastPlayer_37 = msg.sender;",
            "      jackpot_37    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "35-41",
        "vulnerabilityReason": "The function uses call.value to transfer ether before the user's balance is deducted, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their balance allows, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds_3(uint256 _weiToWithdraw) public { require(balances_3[msg.sender] >= _weiToWithdraw); balances_3[msg.sender] -= _weiToWithdraw; (bool success, ) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances_3;",
            "function withdrawFunds_3 (uint256 _weiToWithdraw) public {",
            "        require(balances_3[msg.sender] >= _weiToWithdraw);",
            "    (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances_3[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "50-58",
        "vulnerabilityReason": "The function sends ether to the previous last player before updating the lastPlayer_9 address, allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly claim jackpot_9 before the lastPlayer_9 address is updated, draining the contract's funds.",
        "fixedCode": "function buyTicket_9() public { lastPlayer_9 = msg.sender; uint amount = jackpot_9; jackpot_9 = address(this).balance; (bool success, ) = lastPlayer_9.call.value(amount)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "  address payable lastPlayer_9;",
            "      uint jackpot_9;",
            "      function buyTicket_9() public{",
            "        (bool success,) = lastPlayer_9.call.value(jackpot_9)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer_9 = msg.sender;",
            "      jackpot_9    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "61-67",
        "vulnerabilityReason": "The function sends ether to the user before updating the redeemableEther_25 balance, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their redeemable balance allows, potentially draining the contract's funds.",
        "fixedCode": "function claimReward_25() public { require(redeemableEther_25[msg.sender] > 0); uint transferValue_25 = redeemableEther_25[msg.sender]; redeemableEther_25[msg.sender] = 0; msg.sender.transfer(transferValue_25); }",
        "vulnerableCode": [
            "  mapping(address => uint) redeemableEther_25;",
            "function claimReward_25() public {        ",
            "        require(redeemableEther_25[msg.sender] > 0);",
            "        uint transferValue_25 = redeemableEther_25[msg.sender];",
            "        msg.sender.transfer(transferValue_25);   ",
            "        redeemableEther_25[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "70-75",
        "vulnerabilityReason": "The function sends ether to the user before updating the balances_31 balance, which can be exploited for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw more funds than their balance allows, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds_31(uint256 _weiToWithdraw) public { require(balances_31[msg.sender] >= _weiToWithdraw); balances_31[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "  mapping(address => uint) balances_31;",
            "function withdrawFunds_31 (uint256 _weiToWithdraw) public {",
            "        require(balances_31[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_31[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "78-86",
        "vulnerabilityReason": "The function uses call.value to send ether to the user before updating the callcheck_13 flag, potentially allowing reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and repeatedly call this function, withdrawing more ether than allowed and draining the contract's funds.",
        "fixedCode": "function balances_13() public { require(callcheck_13); callcheck_13 = false; (bool success, ) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "  bool callcheck_13 = true;",
            "function balances_13() public{",
            "        require(callcheck_13);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        callcheck_13 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "103-109",
        "vulnerabilityReason": "The function sends ether to the user before resetting the userBalance_19 balance, allowing for reentrant attacks.",
        "potentialSecurityRisk": "An attacker could reenter the contract and withdraw multiple times before their balance is reset, potentially draining the contract's funds.",
        "fixedCode": "function withdrawBalance_19() public { uint balanceToSend = userBalance_19[msg.sender]; userBalance_19[msg.sender] = 0; if (!msg.sender.send(balanceToSend)) { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_19;",
            "function withdrawBalance_19() public{",
            "        if( ! (msg.sender.send(userBalance_19[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance_19[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "123-129",
        "vulnerabilityReason": "The function `withdrawBalance_26` uses `call.value` to send ether before resetting the user balance, exposing it to reentrant attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, allowing the contract to send ether multiple times before the user balance is set to zero, draining the contract.",
        "fixedCode": "function withdrawBalance_26() public { uint256 balance = userBalance_26[msg.sender]; userBalance_26[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "function withdrawBalance_26() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_26[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_26[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "137-144",
        "vulnerabilityReason": "The function `balances_20` sends ether to the user before updating the `callcheck_20` flag, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "Attackers can exploit this to call this function repeatedly before `callcheck_20` is set to false, allowing them to drain the contract's ether.",
        "fixedCode": "function balances_20() public { require(callcheck_20); callcheck_20 = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "bool callcheck_20 = true;",
            "function balances_20() public{",
            "        require(callcheck_20);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcheck_20 = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "150-156",
        "vulnerabilityReason": "In the function `claimReward_32`, ether is sent to the user before resetting the reward balance, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "A reentrant call could repeatedly invoke this function, allowing an attacker to drain the contract's funds before the reward balance is set to zero.",
        "fixedCode": "function claimReward_32() public { require(redeemableEther_32[msg.sender] > 0); uint transferValue_32 = redeemableEther_32[msg.sender]; redeemableEther_32[msg.sender] = 0; msg.sender.transfer(transferValue_32); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_32;",
            "function claimReward_32() public {        ",
            "        require(redeemableEther_32[msg.sender] > 0);",
            "        uint transferValue_32 = redeemableEther_32[msg.sender];",
            "        msg.sender.transfer(transferValue_32);   ",
            "        redeemableEther_32[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "164-169",
        "vulnerabilityReason": "The function `withdrawFunds_38` sends ether to the user before deducting the balance, which exposes it to reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function multiple times before the balance is updated, potentially draining all funds from the contract.",
        "fixedCode": "function withdrawFunds_38(uint256 _weiToWithdraw) public { require(balances_38[msg.sender] >= _weiToWithdraw); balances_38[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balances_38;",
            "function withdrawFunds_38 (uint256 _weiToWithdraw) public {",
            "        require(balances_38[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances_38[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "175-181",
        "vulnerabilityReason": "In the function `claimReward_4`, ether is transferred before reward balances are set to zero, allowing for reentrant calls.",
        "potentialSecurityRisk": "An exploiter could repeatedly call this function before the balance update, leading to multiple withdrawals and depleting the contract's ether balance.",
        "fixedCode": "function claimReward_4() public { require(redeemableEther_4[msg.sender] > 0); uint transferValue_4 = redeemableEther_4[msg.sender]; redeemableEther_4[msg.sender] = 0; msg.sender.transfer(transferValue_4); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_4;",
            "function claimReward_4() public {        ",
            "        require(redeemableEther_4[msg.sender] > 0);",
            "        uint transferValue_4 = redeemableEther_4[msg.sender];",
            "        msg.sender.transfer(transferValue_4);   ",
            "        redeemableEther_4[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "187-193",
        "vulnerabilityReason": "The function `checkcall_7` sends ether before updating the counter, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could rapidly call this function before the counter is incremented, bypassing the limit and draining ether from the contract.",
        "fixedCode": "function checkcall_7() public { require(counter_7 <= 5); counter_7 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_7 =0;",
            "function checkcall_7() public{",
            "        require(counter_7<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_7 += 1;"
        ]
    },
    {
        "vulnerableLines": "200-207",
        "vulnerabilityReason": "The function `buyTicket_23` sends ether to the last player before updating the last player address, allowing potential reentrancy.",
        "potentialSecurityRisk": "Reentrant attacks can exploit this function to repeatedly drain the jackpot before the last player address is updated.",
        "fixedCode": "function buyTicket_23() public { require(lastPlayer_23.send(jackpot_23)); lastPlayer_23 = msg.sender; jackpot_23 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_23;",
            "      uint jackpot_23;",
            "      function buyTicket_23() public{",
            "        if (!(lastPlayer_23.send(jackpot_23)))",
            "        revert();",
            "      lastPlayer_23 = msg.sender;",
            "      jackpot_23    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "214-221",
        "vulnerabilityReason": "The function `checkcall_14` sends ether before updating the counter, exposing it to reentrancy vulnerabilities.",
        "potentialSecurityRisk": "Attackers can call this function multiple times in a loop before the counter is updated, bypassing the limit and draining the contract's funds.",
        "fixedCode": "function checkcall_14() public { require(counter_14 <= 5); counter_14 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_14 =0;",
            "function checkcall_14() public{",
            "        require(counter_14<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_14 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "228-235",
        "vulnerabilityReason": "The function `buyTicket_30` sends ether to the last player before updating the last player address, allowing for reentrant attacks.",
        "potentialSecurityRisk": "A reentrant call can exploit this function to continuously withdraw the jackpot before the last player address is updated, draining the contract of ether.",
        "fixedCode": "function buyTicket_30() public { require(lastPlayer_30.send(jackpot_30)); lastPlayer_30 = msg.sender; jackpot_30 = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayer_30;",
            "      uint jackpot_30;",
            "      function buyTicket_30() public{",
            "        if (!(lastPlayer_30.send(jackpot_30)))",
            "        revert();",
            "      lastPlayer_30 = msg.sender;",
            "      jackpot_30    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "246-249",
        "vulnerabilityReason": "The function uses call.value to transfer funds before setting the user balance to zero, exposing it to reentrancy.",
        "potentialSecurityRisk": "An attacker can recursively call this function during the fund transfer, continuously withdrawing more funds than intended.",
        "fixedCode": "function withdraw_balances_8() public { uint256 userBalance = balances_8[msg.sender]; balances_8[msg.sender] = 0; (bool success,) = msg.sender.call.value(userBalance)(\"\"); if (!success) { balances_8[msg.sender] = userBalance; revert(); } }",
        "vulnerableCode": [
            "    function withdraw_balances_8 () public {",
            "       (bool success,) = msg.sender.call.value(balances_8[msg.sender ])(\"\");",
            "       if (success)",
            "          balances_8[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "256-261",
        "vulnerabilityReason": "The function transfers funds to the user before resetting the redeemable balance, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "A malicious actor could repeatedly call this function to withdraw more than their legitimate balance before it is reset.",
        "fixedCode": "function claimReward_39() public { require(redeemableEther_39[msg.sender] > 0); uint transferValue_39 = redeemableEther_39[msg.sender]; redeemableEther_39[msg.sender] = 0; msg.sender.transfer(transferValue_39); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther_39;",
            "function claimReward_39() public {        ",
            "        require(redeemableEther_39[msg.sender] > 0);",
            "        uint transferValue_39 = redeemableEther_39[msg.sender];",
            "        msg.sender.transfer(transferValue_39);   ",
            "        redeemableEther_39[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "268-271",
        "vulnerabilityReason": "The function sends funds to the user before resetting the user balance, which is critical for preventing reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this function to drain the contract by reentrantly invoking it multiple times before the balance is updated.",
        "fixedCode": "function withdraw_balances_36() public { uint256 userBalance = balances_36[msg.sender]; balances_36[msg.sender] = 0; if (!msg.sender.send(userBalance)) { balances_36[msg.sender] = userBalance; revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) balances_36;",
            "    function withdraw_balances_36 () public {",
            "       if (msg.sender.send(balances_36[msg.sender ]))",
            "          balances_36[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "283-290",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counter, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Repeated reentrant calls can occur before the counter is incremented, allowing an attacker to send themselves more ether than allowed.",
        "fixedCode": "function checkcall_35() public { require(counter_35 <= 5); counter_35 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counter_35 =0;",
            "function checkcall_35() public{",
            "        require(counter_35<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter_35 += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "310-316",
        "vulnerabilityReason": "This function uses call.value to send ether before resetting the user balance, opening it up to reentrancy.",
        "potentialSecurityRisk": "An attacker might be able to call this function repeatedly, withdrawing more funds than the actual balance due to reentrancy.",
        "fixedCode": "function withdrawBalance_40() public { uint256 userBalance = userBalance_40[msg.sender]; userBalance_40[msg.sender] = 0; (bool success,) = msg.sender.call.value(userBalance)(\"\"); if (!success) { userBalance_40[msg.sender] = userBalance; revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_40;",
            "function withdrawBalance_40() public{",
            "        (bool success,)=msg.sender.call.value(userBalance_40[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_40[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "336-342",
        "vulnerabilityReason": "Uses call.value to send funds before setting user balance to zero, posing a reentrancy risk.",
        "potentialSecurityRisk": "Reentrancy can lead to draining the contract of its ether balance because the balance update happens post withdrawal.",
        "fixedCode": "function withdrawBalance_33() public { uint256 userBalance = userBalance_33[msg.sender]; userBalance_33[msg.sender] = 0; (bool success,) = msg.sender.call.value(userBalance)(\"\"); if (!success) { userBalance_33[msg.sender] = userBalance; revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance_33;",
            "function withdrawBalance_33() public{",
            "        (bool success,)= msg.sender.call.value(userBalance_33[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance_33[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "349-356",
        "vulnerabilityReason": "Funds are sent via send before updating the call check condition, which can lead to reentrancy.",
        "potentialSecurityRisk": "Attackers can reenter this function to keep sending themselves ether before the call not called condition is reset.",
        "fixedCode": "function balances_27() public { require(callcheck_27); callcheck_27 = false; if (!msg.sender.send(1 ether)) { callcheck_27 = true; revert(); } }",
        "vulnerableCode": [
            "bool callcheck_27 = true;",
            "function balances_27() public{",
            "        require(callcheck_27);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        callcheck_27 = false;",
            "    }"
        ]
    }
]