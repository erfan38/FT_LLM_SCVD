[
    {
        "vulnerableLines": "69-74",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balance, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the balance is updated, potentially draining funds from the contract.",
        "fixedCode": "function withdrawFunds(uint256 _weiToWithdraw) public { require(balances[msg.sender] >= _weiToWithdraw); balances[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }",
        "vulnerableCode": [
            "function withdrawFunds (uint256 _weiToWithdraw) public {",
            "        require(balances[msg.sender] >= _weiToWithdraw);",
            "    (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "78-84",
        "vulnerabilityReason": "The function sends ether before updating the lastPlayer address and jackpot amount, making it susceptible to reentrancy.",
        "potentialSecurityRisk": "A malicious contract can repeatedly call this function, continuously winning the jackpot before updates.",
        "fixedCode": "function buyTicket() public { (bool success,) = lastPlayer.call.value(jackpot)(\"\"); if (!success) revert(); lastPlayer = msg.sender; jackpot = address(this).balance; }",
        "vulnerableCode": [
            "      function buyTicket() public{",
            "        (bool success,) = lastPlayer.call.value(jackpot)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer = msg.sender;",
            "      jackpot    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "89-95",
        "vulnerabilityReason": "The function transfers ether to the caller before updating redeemableEther, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to drain more funds than they should be allowed.",
        "fixedCode": "function claimReward() public { require(redeemableEther[msg.sender] > 0); uint transferValue = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValue); }",
        "vulnerableCode": [
            "  mapping(address => uint) redeemableEther;",
            "function claimReward() public {        ",
            "        require(redeemableEther[msg.sender] > 0);",
            "        uint transferValue = redeemableEther[msg.sender];",
            "        msg.sender.transfer(transferValue);   ",
            "        redeemableEther[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "97-103",
        "vulnerabilityReason": "Using send to transfer ether before updating the user balance exposes the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could invoke this function multiple times to drain more ether than their intended balance.",
        "fixedCode": "function withdrawBalance() public { uint balance = userBalance[msg.sender]; userBalance[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }",
        "vulnerableCode": [
            "  mapping(address => uint) userBalance;",
            "function withdrawBalance() public{",
            "        if( ! (msg.sender.send(userBalance[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "111-116",
        "vulnerabilityReason": "Using transfer to send ether before updating redeemableEther allows for potential reentrancy.",
        "potentialSecurityRisk": "Attackers may continue to claim rewards before their balances are updated.",
        "fixedCode": "function claimRewardAlternative() public { require(redeemableEtherAlternative[msg.sender] > 0); uint transferValue = redeemableEtherAlternative[msg.sender]; redeemableEtherAlternative[msg.sender] = 0; msg.sender.transfer(transferValue); }",
        "vulnerableCode": [
            "function claimRewardAlternative() public {        ",
            "        require(redeemableEtherAlternative[msg.sender] > 0);",
            "        uint transferValue = redeemableEtherAlternative[msg.sender];",
            "        msg.sender.transfer(transferValue);   ",
            "        redeemableEtherAlternative[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "121-126",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the balancesAlt mapping, allowing reentrant calls to siphon off more funds.",
        "potentialSecurityRisk": "A malicious contract could drain more ether than their entitled balance by invoking this function repeatedly.",
        "fixedCode": "function withdrawFundsAlt(uint256 _weiToWithdraw) public { require(balancesAlt[msg.sender] >= _weiToWithdraw); balancesAlt[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "mapping(address => uint) balancesAlt;",
            "function withdrawFundsAlt (uint256 _weiToWithdraw) public {",
            "        require(balancesAlt[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balancesAlt[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "132-138",
        "vulnerabilityReason": "Transfer of ether occurs before resetting the balance in the function, potentially allowing reentrancy.",
        "potentialSecurityRisk": "An exploiter can drain funds repeatedly from the contract, depleting all available ether.",
        "fixedCode": "function claimRewardLast() public { require(redeemableEtherLast[msg.sender] > 0); uint transferValue = redeemableEtherLast[msg.sender]; redeemableEtherLast[msg.sender] = 0; msg.sender.transfer(transferValue); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEtherLast;",
            "function claimRewardLast() public {        ",
            "        require(redeemableEtherLast[msg.sender] > 0);",
            "        uint transferValue = redeemableEtherLast[msg.sender];",
            "        msg.sender.transfer(transferValue);   ",
            "        redeemableEtherLast[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "145-152",
        "vulnerabilityReason": "Using send to transfer ether before updating the counterAlt state variable exposes the function to reentrancy.",
        "potentialSecurityRisk": "An attacker could invoke this function repeatedly to withdraw more ether than the limit, draining the contract's funds.",
        "fixedCode": "function callMe() public { require(counterAlt <= 5); counterAlt += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counterAlt = 0;",
            "function callMe() public{",
            "        require(counterAlt <= 5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counterAlt += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "158-165",
        "vulnerabilityReason": "The function sends ether before updating the lastPlayerAlt and jackpotAlt, allowing for reentrancy.",
        "potentialSecurityRisk": "A malicious contract can call this function multiple times to continuously win the jackpot.",
        "fixedCode": "function buyTicketAlt() public { if (!lastPlayerAlt.send(jackpotAlt)) revert(); lastPlayerAlt = msg.sender; jackpotAlt = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayerAlt;",
            "      uint jackpotAlt;",
            "      function buyTicketAlt() public{",
            "        if (!(lastPlayerAlt.send(jackpotAlt)))",
            "        revert();",
            "      lastPlayerAlt = msg.sender;",
            "      jackpotAlt    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "170-177",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the counterAnother variable, exposing it to reentrancy.",
        "potentialSecurityRisk": "Repeated reentrant calls can drain the contract's ether balance beyond the intended limit.",
        "fixedCode": "function callMeAnother() public { require(counterAnother <= 5); counterAnother += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counterAnother = 0;",
            "function callMeAnother() public{",
            "        require(counterAnother <= 5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counterAnother += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "182-188",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the lastPlayerFinal and jackpotFinal, allowing reentrancy.",
        "potentialSecurityRisk": "A malicious contract could invoke this function repeatedly to win the jackpot continuously.",
        "fixedCode": "function buyTicketFinal() public { if (!lastPlayerFinal.send(jackpotFinal)) revert(); lastPlayerFinal = msg.sender; jackpotFinal = address(this).balance; }",
        "vulnerableCode": [
            "address payable lastPlayerFinal;",
            "      uint jackpotFinal;",
            "      function buyTicketFinal() public{",
            "        if (!(lastPlayerFinal.send(jackpotFinal)))",
            "        revert();",
            "      lastPlayerFinal = msg.sender;",
            "      jackpotFinal    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "197-202",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balance, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the balance is updated, potentially draining funds from the contract.",
        "fixedCode": "function withdrawFundsUnique() public { uint balance = balancesUnique[msg.sender]; balancesUnique[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); require(success); }",
        "vulnerableCode": [
            "mapping(address => uint) balancesUnique;",
            "    function withdrawFundsUnique () public {",
            "       (bool success,) = msg.sender.call.value(balancesUnique[msg.sender ])(\"\");",
            "       if (success)",
            "          balancesUnique[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "212-218",
        "vulnerabilityReason": "Calling transfer to send funds before updating the balance allows for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could invoke this function reentrantly to claim more rewards in each transaction, draining the contract.",
        "fixedCode": "function claimRewardNew() public { require(redeemableEtherNew[msg.sender] > 0); uint transferValue = redeemableEtherNew[msg.sender]; redeemableEtherNew[msg.sender] = 0; msg.sender.transfer(transferValue); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEtherNew;",
            "function claimRewardNew() public {        ",
            "        require(redeemableEtherNew[msg.sender] > 0);",
            "        uint transferValue = redeemableEtherNew[msg.sender];",
            "        msg.sender.transfer(transferValue);   ",
            "        redeemableEtherNew[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "227-231",
        "vulnerabilityReason": "Using send to transfer ether before updating the balances allows for reentrancy attacks.",
        "potentialSecurityRisk": "Exploits could result in continuously drained funds as the balance is updated after sending.",
        "fixedCode": "function withdrawFundsUniqueFinal() public { uint balance = balancesUniqueFinal[msg.sender]; balancesUniqueFinal[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }",
        "vulnerableCode": [
            "mapping(address => uint) balancesUniqueFinal;",
            "    function withdrawFundsUniqueFinal () public {",
            "       if (msg.sender.send(balancesUniqueFinal[msg.sender ]))",
            "          balancesUniqueFinal[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "240-247",
        "vulnerabilityReason": "Using send to transfer ether before updating the counterFinal variable, exposing the function to reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw more ether than allowed, depleting the contract's funds.",
        "fixedCode": "function callMeFinal() public { require(counterFinal <= 5); counterFinal += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "uint256 counterFinal = 0;",
            "function callMeFinal() public{",
            "        require(counterFinal <= 5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counterFinal += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "253-260",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the balance, allowing for reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly invoke this function before the balance is updated, potentially draining funds from the contract.",
        "fixedCode": "function withdrawBalanceAlt() public { uint balance = userBalanceAlt[msg.sender]; userBalanceAlt[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); require(success); }",
        "vulnerableCode": [
            "  mapping(address => uint) userBalanceAlt;",
            "function withdrawBalanceAlt() public{",
            "        (bool success,)= msg.sender.call.value(userBalanceAlt[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalanceAlt[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "268-275",
        "vulnerabilityReason": "Calling call.value before resetting the user's balance allows for reentrancy attacks.",
        "potentialSecurityRisk": "The function can be exploited by attackers to withdraw more funds than their available balance.",
        "fixedCode": "function withdrawBalanceNew() public { uint balance = userBalanceNew[msg.sender]; userBalanceNew[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); require(success); }",
        "vulnerableCode": [
            "mapping(address => uint) userBalanceNew;",
            "function withdrawBalanceNew() public{",
            "        (bool success,)=msg.sender.call.value(userBalanceNew[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalanceNew[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "280-287",
        "vulnerabilityReason": "Calling call.value to send ether before updating the user balance allows for reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit this by making multiple withdrawals, draining the contract of funds.",
        "fixedCode": "function withdrawBalanceFinished() public { uint balance = userBalanceFinished[msg.sender]; userBalanceFinished[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); require(success); }",
        "vulnerableCode": [
            "mapping(address => uint) userBalanceFinished;",
            "function withdrawBalanceFinished() public{",
            "        (bool success,)= msg.sender.call.value(userBalanceFinished[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalanceFinished[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "292-299",
        "vulnerabilityReason": "The function uses send to transfer ether and does not properly update the execution state variable, leading to potential reentrancy.",
        "potentialSecurityRisk": "Attackers might exploit this to make numerous calls, withdrawing more ether than permitted.",
        "fixedCode": "function checkFunctionality() public { require(notCalled); notCalled = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "bool notCalled = true;",
            "function checkFunctionality() public{",
            "        require(notCalled);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        notCalled = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "305-309",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the balancesAltFinal mapping, allowing reentrant calls.",
        "potentialSecurityRisk": "An exploiter could drain ether repeatedly by invoking this function before the balance is updated.",
        "fixedCode": "function withdrawFundsAltFinal(uint256 _weiToWithdraw) public { require(balancesAltFinal[msg.sender] >= _weiToWithdraw); balancesAltFinal[msg.sender] = 0; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "function withdrawFundsAltFinal (uint256 _weiToWithdraw) public {",
            "        require(balancesAltFinal[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balancesAltFinal[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "313-320",
        "vulnerabilityReason": "The function uses send to transfer ether without updating the state variable notCalledSecond, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Attackers can continuously withdraw funds by exploiting the reentrancy gap.",
        "fixedCode": "function checkFunctionalitySecond() public { require(notCalledSecond); notCalledSecond = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "  bool notCalledSecond = true;",
            "function checkFunctionalitySecond() public{",
            "        require(notCalledSecond);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        notCalledSecond = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "327-335",
        "vulnerabilityReason": "The function uses call.value to transfer ether before updating the state variable notCalledThird, allowing for potential reentrancy.",
        "potentialSecurityRisk": "Repeated calls to this function can drain significant funds from the contract before the state variable is updated.",
        "fixedCode": "function checkFunctionalityThird() public { require(notCalledThird); notCalledThird = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "bool notCalledThird = true;",
            "function checkFunctionalityThird() public{",
            "        require(notCalledThird);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        notCalledThird = false;",
            "    }"
        ]
    }
]