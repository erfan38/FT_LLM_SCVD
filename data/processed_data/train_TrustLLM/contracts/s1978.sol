function _withdraw(uint256 _shares) internal nonReentrant { require(_shares != 0, "0 Shares"); uint256 r = (balance() * _shares) / totalSupply(); _burn(msg.sender, _shares); uint256 b = token.balanceOf(address(this)); if (b < r) { uint256 _toWithdraw = r - b; IStrategy(strategy).withdraw(_toWithdraw); uint256 _after = token.balanceOf(address(this)); uint256 _diff = _after - b; if (_diff < _toWithdraw) { r = b + _diff; } } uint256 _fee = _calculateFee(r, withdrawalFee); uint256 _amount = r - _fee; IVesting(vesting).setupVesting(msg.sender, _amount, block.timestamp); token.safeTransfer(vesting, _amount); if(_fee > 0) { _mintSharesFor(treasury, _fee, balance() - _fee); } }
