function recordStakingStart( address nodeID, bytes32 txID, uint256 startTime ) external { int256 minipoolIndex = onlyValidMultisig(nodeID); requireValidStateTransition(minipoolIndex, MinipoolStatus.Staking); if (startTime > block.timestamp) { revert InvalidStartTime(); } setUint(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".status")), uint256(MinipoolStatus.Staking)); setBytes32(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".txID")), txID); setUint(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".startTime")), startTime); uint256 initialStartTime = getUint(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".initialStartTime"))); if (initialStartTime == 0) { setUint(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".initialStartTime")), startTime); } address owner = getAddress(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".owner"))); uint256 avaxLiquidStakerAmt = getUint(keccak256(abi.encodePacked("minipool.item", minipoolIndex, ".avaxLiquidStakerAmt"))); Staking staking = Staking(getContractAddress("Staking")); if (staking.getAVAXAssignedHighWater(owner) < staking.getAVAXAssigned(owner)) { staking.increaseAVAXAssignedHighWater(owner, avaxLiquidStakerAmt); } emit MinipoolStatusChanged(nodeID, MinipoolStatus.Staking); }
