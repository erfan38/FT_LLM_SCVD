function _updateUserFeesOnDeposit( address account, address from, uint256 amountAdded ) internal { WithdrawalFeeMeta storage meta = withdrawalFeeMetas[account]; uint256 balance = lpToken.balanceOf(account) + staker.stakedAndActionLockedBalanceOf(account); uint256 newCurrentFeeRatio = getNewCurrentFees( meta.timeToWait, meta.lastActionTimestamp, meta.feeRatio ); uint256 shareAdded = amountAdded.scaledDiv(amountAdded + balance); uint256 shareExisting = ScaledMath.ONE - shareAdded; uint256 feeOnDeposit; if (from == address(0)) { feeOnDeposit = getMaxWithdrawalFee(); } else { WithdrawalFeeMeta storage fromMeta = withdrawalFeeMetas[from]; feeOnDeposit = getNewCurrentFees( fromMeta.timeToWait, fromMeta.lastActionTimestamp, fromMeta.feeRatio ); } uint256 newFeeRatio = shareExisting.scaledMul(newCurrentFeeRatio) + shareAdded.scaledMul(feeOnDeposit); meta.feeRatio = uint64(newFeeRatio); meta.timeToWait = uint64(getWithdrawalFeeDecreasePeriod()); meta.lastActionTimestamp = uint64(_getTime()); }
