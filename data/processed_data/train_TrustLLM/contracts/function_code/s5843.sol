function _addInterest() internal returns ( uint256 _interestEarned, uint256 _feesAmount, uint256 _feesShare, uint64 _newRate ) { CurrentRateInfo memory _currentRateInfo = currentRateInfo; if (_currentRateInfo.lastTimestamp == block.timestamp) { _newRate = _currentRateInfo.ratePerSec; return (_interestEarned, _feesAmount, _feesShare, _newRate); } VaultAccount memory _totalAsset = totalAsset; VaultAccount memory _totalBorrow = totalBorrow; if (_totalBorrow.shares == 0 || paused()) { if (!paused()) { _currentRateInfo.ratePerSec = DEFAULT_INT; } _currentRateInfo.lastTimestamp = uint64(block.timestamp); _currentRateInfo.lastBlock = uint64(block.number); currentRateInfo = _currentRateInfo; } else { uint256 _deltaTime = block.timestamp - _currentRateInfo.lastTimestamp; uint256 _utilizationRate = (UTIL_PREC * _totalBorrow.amount) / _totalAsset.amount; if (_isPastMaturity()) { _newRate = uint64(penaltyRate); } else { bytes memory _rateData = abi.encode( _currentRateInfo.ratePerSec, _deltaTime, _utilizationRate, block.number - _currentRateInfo.lastBlock ); _newRate = IRateCalculator(rateContract).getNewRate(_rateData, rateInitCallData); } emit UpdateRate(_currentRateInfo.ratePerSec, _deltaTime, _utilizationRate, _newRate); _currentRateInfo.ratePerSec = _newRate; _currentRateInfo.lastTimestamp = uint64(block.timestamp); _currentRateInfo.lastBlock = uint64(block.number); _interestEarned = (_deltaTime * _totalBorrow.amount * _currentRateInfo.ratePerSec) / 1e18; if ( _interestEarned + _totalBorrow.amount <= type(uint128).max && _interestEarned + _totalAsset.amount <= type(uint128).max ) { _totalBorrow.amount += uint128(_interestEarned); _totalAsset.amount += uint128(_interestEarned); if (_currentRateInfo.feeToProtocolRate > 0) { _feesAmount = (_interestEarned * _currentRateInfo.feeToProtocolRate) / FEE_PRECISION; _feesShare = (_feesAmount * _totalAsset.shares) / (_totalAsset.amount - _feesAmount); _totalAsset.shares += uint128(_feesShare); _mint(address(this), _feesShare); } emit AddInterest(_interestEarned, _currentRateInfo.ratePerSec, _deltaTime, _feesAmount, _feesShare); } totalAsset = _totalAsset; currentRateInfo = _currentRateInfo; totalBorrow = _totalBorrow; } }
