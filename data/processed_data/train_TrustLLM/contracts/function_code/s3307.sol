function executeProposal(ExecuteProposalParams memory params) external onlyDelegateCall returns (bytes memory nextProgressData) { if (params.proposalId == 0) { revert ZeroProposalIdError(); } Storage storage stor = _getStorage(); uint256 currentInProgressProposalId = stor.currentInProgressProposalId; if (currentInProgressProposalId == 0) { stor.currentInProgressProposalId = params.proposalId; } else if (currentInProgressProposalId != params.proposalId) { revert ProposalExecutionBlockedError( params.proposalId, currentInProgressProposalId ); } { bytes32 nextProgressDataHash = stor.nextProgressDataHash; if (nextProgressDataHash == 0) { assert(currentInProgressProposalId == 0); if (params.progressData.length != 0) { revert ProposalProgressDataInvalidError( keccak256(params.progressData), nextProgressDataHash ); } } else { bytes32 progressDataHash = keccak256(params.progressData); if (nextProgressDataHash != progressDataHash) { revert ProposalProgressDataInvalidError( progressDataHash, nextProgressDataHash ); } } stor.nextProgressDataHash = bytes32(type(uint256).max); } ProposalType pt; (pt, params.proposalData) = _extractProposalType(params.proposalData); nextProgressData = _execute(pt, params); if (nextProgressData.length == 0) { stor.currentInProgressProposalId = 0; stor.nextProgressDataHash = 0; } else { stor.nextProgressDataHash = keccak256(nextProgressData); } }
