function declareReward(uint256 amount) external onlyRoleMalt(REWARDER_ROLE, "Only rewarder role") onlyActive { _rewardCheck(amount); if (rewardMine.totalBonded() == 0) { _forfeit(amount); return; } uint256 vestingBondedValue = vestingDistributor.bondedValue(); uint256 currentlyVested = vestingDistributor.getCurrentlyVested(); uint256 netVest = currentlyVested - previouslyVested; uint256 netTime = block.timestamp - previouslyVestedTimestamp; if (netVest == 0 || vestingBondedValue == 0) { return; } uint256 linearBondedValue = rewardMine.valueOfBonded(); uint256 distributed = (linearBondedValue * netVest) / vestingBondedValue; uint256 balance = collateralToken.balanceOf(address(this)); if (distributed > balance) { distributed = balance; } if (distributed > 0) { collateralToken.safeTransfer(address(rewardMine), distributed); rewardMine.releaseReward(distributed); } balance = collateralToken.balanceOf(address(this)); uint256 buf = bufferTime; uint256 bufferRequirement; if (netTime < buf) { bufferRequirement = (distributed * buf * 10000) / netTime / 10000; } else { bufferRequirement = distributed; } if (balance > bufferRequirement) { uint256 net = balance - bufferRequirement; _forfeit(net); } previouslyVested = currentlyVested; previouslyVestedTimestamp = block.timestamp; emit DeclareReward(amount, distributed, address(collateralToken)); }
