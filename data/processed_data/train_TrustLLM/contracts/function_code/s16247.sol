function change(Change[] calldata changes, uint256 deadline) public payable { if (block.timestamp > deadline && deadline != 0) { revert DeadlinePassed(); } for (uint256 i = 0; i < changes.length; i++) { Change memory _change = changes[i]; for (uint256 j = 0; j < changes[i].inputTokenIds.length; j++) { ERC721(_change.nft).safeTransferFrom(msg.sender, address(this), _change.inputTokenIds[j]); } ERC721(_change.nft).setApprovalForAll(_change.pool, true); PrivatePool(_change.pool).change{value: msg.value}( _change.inputTokenIds, _change.inputTokenWeights, _change.inputProof, _change.stolenNftProofs, _change.outputTokenIds, _change.outputTokenWeights, _change.outputProof ); for (uint256 j = 0; j < changes[i].outputTokenIds.length; j++) { ERC721(_change.nft).safeTransferFrom(address(this), msg.sender, _change.outputTokenIds[j]); } } if (address(this).balance > 0) { msg.sender.safeTransferETH(address(this).balance); } }
