function claim(uint256 tokenId, address contributor) public { { CrowdfundLifecycle lc = getCrowdfundLifecycle(); if (lc != CrowdfundLifecycle.Finalized) { revert WrongLifecycleError(lc); } } uint96 votingPower = pendingVotingPower[contributor]; if (votingPower == 0) return; { uint96 contribution = (votingPower * 1e4) / exchangeRateBps; uint96 maxContribution_ = maxContribution; if (contribution > maxContribution_) { revert AboveMaximumContributionsError(contribution, maxContribution_); } } _burn(contributor); delete pendingVotingPower[contributor]; if (tokenId == 0) { tokenId = party.mint(contributor, votingPower, delegationsByContributor[contributor]); } else if (disableContributingForExistingCard) { revert ContributingForExistingCardDisabledError(); } else if (party.ownerOf(tokenId) == contributor) { party.addVotingPower(tokenId, votingPower); } else { revert NotOwnerError(); } emit Claimed(contributor, tokenId, votingPower); }
