function _distributeProfit(uint256 rewarded) internal { if (rewarded == 0) { return; } rewarded = _replenishLiquidityExtension(rewarded); if (rewarded == 0) { return; } collateralToken.safeApprove(address(auction), 0); collateralToken.safeApprove(address(auction), rewarded); rewarded = auction.allocateArbRewards(rewarded); collateralToken.safeApprove(address(auction), 0); if (rewarded == 0) { return; } uint256 distributeCut = (rewarded * distributeBps) / 10000; uint256 daoCut = (distributeCut * daoRewardCutBps) / 10000; distributeCut -= daoCut; uint256 globalSwingTraderDeficit = (maltDataLab.maltToRewardDecimals( globalIC.swingTraderCollateralDeficit() ) * maltDataLab.priceTarget()) / (10**collateralToken.decimals()); uint256 lpCut; uint256 swingTraderCut; if (globalSwingTraderDeficit == 0) { lpCut = distributeCut; } else { uint256 runwayDeficit = rewardThrottle.runwayDeficit(); if (runwayDeficit == 0) { swingTraderCut = distributeCut; } else { uint256 totalDeficit = runwayDeficit + globalSwingTraderDeficit; uint256 globalSwingTraderRatio = maltDataLab.maltToRewardDecimals( globalIC.swingTraderCollateralRatio() ); uint256 poolSwingTraderRatio = impliedCollateralService .swingTraderCollateralRatio(); if (poolSwingTraderRatio < globalSwingTraderRatio) { swingTraderCut = (distributeCut * swingTraderPreferenceBps) / 10000; lpCut = distributeCut - swingTraderCut; } else { lpCut = (((distributeCut * runwayDeficit) / totalDeficit) * (10000 - lpThrottleBps)) / 10000; swingTraderCut = distributeCut - lpCut; } } } uint256 treasuryCut = rewarded - daoCut - lpCut - swingTraderCut; assert(treasuryCut <= rewarded); if (swingTraderCut > 0) { collateralToken.safeTransfer(address(swingTrader), swingTraderCut); } if (treasuryCut > 0) { collateralToken.safeTransfer(treasury, treasuryCut); } if (daoCut > 0) { collateralToken.safeTransfer(dao, daoCut); } if (lpCut > 0) { collateralToken.safeTransfer(address(rewardThrottle), lpCut); rewardThrottle.handleReward(); } emit RewardDistribution(swingTraderCut, lpCut, daoCut, treasuryCut); }
