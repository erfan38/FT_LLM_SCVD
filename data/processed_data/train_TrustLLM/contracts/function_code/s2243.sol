function withdraw(uint treeIndex, address destination) public { require(initialized[destination][treeIndex], "You must initialize your account first."); Tranche storage tranche = tranches[destination][treeIndex]; require(block.timestamp > tranche.lockPeriodEndTime, 'Must wait until after lock period'); require(tranche.currentCoins > 0, 'No coins left to withdraw'); uint currentWithdrawal = 0; if (block.timestamp >= tranche.endTime) { currentWithdrawal = tranche.currentCoins; } else { currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond; } tranche.currentCoins -= currentWithdrawal; tranche.lastWithdrawalTime = block.timestamp; MerkleTree storage tree = merkleTrees[treeIndex]; tree.tokenBalance -= currentWithdrawal; IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal); emit WithdrawalOccurred(treeIndex, destination, currentWithdrawal, tranche.currentCoins); }
