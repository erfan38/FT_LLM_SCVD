function _lock(address _account, uint256 _amount) internal { require(_amount > 0, "Cannot stake 0"); require(!isShutdown, "shutdown"); Balances storage bal = balances[_account]; _checkpointEpoch(); uint112 lockAmount = _amount.to112(); bal.locked = bal.locked.add(lockAmount); lockedSupply = lockedSupply.add(_amount); uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration); uint256 unlockTime = currentEpoch.add(lockDuration); uint256 idx = userLocks[_account].length; if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) { userLocks[_account].push(LockedBalance({ amount: lockAmount, unlockTime: uint32(unlockTime) })); } else { LockedBalance storage userL = userLocks[_account][idx - 1]; userL.amount = userL.amount.add(lockAmount); } address delegatee = delegates(_account); if (delegatee != address(0)) { delegateeUnlocks[delegatee][unlockTime] += lockAmount; _checkpointDelegate(delegatee, lockAmount, 0); } Epoch storage e = epochs[epochs.length - 1]; e.supply = e.supply.add(lockAmount); emit Staked(_account, lockAmount, lockAmount); }
