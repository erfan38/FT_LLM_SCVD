function _processContribution( address payable contributor, address delegate, uint96 amount ) internal returns (uint96 votingPower) { address oldDelegate = delegationsByContributor[contributor]; if (msg.sender == contributor || oldDelegate == address(0)) { delegationsByContributor[contributor] = delegate; } else { delegate = oldDelegate; } emit Contributed(msg.sender, contributor, amount, delegate); if (amount == 0) return 0; CrowdfundLifecycle lc = getCrowdfundLifecycle(); if (lc != CrowdfundLifecycle.Active) { revert WrongLifecycleError(lc); } uint96 minContribution_ = minContribution; if (amount < minContribution_) { revert BelowMinimumContributionsError(amount, minContribution_); } uint96 maxContribution_ = maxContribution; if (amount > maxContribution_) { revert AboveMaximumContributionsError(amount, maxContribution_); } uint96 newTotalContributions = totalContributions + amount; uint96 maxTotalContributions_ = maxTotalContributions; if (newTotalContributions >= maxTotalContributions_) { totalContributions = maxTotalContributions_; _finalize(maxTotalContributions_); uint96 refundAmount = newTotalContributions - maxTotalContributions; if (refundAmount > 0) { amount -= refundAmount; payable(msg.sender).transferEth(refundAmount); } } else { totalContributions = newTotalContributions; } address payable fundingSplitRecipient_ = fundingSplitRecipient; uint16 fundingSplitBps_ = fundingSplitBps; if (fundingSplitRecipient_ != address(0) && fundingSplitBps_ > 0) { uint96 feeAmount = (amount * fundingSplitBps_) / 1e4; amount -= feeAmount; } votingPower = (amount * exchangeRateBps) / 1e4; }
