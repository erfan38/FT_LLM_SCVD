{
    "vulnerabilities": [
        {
            "vulnerableLines": "4-4",
            "vulnerableCode": [
                "uint age = currentYear - _birthYear;"
            ],
            "vulnerabilityReason": "The subtraction operation `currentYear - _birthYear` does not include a check to ensure that `_birthYear` is less than or equal to `currentYear`. If `_birthYear` is greater than `currentYear`, it results in an underflow, which will return a very large number instead of a negative value, leading to an incorrect age calculation.",
            "potentialSecurityRisk": "An attacker could input a future birth year, resulting in an underflow which would yield an incorrect and excessively large value for age, potentially affecting any logic that relies on the age value. This could also be exploited for malicious purposes if the age is tied to access controls or eligibility criteria in other parts of a contract.",
            "fixedCode": "require(_birthYear <= currentYear, \"Birth year cannot be greater than current year.\");\nuint age = currentYear - _birthYear;"
        }
    ]
}