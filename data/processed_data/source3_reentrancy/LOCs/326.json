{
    "vulnerabilities": [
        {
            "vulnerableLines": "22-23",
            "vulnerableCode": [
                "            msg.sender.call.value(_am);",
                "            Bal[msg.sender]-=_am;"
            ],
            "vulnerabilityReason": "The contract sends Ether using `call.value(_am)` before updating the balance. This allows a malicious caller to leverage reentrancy by recursively calling the `Collect` function before the balance update occurs, potentially draining the contract's Ether.",
            "potentialSecurityRisk": "An attacker can exploit the reentrancy vulnerability to repeatedly call the `Collect` function, withdrawing more Ether than the caller's balance, thereby depleting the contract of its funds.",
            "fixedCode": "require(Bal[msg.sender] >= _am, 'Insufficient balance');\nBal[msg.sender] -= _am;  // Update the balance before the call\n(bool success, ) = msg.sender.call.value(_am)('');\nrequire(success, 'Transfer failed'); // Ensure that the transfer was successful"
        }
    ]
}