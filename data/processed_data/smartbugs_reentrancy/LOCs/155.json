{
    "vulnerabilities": [
        {
            "vulnerableLines": "37-39",
            "vulnerableCode": [
                "if(msg.sender.call.value(_am)())",
                "balances[msg.sender]-=_am;"
            ],
            "vulnerabilityReason": "The contract uses `msg.sender.call.value(_am)()` to send Ether before updating the state variable `balances[msg.sender]`. This creates a vulnerability where an attacker could exploit reentrancy by calling `CashOut` again before the balance is updated, allowing them to withdraw more funds than they are entitled to.",
            "potentialSecurityRisk": "An attacker could drain the contract by repeatedly calling `CashOut` before the balance is decreased, effectively bypassing the intended limitations, which could lead to a total loss of funds for the contract.",
            "fixedCode": "if (_am <= balances[msg.sender] && block.number > lastBlock) { \n    balances[msg.sender] -= _am;  // Update state first\n    if (msg.sender.call.value(_am)()) {  \n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n    }\n}"
        }
    ]
}