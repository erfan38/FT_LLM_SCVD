{
    "vulnerabilities": [
        {
            "vulnerableLines": "71-75",
            "vulnerableCode": [
                "function withdraw(uint amount) {",
                "    if (tokens[0][msg.sender] < amount) throw;",
                "    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);",
                "    if (!msg.sender.call.value(amount)()) throw;",
                "    Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);"
            ],
            "vulnerabilityReason": "The withdraw function deducts the user's balance after initiating an external call using call.value(amount). This order allows an attacker to re-enter the withdraw function before the state is updated, potentially allowing them to withdraw more funds than they should be able to.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by creating a malicious contract that calls the withdraw function repeatedly during the external call, draining the contract of funds.",
            "fixedCode": "function withdraw(uint amount) { require(tokens[0][msg.sender] >= amount, \"Insufficient balance\"); tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount); if(!msg.sender.call.value(amount)()) { tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], amount); revert(); } Withdraw(0, msg.sender, amount, tokens[0][msg.sender]); }"
        }
    ]
}