{
    "vulnerabilities": [
        {
            "vulnerableLines": "131-131",
            "vulnerableCode": [
                "if (!founder.call.value(msg.value)()) revert();"
            ],
            "vulnerabilityReason": "The use of call.value() to transfer Ether occurs before updating the state variable (balances allocated to recipient), allowing an attacker to execute a reentrancy attack by calling the fallback function of their own contract during the Ether transfer, before the state is updated.",
            "potentialSecurityRisk": "An attacker can exploit this by executing multiple calls to the buy function within their fallback function, withdrawing more funds than allocated before the state is updated, potentially draining the contract's funds.",
            "fixedCode": "uint256 tokens = msg.value.mul(35e4);\nrequire(tokens > 0);\nrequire(saleTokenSupply.add(tokens)<=coinAllocation);\n\nbalances[recipient] = balances[recipient].add(tokens);\ntotalSupply_ = totalSupply_.add(tokens);\nsaleTokenSupply = saleTokenSupply.add(tokens);\nsalesVolume = salesVolume.add(msg.value);\n\n// Transfer the Ether after updating the contract state to prevent reentrancy\nfounder.transfer(msg.value);\nBuy(msg.sender, recipient, msg.value, tokens);"
        }
    ]
}