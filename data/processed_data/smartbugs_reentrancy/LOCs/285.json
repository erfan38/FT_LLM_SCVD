{
    "vulnerabilities": [
        {
            "vulnerableLines": "102-102",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The existing line uses `.call.value(0)`, which allows the recipient contract to execute arbitrary code before the state has been fully updated, presenting a reentrancy issue where an attacker might call back into the contract during the execution of this line.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability to execute arbitrary code in the context of this contract, potentially allowing them to modify balances or make multiple withdrawals before the state is effectively updated.",
            "fixedCode": "// Replace with proper Checks-Effects-Interactions pattern\n(uint256 previousBalance) = balanceOf(msg.sender);\nbalances[msg.sender] = previousBalance.sub(_value);\nbalances[_to] = balances[_to].add(_value);\nif (isContract(_to)) {\n    // Call the fallback function after state is updated\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n} emit Transfer(msg.sender, _to, _value, _data);"
        },
        {
            "vulnerableLines": "316-316",
            "vulnerableCode": [
                "if (msg.value > 0) owner.transfer(msg.value);"
            ],
            "vulnerabilityReason": "Using `transfer()` on the owner's address allows potential reentrancy. If the owner is a contract, it could call back into `autoDistribute()` before balances are updated, resulting in the owner potentially receiving more Ether than intended.",
            "potentialSecurityRisk": "If a malicious contract is set as the owner, the contract could potentially be drained or have its state manipulated as it could perform operations before balance updates take effect.",
            "fixedCode": "// Properly handle the transfer with Checks-Effects-Interactions pattern\nif (msg.value > 0) {\n    uint256 amountToTransfer = msg.value;\n    // Check if the contract's balance is sufficient before transferring\n    require(address(this).balance >= amountToTransfer, \"Insufficient contract balance\");\n    owner.transfer(amountToTransfer); // Transfer the amount only after checking\n}"
        }
    ]
}