{
    "vulnerabilities": [
        {
            "vulnerableLines": "373-375",
            "vulnerableCode": [
                "if (!address(admin1).call.value(_com.sub(_com / 2))()) {",
                "if (!address(admin2).call.value(_com / 2)()) {"
            ],
            "vulnerabilityReason": "These lines make external calls using low-level `call`, which does not guarantee that the external contract will execute safely. If either external call made here is unsuccessful, or if it is made to a malicious contract that calls back into this contract, it could exploit this to cause a reentrancy attack, where the state changes may not take effect before the contract's control returns to the calling contract.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by manipulating the `admin1` or `admin2` addresses to trigger multiple withdrawals or other state changes in the contract, possibly leading to the loss of funds or unintended behavior in the contract.",
            "fixedCode": "uint256 _halfCom = _com / 2;\nmuint256 _admin1Share = _com.sub(_halfCom);\nrequire(address(admin1).call.value(_admin1Share)(), \"Transfer to admin1 failed\");\nrequire(address(admin2).call.value(_halfCom)(), \"Transfer to admin2 failed\");"
        },
        {
            "vulnerableLines": "404-404",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "This line transfers Ether to the player's address without first checking that the transfer is successful or ensuring no reentrant calls can occur. If an attacker controls the address receiving the funds, they could exploit this to re-enter the `withdraw` function before state changes affect the player's balance.",
            "potentialSecurityRisk": "If an attacker could control the recipient or exploit it with a malicious contract, they can execute multiple withdrawals before the contract updates its state accordingly, leading to fund drainage.",
            "fixedCode": "if (_eth > 0) {\n    (bool success, ) = plyr_[_pID].addr.call.value(_eth)();\n    require(success, \"Transfer failed\");\n}"
        },
        {
            "vulnerableLines": "444-444",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The code performs an Ether transfer to the player's address with the potential for reentrancy attacks since the player's balance is updated after the call. If the player's address is a smart contract, it could exploit the transfer for multiple withdrawals before state changes are made.",
            "potentialSecurityRisk": "This could lead to a loss of funds if an attacker is able to repeatedly call the withdraw function before balances are updated, effectively draining the contract.",
            "fixedCode": "if (_eth > 0) {\n    (bool success, ) = plyr_[_pID].addr.call.value(_eth)();\n    require(success, \"Transfer failed\");\n}"
        }
    ]
}