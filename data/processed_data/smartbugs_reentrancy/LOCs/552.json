{
    "vulnerabilities": [
        {
            "vulnerableLines": "66-68",
            "vulnerableCode": [
                "balances[user] = 0;",
                "user.transfer(eth_to_withdraw);"
            ],
            "vulnerabilityReason": "The function 'auto_withdraw' updates the user's balance to zero before making the external call to transfer Ether. This enables a malicious contract to call back into 'auto_withdraw' before the balance update takes effect, allowing it to withdraw more funds than intended.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that triggers reentrancy, allowing it to drain the funds by calling 'auto_withdraw' multiple times before the user's balance is properly updated.",
            "fixedCode": "require(eth_to_withdraw <= address(this).balance, 'Insufficient contract balance');\nuint256 amount = balances[user];\nbalances[user] = 0;\n(user).transfer(amount);"
        },
        {
            "vulnerableLines": "75-85",
            "vulnerableCode": [
                "balances[user] = 0;",
                "if(!token.transfer(developer, fee)) throw;",
                "if(!token.transfer(user, tokens_to_withdraw - fee)) throw;"
            ],
            "vulnerabilityReason": "In the 'withdraw' function, the balance is set to zero before transferring tokens, enabling reentrancy attacks similar to the 'auto_withdraw' method.",
            "potentialSecurityRisk": "A reentrant call could allow an attacker to withdraw more tokens than they are entitled to, draining the contract of its assets before the balance is reset.",
            "fixedCode": "require(tokens_to_withdraw <= token.balanceOf(address(this)), 'Not enough tokens in contract');\nif(has_fee) {\n    uint256 fee = tokens_to_withdraw / 100;\n    require(token.transfer(developer, fee), 'Transfer failed');\n}\nrequire(token.transfer(user, tokens_to_withdraw - fee), 'Transfer failed');\nbalances[user] = 0;"
        },
        {
            "vulnerableLines": "120-126",
            "vulnerableCode": [
                "bought_tokens = true;",
                "if(!sale.call.value(this.balance - bounty)()) throw;"
            ],
            "vulnerabilityReason": "In the 'claim_bounty' function, 'bought_tokens' is set to true before an external call to 'sale', creating opportunities for reentrancy since external calls can invoke the function again.",
            "potentialSecurityRisk": "An attacker could exploit this by making a reentrant call upon the external call to the contract, allowing them to alter or drain the bounty before proper state updates occur.",
            "fixedCode": "if(!sale.call.value(this.balance - bounty)()) throw;\nbought_tokens = true;\ntime_bought = now;"
        }
    ]
}