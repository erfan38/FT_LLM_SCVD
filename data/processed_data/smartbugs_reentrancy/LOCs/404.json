{
    "vulnerabilities": [
        {
            "vulnerableLines": "71-71",
            "vulnerableCode": [
                "require(_contract.call.value(_amount)());"
            ],
            "vulnerabilityReason": "This line uses the low-level `call` to transfer Ether to an external contract before updating the state variable `wingsETHRewards`. If the external contract is malicious, it can revert or execute a fallback function before the state update happens, allowing for reentrancy attacks.",
            "potentialSecurityRisk": "An attacker could exploit a malicious contract to withdraw the same rewards repeatedly before the state changes are applied, potentially draining the contract's ETH reserves.",
            "fixedCode": "// Update state before making an external call\nwingsETHRewards = wingsETHRewards.sub(_amount);\n(bool success, ) = _contract.call.value(_amount)();\nrequire(success, \"Transfer failed\");"
        },
        {
            "vulnerableLines": "227-227",
            "vulnerableCode": [
                "if (!foundersAddresses[i].send(amount_to_withdraw)) {"
            ],
            "vulnerabilityReason": "The `send` method does not revert on failure, which allows a contract to execute fallback functions during the transfer process, leading to reentrant attacks. The lack of success checking for each individual transfer also creates a risk of funds being lost without proper error handling.",
            "potentialSecurityRisk": "If any of the recipients are contracts that can revert or have fallback functions that trigger, they could manipulate the state of the contract before the withdrawal logic is finalized, leading to unintended states or loss of funds.",
            "fixedCode": "uint256 amount_to_withdraw = _amount / foundersAddresses.length;\nfor (uint8 i = 0; i < foundersAddresses.length; i++) {\n    bool success = foundersAddresses[i].send(amount_to_withdraw);\n    require(success, \"Transfer to founder failed\");\n}"
        }
    ]
}