{
    "vulnerabilities": [
        {
            "vulnerableLines": "260-260",
            "vulnerableCode": [
                "if(!playerTempAddress[myid].send(playerTempBetValue[myid])){"
            ],
            "vulnerabilityReason": "The contract sends Ether using `.send()` before updating the contract's state regarding the player's pending withdrawals. This allows an attacker to re-enter the `__callback()` method before the state is updated, leading to possible multiple withdrawals before the contract can adjust its balance.",
            "potentialSecurityRisk": "An attacker could exploit this by triggering recursive calls while the contract is sending funds, allowing for repeated withdrawals that exceed the player's actual balance, draining the contract's funds.",
            "fixedCode": "// Ensure the transfer amount is valid\nrequire(playerTempBetValue[myid] <= address(this).balance, 'Insufficient balance');\n// Update player's pending withdrawal balance first\ntoSend = playerTempBetValue[myid];\nplayerPendingWithdrawals[playerTempAddress[myid]] = safeAdd(playerPendingWithdrawals[playerTempAddress[myid]], toSend);\n// Send money after updating state\n(bool success, ) = playerTempAddress[myid].call.value(toSend)('');\nrequire(success, 'Transfer failed');"
        }
    ]
}