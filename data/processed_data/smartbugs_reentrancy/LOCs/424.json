{
    "vulnerabilities": [
        {
            "vulnerableLines": "1017-1017",
            "vulnerableCode": [
                "if (!address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256(\"deposit()\"))))"
            ],
            "vulnerabilityReason": "Using low-level calls with call.value without checking for success after transferring Ether allows a malicious contract to reenter the vulnerable function and manipulate contract state before it can be updated, leading to potential reentrancy attacks.",
            "potentialSecurityRisk": "An attacker could control the called contract and execute a callback, allowing them to withdraw more funds or manipulate contract states undesirably before the initial transfer confirmation updates are made.",
            "fixedCode": "require(address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256(\"deposit()\"))), \"Transfer failed\");"
        },
        {
            "vulnerableLines": "579-579",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The transfer of Ether to the player's address occurs after potential state changes have been made, exposing the contract to reentrancy risk. If the player is a contract, they could implement fallback functions to exploit this.",
            "potentialSecurityRisk": "A malicious player could call back into this contract before the state is updated, potentially allowing them to withdraw more funds than they are entitled to, draining contract funds.",
            "fixedCode": "if (_eth > 0) { require(plyr_[_pID].addr.send(_eth), \"Transfer failed\"); }"
        },
        {
            "vulnerableLines": "1151-1151",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "Similar to the withdraw function, the failure to update the player's balance before transfer means that an attacker could manipulate the outcome of subsequent calls to this function to gain unauthorized funds.",
            "potentialSecurityRisk": "This may lead to a reentrancy attack where a player can call this function multiple times, each time re-triggering the transfer before their balance is updated, which can result in significant financial loss to the contract.",
            "fixedCode": "if (_eth > 0) { require(plyr_[_pID].addr.send(_eth), \"Transfer failed\"); }"
        }
    ]
}