{
    "vulnerabilities": [
        {
            "vulnerableLines": "208-211",
            "vulnerableCode": [
                "if (! sale.call.value(transactions[_id].amount)(bytes4(keccak256('depositEth(address,uint256,bytes)')), transactions[_id].beneficiary, uint256(transactions[_id].time), _whitelistCall)) {",
                "    return false;",
                "}",
                "transactions[_id].cleared = true;"
            ],
            "vulnerabilityReason": "The `call.value()` function is called before updating the `cleared` state variable to true. This means that a malicious actor can re-enter the contract during this external call, allowing them to execute the `forwardTransactionInternal` function again and withdraw funds multiple times before the state reflects that the transaction has been processed.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to recursively call `forwardTransactionInternal`, bypassing the intended single withdrawal logic, potentially leading to the contract draining its funds by enabling multiple withdrawals for a single transaction amount.",
            "fixedCode": "if (! sale.call.value(transactions[_id].amount)(bytes4(keccak256('depositEth(address,uint256,bytes)')), transactions[_id].beneficiary, uint256(transactions[_id].time), _whitelistCall)) {\n    return false;\n}\ntransactions[_id].cleared = true;  // Update state after the external call that can change state\npendingCount = pendingCount.sub(1);\nLogForwarded(transactions[_id].beneficiary, transactions[_id].amount, _id);"
        }
    ]
}