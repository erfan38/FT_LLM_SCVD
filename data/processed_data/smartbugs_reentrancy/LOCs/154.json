{
    "vulnerabilities": [
        {
            "vulnerableLines": "202-202",
            "vulnerableCode": [
                "if (!address(admin).call.value(_com)()) "
            ],
            "vulnerabilityReason": "The function makes an external call to admin's address using `call.value()` before performing any state updates that would occur after this call. If the `admin` address is a contract, it can call back into this function before the state has been correctly updated, allowing for potential manipulation of the contract state.",
            "potentialSecurityRisk": "An attacker could exploit this by creating a malicious contract at the admin address, and during the transfer call, trigger reentrant calls that manipulate the state of the contract before it has a chance to update. This could result in funds being distributed improperly or lost entirely.",
            "fixedCode": "uint256 _remainingFunds = _com; // Store amount in local variable before the external call\nif (_admin.call.value(_remainingFunds)()) { // Transfer to admin address\n    // Ensure state changes only occur if transfer is successful\n} else {\n    // Handle failed transfer case safely\n}"
        },
        {
            "vulnerableLines": "116-116",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The function transfers earnings to a player after checking their balance but before updating the internal state for the player's earnings. This order allows for reentrancy attacks, as the player can call this function again before the internal state is modified, potentially allowing them to withdraw more funds than they are entitled to.",
            "potentialSecurityRisk": "An attacker could exploit this by re-entering the function during the external call to `transfer`, allowing them to drain funds from the contract by withdrawing more than their eligible earnings before the internal balances are updated.",
            "fixedCode": "uint256 earnedFunds = withdrawEarnings(_pID); // Update the state before sending funds\nif (earnedFunds > 0) {\n    plyr_[_pID].addr.transfer(earnedFunds); // Send funds after state updates\n}"
        }
    ]
}