{
    "vulnerabilities": [
        {
            "vulnerableLines": "391-395",
            "vulnerableCode": [
                "uint256 _now = now;",
                "uint256 _pID = pIDxAddr_[msg.sender];",
                "uint256 _eth;",
                "if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)"
            ],
            "vulnerabilityReason": "The contract attempts to execute external calls to a playerâ€™s address without proper state checks and updates. The `_eth` amount may be transferred using `transfer` without confirming that the state has reflected the necessary changes beforehand, leading to potential reentrancy exploits.",
            "potentialSecurityRisk": "An attacker could exploit the reentrancy vulnerability by repeatedly calling the withdraw function to drain funds before the player's earnings are correctly updated and reset.",
            "fixedCode": "uint256 _now = now; uint256 _pID = pIDxAddr_[msg.sender]; uint256 _eth; if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0) { round_[_rID].ended = true; _eventData_ = endRound(_eventData_); _eth = withdrawEarnings(_pID); if (_eth > 0) { plyr_[_pID].addr.transfer(_eth); } } else { _eth = withdrawEarnings(_pID); if (_eth > 0) { plyr_[_pID].addr.transfer(_eth); } } emit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);"
        }
    ]
}