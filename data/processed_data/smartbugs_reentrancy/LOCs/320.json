{
    "vulnerabilities": [
        {
            "vulnerableLines": "89-89",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The function makes an external call to _to using .call.value(0) before updating the sender's balance. This allows a malicious contract to recursively call back into this function before the balance is decremented, leading to potential multiple withdrawals without the contract's state reflecting those changes.",
            "potentialSecurityRisk": "A reentrancy attack can result in an attacker draining tokens from the contract by allowing them to withdraw more tokens than they own through recursive calls before the state is properly updated.",
            "fixedCode": "// Update the balances before making external calls to prevent reentrancy risk.\nbalances[msg.sender] = balances[msg.sender].sub(_value);\nbalances[_to] = balances[_to].add(_value);\n// Now perform the external call safely after updating balances.\nassert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));"
        }
    ]
}