{
    "vulnerabilities": [
        {
            "vulnerableLines": "126-126",
            "vulnerableCode": [
                "buyCore(_pID, plyr_[_pID].laff, 2, _eventData_);"
            ],
            "vulnerabilityReason": "The line calls the function buyCore after state changes, allowing an attacker’s contract to carry out actions before the state is completely settled. The external call to buyCore could allow reentrant calls, resulting in unintended state changes.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to recursively call buyCore, manipulating the contract state and draining funds.",
            "fixedCode": "// Ensure to implement proper checks and external calls after state update\n// Consider using a Checks-Effects-Interactions pattern here."
        },
        {
            "vulnerableLines": "199-199",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "This line performs an external call to transfer Ether after the state has been updated, which can allow a reentrant call that might manipulate the state before it finishes executing.",
            "potentialSecurityRisk": "An attacker can exploit this to withdraw funds multiple times before the state updates, draining the contract’s balance.",
            "fixedCode": "// Implement checks-effects-interactions pattern\n// Ensure that the state change occurs before calling transfer."
        },
        {
            "vulnerableLines": "147-147",
            "vulnerableCode": [
                "buyCore(_pID, _affCode, _team, _eventData_);"
            ],
            "vulnerabilityReason": "The external call here allows for potential reentrancy before the state is fully settled, as it can be called after changes to mappings and causing unintended behavior when an attacker calls back into the contract.",
            "potentialSecurityRisk": "If an attacker controls the address being interacted with, they could exploit this to withdraw more funds than intended or change contract states incorrectly.",
            "fixedCode": "// Ensure proper state updates occur before making external function calls."
        },
        {
            "vulnerableLines": "295-295",
            "vulnerableCode": [
                "reLoadCore(_pID, _affCode, _team, _eth, _eventData_);"
            ],
            "vulnerabilityReason": "Similar issue as previous instances where the call to reLoadCore occurs after state changes, enabling reentrancy vulnerabilities.",
            "potentialSecurityRisk": "The same risk of funds being drained through repeated calls due to an attacker controlling the external contract referenced.",
            "fixedCode": "// Make sure to follow checks-effects-interactions pattern here, ensuring safe contract execution."
        }
    ]
}