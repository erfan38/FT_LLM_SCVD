{
    "vulnerabilities": [
        {
            "vulnerableLines": "61-61",
            "vulnerableCode": [
                "        boolsent = sharesAddress.call.gas(gasFee).value(5300000000000000000)();"
            ],
            "vulnerabilityReason": "The contract makes an external call to `sharesAddress` using `.call()`, which does not check for successful execution of the transaction. If an attacker controls `sharesAddress`, they could re-enter while the state is being updated, leading to unauthorized withdrawal of funds.",
            "potentialSecurityRisk": "An attacker could exploit this by deploying a malicious contract at `sharesAddress`, triggering the external call and manipulating the contract's state during execution, potentially leading to fund theft or unexpected behavior.",
            "fixedCode": "require(feesPool >= 5300000000000000000, \"Insufficient fees pool\");\nfeespool -= 5300000000000000000;\n(bool success, ) = sharesAddress.call.gas(gasFee).value(5300000000000000000)();\nrequire(success, \"Transfer to sharesAddress failed\");"
        },
        {
            "vulnerableLines": "73-73",
            "vulnerableCode": [
                "    if (!msg.sender.call.value(amount)()) throw;"
            ],
            "vulnerabilityReason": "The contract uses `msg.sender.call.value()` to send Ether, which allows for potential reentrancy if `msg.sender` is a contract that can trigger re-entry during the execution of this line, before the state is updated.",
            "potentialSecurityRisk": "If an attacker takes control of `msg.sender` and re-enters the contract during this external call, they can withdraw funds multiple times without the contract state reflecting the updates, leading to draining of the contract funds.",
            "fixedCode": "require(tokens[0][msg.sender] >= amount, \"Insufficient token balance\");\ntokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\n(bool success, ) = msg.sender.call.value(amount)();\nrequire(success, \"Withdrawal failed\");"
        },
        {
            "vulnerableLines": "89-89",
            "vulnerableCode": [
                "    if (!Token(token).transfer(msg.sender, amount)) throw;"
            ],
            "vulnerabilityReason": "The contract uses `.transfer()` to send tokens to `msg.sender` after state changes are made, which can provide an attacker an opportunity to manipulate the contract state immediately after this call if they control `msg.sender`. They can exploit this by causing a reentrant call to withdraw more tokens than allowed.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that calls `withdrawToken` repeatedly, exploiting the opportunity provided by the state change happening after the external call. This can lead to over-withdrawal of tokens, draining the contract's balance.",
            "fixedCode": "require(tokens[token][msg.sender] >= amount, \"Insufficient token balance\");\ntokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\nrequire(Token(token).transfer(msg.sender, amount), \"Token transfer failed\");"
        },
        {
            "vulnerableLines": "176-176",
            "vulnerableCode": [
                "    if (!(orders[msg.sender][hash] || ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", hash),v,r,s) == msg.sender)) throw;"
            ],
            "vulnerabilityReason": "The condition checks orders and performs an external call to `ecrecover()`, which does not modify the state before checking. An attacker may exploit checks and place reentrant calls before state changes occur, potentially manipulating the contract's logic.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability by submitting multiple requests before the state is updated, potentially allowing them to create duplicate orders or cancel legitimate ones, causing harmful outcomes for the user and the contract.",
            "fixedCode": "bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\nrequire(orders[msg.sender][hash] || ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", hash),v,r,s) == msg.sender, \"Unauthorized action\");"
        }
    ]
}