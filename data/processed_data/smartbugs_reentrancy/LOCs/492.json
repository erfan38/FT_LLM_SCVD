{
    "vulnerabilities": [
        {
            "vulnerableLines": "219-219",
            "vulnerableCode": [
                "require (receiverAddr.call.value(amountInWei).gas(msg.gas.sub(5000))());"
            ],
            "vulnerabilityReason": "The use of 'call.value()' allows for potential reentrancy because it sends Ether to an external address and does not check if the call was successful. If the receiving contract is malicious, it could call back into this contract before the state changes take effect, leading to potential fund misappropriation.",
            "potentialSecurityRisk": "An attacker could exploit this by executing a reentrant call back to the contract before the state variables are updated, thereby allowing them to withdraw funds multiple times, which could drain the contract's balance.",
            "fixedCode": "(bool success, ) = receiverAddr.call.value(amountInWei).gas(msg.gas.sub(5000))(); require(success, 'Transfer failed');"
        },
        {
            "vulnerableLines": "170-170",
            "vulnerableCode": [
                "msg.sender.transfer(amountToTransfer);"
            ],
            "vulnerabilityReason": "The 'transfer' function directly sends Ether without checking the success of the call immediately afterward or updating the state before making this call, which allows for reentrancy attacks if an attacker controls the recipient.",
            "potentialSecurityRisk": "A malicious contract could take advantage of this external call to make recursive calls to the 'withdraw' function before the sender's balance is updated, facilitating repeated withdrawals that lead to loss of funds.",
            "fixedCode": "uint amountToTransfer = c.balance; c.balance = 0; (bool success, ) = msg.sender.call.value(amountToTransfer)(''); require(success, 'Transfer failed');"
        },
        {
            "vulnerableLines": "178-178",
            "vulnerableCode": [
                "msg.sender.transfer(amountToTransfer);"
            ],
            "vulnerabilityReason": "Similar to the previous instance, the 'transfer' function is used without proper checks post-call or state updates before the call, allowing for potential reentrancy by an attacker.",
            "potentialSecurityRisk": "An attacker could exploit this by recursively calling this function before the balance is reset, thereby allowing multiple withdrawals resulting in loss of funds.",
            "fixedCode": "uint amountToTransfer = c.balance; c.balance = 0; (bool success, ) = msg.sender.call.value(amountToTransfer)(''); require(success, 'Transfer failed');"
        }
    ]
}