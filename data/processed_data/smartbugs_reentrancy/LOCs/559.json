{
    "vulnerabilities": [
        {
            "vulnerableLines": "314-319",
            "vulnerableCode": [
                "if(!userTempAddress[myid].send(userTempBetValue[myid])){",
                "    betStatus[myid] = 4;",
                "    userPendingWithdrawals[userTempAddress[myid]] = safeAdd(userPendingWithdrawals[userTempAddress[myid]], userTempBetValue[myid]);"
            ],
            "vulnerabilityReason": "The contract uses `send()` to transfer funds after updating the state. If the recipient is a malicious contract, they could re-enter this function and withdraw more funds before the state update is completed, leading to reentrancy.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability by triggering a reentrant call, allowing them to receive multiple payouts before the contract's state is updated, which may result in a loss of funds for the contract.",
            "fixedCode": "if (userTempBetValue[myid] > 0) { require(userTempBetValue[myid] <= address(this).balance, 'Insufficient contract balance.'); userPendingWithdrawals[userTempAddress[myid]] = safeAdd(userPendingWithdrawals[userTempAddress[myid]], userTempBetValue[myid]); (bool success, ) = userTempAddress[myid].call.value(userTempBetValue[myid])(''); require(success, 'Transfer failed.'); }"
        },
        {
            "vulnerableLines": "361-366",
            "vulnerableCode": [
                "if(!userTempAddress[myid].send(userTempReward[myid])){",
                "    betStatus[myid] = 2;",
                "    userPendingWithdrawals[userTempAddress[myid]] = safeAdd(userPendingWithdrawals[userTempAddress[myid]], userTempReward[myid]);"
            ],
            "vulnerabilityReason": "The contract attempts to send user rewards using `send()` without checking if the state has been updated prior. This approach could allow an attacker to manipulate the `userTempReward` value before the balance is updated, enabling multiple extractions of funds.",
            "potentialSecurityRisk": "If exploited, an attacker could gain multiple rewards by re-entering this function during the fund transfer, ultimately draining the contract's balance.",
            "fixedCode": "require(userTempReward[myid] <= address(this).balance, 'Insufficient contract balance.'); userPendingWithdrawals[userTempAddress[myid]] = safeAdd(userPendingWithdrawals[userTempAddress[myid]], userTempReward[myid]); (bool success, ) = userTempAddress[myid].call.value(userTempReward[myid])(''); require(success, 'Transfer failed.'); "
        },
        {
            "vulnerableLines": "427-427",
            "vulnerableCode": [
                "if (msg.sender.call.value(withdrawAmount)()) {"
            ],
            "vulnerabilityReason": "The function uses `call.value()` to send Ether. This call can lead to reentrancy attacks as the statement does not properly update the userâ€™s balance before attempting to send funds.",
            "potentialSecurityRisk": "An attacker could exploit this by executing a callback to withdraw funds before their balance is reset, potentially draining the entire contract's funds.",
            "fixedCode": "require(withdrawAmount <= address(this).balance, 'Insufficient contract balance.'); userPendingWithdrawals[msg.sender] = 0; (bool success, ) = msg.sender.call.value(withdrawAmount)(''); require(success, 'Transfer failed.'); "
        }
    ]
}