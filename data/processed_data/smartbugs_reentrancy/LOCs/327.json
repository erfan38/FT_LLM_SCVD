{
    "vulnerabilities": [
        {
            "vulnerableLines": "112-118",
            "vulnerableCode": [
                "function transfer(address _to, uint256 _value, bytes _data, bytes _custom_fallback) public returns (bool success) {",
                "    if(isContract(_to)) {",
                "        require(balanceOf(msg.sender) >= _value);",
                "        balances[msg.sender] = balanceOf(msg.sender).sub(_value);",
                "        balances[_to] = balanceOf(_to).add(_value);",
                "        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));",
                "        emit Transfer(msg.sender, _to, _value, _data);",
                "    }"
            ],
            "vulnerabilityReason": "The contract uses a low-level call to send a function call to the receiving contract before updating the state variables (balances). This allows a potential attacker to exploit the contract by recursively calling the transfer function before the state changes take effect, leading to multiple withdrawals of funds.",
            "potentialSecurityRisk": "An attacker could control the destination address and repeatedly call back into the contract during the external call, allowing them to drain funds from the contract without affecting their balance until after the external call completes.",
            "fixedCode": "function transfer(address _to, uint256 _value, bytes _data, bytes _custom_fallback) public returns (bool success) {\\n    if(isContract(_to)) {\\n        require(balanceOf(msg.sender) >= _value);\\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\\n        balances[_to] = balanceOf(_to).add(_value);\\n        // Make a local variable for success and check it immediately after the call\\n        (bool result, ) = _to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data);\\n        require(result); // Ensure the call was successful\\n        emit Transfer(msg.sender, _to, _value, _data);\\n        return true;\\n    }"
        }
    ]
}