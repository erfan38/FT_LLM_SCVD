{
    "vulnerabilities": [
        {
            "vulnerableLines": "109-115",
            "vulnerableCode": [
                "function transferToContractCustom(address _from, address _to, uint _value, bytes _data, string _custom_fallback) internal returns (bool success) {",
                "    if (balanceOf(_from) < _value) revert();",
                "    balances[_from] = safeSub(balanceOf(_from), _value);",
                "    balances[_to] = safeAdd(balanceOf(_to), _value);",
                "    assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback, _from, _value, _data)));",
                "    emit Transfer(_from, _to, _value, _data);"
            ],
            "vulnerabilityReason": "The function makes an external call to an unknown contract after changing the balances. This allows an attacker to execute a reentrant call before the `balances` state is finalized, which can enable fund theft after the balance deductions are made but before they take effect in the contract state.",
            "potentialSecurityRisk": "A malicious contract could implement a fallback function that calls back into `transferToContractCustom` before the state changes are complete, allowing it to withdraw funds multiple times before the initial balance is fully deducted, effectively draining the contract of its funds.",
            "fixedCode": "function transferToContractCustom(address _from, address _to, uint _value, bytes _data, string _custom_fallback) internal returns (bool success) { \n    if (balanceOf(_from) < _value) revert(); \n    balances[_from] = safeSub(balanceOf(_from), _value); \n    balances[_to] = safeAdd(balanceOf(_to), _value); \n    // Ensure that the balance updates are effective before making external calls \n    require(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback, _from, _value, _data)), \"External call failed\"); \n    emit Transfer(_from, _to, _value, _data); \n    return true; \n} "
        },
        {
            "vulnerableLines": "111-115",
            "vulnerableCode": [
                "    balances[_from] = safeSub(balanceOf(_from), _value);",
                "    balances[_to] = safeAdd(balanceOf(_to), _value);",
                "    assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback, _from, _value, _data)));",
                "    emit Transfer(_from, _to, _value, _data);"
            ],
            "vulnerabilityReason": "Making external calls after adjusting the balances can lead to inconsistent state. If the called address is a malicious contract, it could manipulate the contract state before the assertion completes, leading to potential hijacking of balance manipulation.",
            "potentialSecurityRisk": "An attacker can re-enter the function call and withdraw additional funds before the state changes are committed, which could effectively drain funds from the contract if it is not designed to mitigate reentry risks.",
            "fixedCode": "    // Implement Checks-Effects-Interactions pattern to mitigate risks \n    require(balances[_from] >= _value, \"Insufficient balance\"); \n    balances[_from] = safeSub(balances[_from], _value); \n    balances[_to] = safeAdd(balances[_to], _value); \n    require(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback, _from, _value, _data)), \"External call failed\"); \n    emit Transfer(_from, _to, _value, _data); "
        }
    ]
}