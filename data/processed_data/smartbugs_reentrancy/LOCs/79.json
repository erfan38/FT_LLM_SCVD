{
    "vulnerabilities": [
        {
            "vulnerableLines": "440-442",
            "vulnerableCode": [
                "            if (_eth > 0)",
                "                plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The external call to send Ether using `transfer` is made before updating the player's state, allowing a reentrant call to happen. If a malicious contract is in control of `plyr_[_pID].addr`, it can call the `withdraw` function again before the player's balance is updated, resulting in multiple withdrawals.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability by recursively calling the `withdraw` function before the state is updated, allowing them to drain the contract funds by withdrawing more than they are entitled to.",
            "fixedCode": "if (_eth > 0) {\n    require(address(this).balance >= _eth, \"Insufficient balance\");\n    plyr_[_pID].addr.transfer(_eth);\n}"
        }
    ]
}