{
    "vulnerabilities": [
        {
            "vulnerableLines": "589-592",
            "vulnerableCode": [
                "admin.transfer(_com);",
                "admin.transfer(_p3d.sub(_p3d / 2));",
                "round_[_rID].pot = _pot.add(_p3d / 2);"
            ],
            "vulnerabilityReason": "This code sends ether to the admin address using 'call.value()' before updating the contract's state with the new pot value. If an attacker can execute a contract that calls back into this function during these external transfers, they can exploit the state of the contract before it is updated.",
            "potentialSecurityRisk": "An attacker could re-enter the contract during the ether transfer, potentially withdrawing more funds than intended by exploiting the outdated state information, leading to a drain of contract funds.",
            "fixedCode": "uint256 potAmount = _p3d / 2; \nround_[_rID].pot = _pot.add(potAmount);\nadmin.transfer(_com);\nadmin.transfer(_p3d.sub(potAmount));"
        },
        {
            "vulnerableLines": "659-662",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);",
                "emit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);"
            ],
            "vulnerabilityReason": "Here, the contract transfers funds to the player before deducting from their balance in the state. An attacker could call back into the contract before the balance is updated, allowing for multiple withdrawals of the same funds.",
            "potentialSecurityRisk": "An exploited reentrancy could allow an attacker to withdraw funds repeatedly, draining the contract's balance by making recursive calls before the state reflects the withdrawal.",
            "fixedCode": "uint256 withdrawals = withdrawEarnings(_pID);\nif (withdrawals > 0) {\n    plyr_[_pID].addr.transfer(withdrawals);\n}\nemit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, withdrawals, _now);"
        }
    ]
}