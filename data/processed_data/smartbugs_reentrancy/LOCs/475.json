{
    "vulnerabilities": [
        {
            "vulnerableLines": "73-75",
            "vulnerableCode": [
                "    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);",
                "    if (!msg.sender.call.value(amount)()) throw;",
                "    emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);"
            ],
            "vulnerabilityReason": "The function decreases the user's balance before sending Ether through an external call. This means that during the call to `msg.sender`, a malicious actor could potentially call back into the contract and withdraw again, leading to multiple withdrawals before the state is updated.",
            "potentialSecurityRisk": "This could allow an attacker to drain the contract's Ether balance by withdrawing repeatedly without the balance reflecting actual withdrawals, as the balance is updated after the external call.",
            "fixedCode": "    require(tokens[0][msg.sender] >= amount, 'Insufficient balance');\n    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\n    (bool success,) = msg.sender.call.value(amount)();\n    require(success, 'Transfer failed');\n    emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);"
        },
        {
            "vulnerableLines": "89-91",
            "vulnerableCode": [
                "    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);",
                "    if (!Token(token).transfer(msg.sender, amount)) throw;",
                "    emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);"
            ],
            "vulnerabilityReason": "Similar to the withdraw function, this function changes the state by decreasing the user's token balance before making the external call to transfer the tokens. This exposes the contract to reentrancy attacks arising from malicious tokens that may call back into the contract during the transfer process.",
            "potentialSecurityRisk": "An attacker could exploit this by calling the `withdrawToken` function multiple times before the token balance is properly updated, draining the contract's tokens.",
            "fixedCode": "    require(tokens[token][msg.sender] >= amount, 'Insufficient balance');\n    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\n    require(Token(token).transfer(msg.sender, amount), 'Transfer failed');\n    emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);"
        }
    ]
}