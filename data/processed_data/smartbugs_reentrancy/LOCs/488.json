{
    "vulnerabilities": [
        {
            "vulnerableLines": "109-109",
            "vulnerableCode": [
                "require(FATHER.call.value(donation).gas(gasleft())());"
            ],
            "vulnerabilityReason": "The use of `call.value()` sends Ether to the `FATHER` address before updating the state variables. If the `FATHER` address is a malicious contract, it can re-enter the contract during the external call, allowing it to withdraw more funds before the state is updated.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to recursively withdraw funds, potentially draining the contract. The state change (updating `numInQueue`) occurs after the Ether is sent, so the attacker could manipulate the contract state before it reflects their withdrawal.",
            "fixedCode": "// Ensure that ether is sent successfully, and update the state before sending funds\nrequire(numInQueue[msg.sender] == 0, \"Only one deposit at a time!\");\nqueue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\nnumInQueue[msg.sender] = queue.length; \nuint donation = msg.value * FATHER_PERCENT / 100;\n// Set zero deposit for msg.sender before making external call\nrequire(FATHER.call.value(donation).gas(gasleft())(), \"Transfer to FATHER failed\");"
        },
        {
            "vulnerableLines": "139-139",
            "vulnerableCode": [
                "dep.depositor.send(dep.expect);"
            ],
            "vulnerabilityReason": "Using `.send()` here allows for a reentrancy attack because the funds are sent to the depositor without first updating the contractâ€™s state. If `dep.depositor` is a malicious contract with a fallback function, it could re-enter this function after receiving the ether and manipulate the state before the balance update occurs.",
            "potentialSecurityRisk": "An attacker could use this vulnerability to repeatedly call back into the `pay()` function, draining the contract's funds before the contract updates the queue and other state variables.",
            "fixedCode": "uint128 money = uint128(address(this).balance);\nfor(uint i=currentReceiverIndex; i<queue.length; i++){\n    Deposit storage dep = queue[i]; \n    if(money >= dep.expect){  \n        // Send funds to depositor only after ensuring no reentrant calls can manipulate state\n        dep.depositor.call.value(dep.expect)(); \n        money -= dep.expect;            \n        // Update states after sending funds\n        delete numInQueue[dep.depositor];\n        delete queue[i];\n    } else {\n        dep.depositor.call.value(money)();\n        dep.expect -= money;\n        break;\n    }\n} \ncurrentReceiverIndex = i;    \n"
        },
        {
            "vulnerableLines": "147-147",
            "vulnerableCode": [
                "dep.depositor.send(money);"
            ],
            "vulnerabilityReason": "Similar to the previous cases, this line uses `.send()` to transfer funds to the depositor without ensuring that the state has been updated. If a malicious contract is the depositor, it could re-enter and withdraw additional funds, resulting in a loss for the contract.",
            "potentialSecurityRisk": "If exploited, an attacker can drain the contract by exploiting the reentrancy feature before `currentReceiverIndex` is updated, allowing for unauthorized withdrawals.",
            "fixedCode": "uint128 money = uint128(address(this).balance);\n// Ensure all balances and states are updated before sending ether\nfor(uint i=currentReceiverIndex; i<queue.length; i++){\n    Deposit storage dep = queue[i]; \n    if(money >= dep.expect){\n       dep.depositor.call.value(dep.expect)();\n       money -= dep.expect;\n       // Update number of deposits in the queue only after the sending of ether\n       delete numInQueue[dep.depositor];\n       delete queue[i];\n    } else {\n       dep.depositor.call.value(money)();\n       dep.expect -= money;\n       break;\n    }\n}\ncurrentReceiverIndex = i;"
        }
    ]
}