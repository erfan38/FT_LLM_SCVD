{
    "vulnerabilities": [
        {
            "vulnerableLines": "235-237",
            "vulnerableCode": [
                "if(!giveEthCharityAddress.call.value(ethToPay).gas(400000)()) {",
                "totalEthCharityRecieved = SafeMath.sub(totalEthCharityRecieved, ethToPay);"
            ],
            "vulnerabilityReason": "The contract uses a low-level call to send Ether to a charity address, allowing a malicious contract to re-enter the function before the state is updated, leading to potential fund loss.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly drain funds from the contract by re-entering during the Ether transfer, potentially resulting in the depletion of funds meant for charity.",
            "fixedCode": "require(giveEthCharityAddress.call.value(ethToPay).gas(400000)(), 'Transfer failed');\ntotalEthCharityRecieved = SafeMath.add(totalEthCharityRecieved, ethToPay);"
        },
        {
            "vulnerableLines": "299-299",
            "vulnerableCode": [
                "_customerAddress.transfer(_dividends);"
            ],
            "vulnerabilityReason": "The contract transfers Ether to the customer before updating any state variables that track balances. This allows an attacker to execute a reentrant call to withdraw again before the balance update takes effect.",
            "potentialSecurityRisk": "An attacker could exploit this flaw by withdrawing their dividends multiple times before the contract accounts for the initial withdrawal, leading to an unbounded withdrawal and contract fund drain.",
            "fixedCode": "uint256 amountToWithdraw = _dividends;\n_dividends = 0;\n_customerAddress.transfer(amountToWithdraw);"
        },
        {
            "vulnerableLines": "343-343",
            "vulnerableCode": [
                "onTokenSell(_customerAddress, _tokens, _taxedEthereum);"
            ],
            "vulnerabilityReason": "The call to onTokenSell occurs after the Ether transfer, which could allow reentrancy if the token sell function is exploited in a malicious contract, enabling repeated calls and state inconsistencies.",
            "potentialSecurityRisk": "A malicious actor could call back into the contract to manipulate token balances or to trigger additional withdrawals before the contractâ€™s state is settled, leading to unauthorized fund transfers or loss of funds.",
            "fixedCode": "uint256 earnings = tokensToEthereum_(_tokens);\nuint256 dividends = SafeMath.div(SafeMath.mul(earnings, dividendFee_), 100);\nuint256 charityShare = SafeMath.div(SafeMath.mul(earnings, charityFee_), 100);\ntotalEthCharityCollected = SafeMath.add(totalEthCharityCollected, charityShare);\ntokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\ntokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\nif(tokenSupply_ > 0) {\n    profitPerShare_ = SafeMath.add(profitPerShare_, (dividends * magnitude) / tokenSupply_);\n}\n_payoutsTo[_customerAddress] -= (int256)(profitPerShare_ * _tokens);\n\tonTokenSell(_customerAddress, _tokens, earnings - dividends - charityShare);"
        }
    ]
}