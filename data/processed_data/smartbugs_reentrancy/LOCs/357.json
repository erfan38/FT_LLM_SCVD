{
    "vulnerabilities": [
        {
            "vulnerableLines": "94-99",
            "vulnerableCode": [
                "var operationHash = sha3(\"ETHER\", toAddress, value, data, expireTime, sequenceId);",
                "var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);",
                "if (!(toAddress.call.value(value)(data))) {"
            ],
            "vulnerabilityReason": "The call to `toAddress.call.value(value)(data)` occurs before any state updates are made, allowing a malicious actor to execute a recursive call back into `sendMultiSig` before the state changes, thereby exploiting the reentrancy vulnerability.",
            "potentialSecurityRisk": "An attacker could trigger multiple withdrawals in quick succession, draining the contract's funds before the original pending withdrawal is updated.",
            "fixedCode": "var operationHash = sha3(\"ETHER\", toAddress, value, data, expireTime, sequenceId);\nvar otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\nrequire(value <= address(this).balance, \"Insufficient contract balance.\"); // Ensure sufficient balance\nif (toAddress.call.value(value)(data)) {\n    Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);\n} else {\n    throw;\n}"
        },
        {
            "vulnerableLines": "85-89",
            "vulnerableCode": [
                "if (!(toAddress.call.value(value)(data))) {",
                "Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);"
            ],
            "vulnerabilityReason": "The external call to `toAddress` happens before the finalizing of state changes that would prevent further calls, making it vulnerable to multiple invocations by a malicious contract.",
            "potentialSecurityRisk": "Reentrancy could allow attackers to obtain more Ether than expected by making multiple recursive calls before the state of `playerPendingWithdrawals` is updated.",
            "fixedCode": "var operationHash = sha3(\"ETHER\", toAddress, value, data, expireTime, sequenceId);\nvar otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\nrequire(value <= address(this).balance, \"Insufficient contract balance.\"); // Check before sending\nif (toAddress.call.value(value)(data)) {\n    // Successful transfer, update states here\n    Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);\n} else {\n    throw;\n}"
        }
    ]
}