{
    "vulnerabilities": [
        {
            "vulnerableLines": "52-53",
            "vulnerableCode": [
                "if( isContract(_to) ) {",
                "    _to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data);"
            ],
            "vulnerabilityReason": "The use of `_to.call.value(0)(...)` allows for an external contract call without updating the state and emitting the transfer event first. This can lead to reentrancy where an attacker could recursively call `transfer`, exploiting the contract state before it is updated.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability by creating a malicious contract that calls the `transfer` function again before the initial transfer completes, allowing them to withdraw funds multiple times, potentially draining the contract's balance.",
            "fixedCode": "if( isContract(_to) ) {\n    // Perform checks or update state before calling the fallback function\n}\n// Emit Transfer event before making external calls\nTransfer(msg.sender, _to, _value, _data); \nif( isContract(_to) ) {\n    _to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data);\n}"
        }
    ]
}