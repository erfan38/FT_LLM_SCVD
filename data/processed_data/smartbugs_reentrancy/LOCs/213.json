{
    "vulnerabilities": [
        {
            "vulnerableLines": "70-80",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "This line makes an external call to `_to` using `call`, which allows the called contract to execute code at its fallback/receive function. If that contract operates maliciously, it could re-enter the current contract before the state variable `balances[msg.sender]` and `balances[_to]` are updated, leading to possible reentrancy exploits.",
            "potentialSecurityRisk": "An attacker could create a contract that, upon receiving Ether, calls back into `transfer`, allowing them to withdraw more tokens than they own, potentially draining the contract's funds.",
            "fixedCode": "// Ensure that balances are updated before the external call\nbalances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\nbalances[_to] = SafeMath.add(balances[_to], _value);\nTransfer(msg.sender, _to, _value, _data);\nTransfer(msg.sender, _to, _value);\n// Call the fallback function only after the state has been updated\nif (isContract(_to)) {\n    assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n}"
        },
        {
            "vulnerableLines": "286-286",
            "vulnerableCode": [
                "if (msg.value > 0) owner.transfer(msg.value);"
            ],
            "vulnerabilityReason": "The use of `owner.transfer(msg.value)` allows for the possibility of reentrancy attacks if the `owner` address is a contract that has a fallback function, leading to potential execution of code before the balance updates in this function complete.",
            "potentialSecurityRisk": "If the owner is a malicious contract, it could call back into `autoDistribute` or other functions before the state changes have fully taken effect, potentially causing fund manipulation or draining.",
            "fixedCode": "// Move the balance update before transferring to owner\ntotalAmount = msg.value; // Store the amount prior to the transfer.\nif (totalAmount > 0) {\n    balances[owner] = SafeMath.add(balances[owner], totalAmount);\n    owner.transfer(totalAmount);\n}"
        }
    ]
}