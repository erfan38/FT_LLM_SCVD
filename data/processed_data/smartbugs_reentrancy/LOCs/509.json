{
    "vulnerabilities": [
        {
            "vulnerableLines": "218-218",
            "vulnerableCode": [
                "if(!owner.send(etherValue))revert();"
            ],
            "vulnerabilityReason": "The external call to `send` occurs before any state changes are made, allowing an attacker to invoke the function multiple times in a reentrant fashion before the state is updated.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to repeatedly withdraw Ether before the contract's internal accounting correctly reflects the withdrawal, potentially draining the contract.",
            "fixedCode": "if (address(owner).balance >= etherValue) { require(owner.send(etherValue), \"Transfer failed\"); } else revert();"
        },
        {
            "vulnerableLines": "120-120",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The use of `call.value` performs an external call before updating the state, allowing an attacker to manipulate their balance if they re-enter this function during the external call.",
            "potentialSecurityRisk": "An attacker could exploit the call to re-enter the function, causing them to withdraw more funds than they should be allowed, draining the contract's funds entirely.",
            "fixedCode": "uint256 previousBalance = balances[msg.sender]; balances[msg.sender] = previousBalance.sub(_value); assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data)); balances[_to] = balances[_to].add(_value);"
        }
    ]
}