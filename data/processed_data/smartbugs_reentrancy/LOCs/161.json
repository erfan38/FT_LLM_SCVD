{
    "vulnerabilities": [
        {
            "vulnerableLines": "46-58",
            "vulnerableCode": [
                "flmContract.call.value(investment).gas(1000000)();",
                "participants[payoutOrder].payout -= payoutToSend;",
                "balance -= payoutToSend;",
                "if(!participants[payoutOrder].etherAddress.send(payoutToSend)){",
                "participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();",
                "payoutOrder += 1;"
            ],
            "vulnerabilityReason": "The payout() function uses call.value() to send Ether to participants[payoutOrder].etherAddress before updating participants[payoutOrder].payout. If an attacker designs their contract to receive Ether and invokes the fallback function, they can recursively call payout() and withdraw funds repeatedly before the state updates take effect.",
            "potentialSecurityRisk": "An attacker could exploit this reentrancy vulnerability by creating a malicious contract that accepts Ether, making it call back into the payout() function to withdraw more funds than allowed, effectively draining the contract's Ether balance without any limits or checks.",
            "fixedCode": "function payout() public {\n    uint balance = address(this).balance;\n    require(balance > 1);\n    uint investment = balance / 2;\n    balance -= investment;\n    flmContract.call.value(investment).gas(1000000)();\n\n    while (balance > 0) {\n        uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n        if(payoutToSend > 0){\n            // Update the state before sending Ether\n            participants[payoutOrder].payout -= payoutToSend;\n            balance -= payoutToSend;\n\n            // Use a pull payment mechanism or a require check instead\n            // (bool success, ) = participants[payoutOrder].etherAddress.call.value(payoutToSend)();\n            require(participants[payoutOrder].etherAddress.send(payoutToSend), \"Transfer failed\");\n        }\n        if(balance > 0){\n            payoutOrder += 1;\n        }\n    }\n}"
        }
    ]
}