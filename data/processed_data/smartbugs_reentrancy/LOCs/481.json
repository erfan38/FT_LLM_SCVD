{
    "vulnerabilities": [
        {
            "vulnerableLines": "118-118",
            "vulnerableCode": [
                "assert(_to.call.value(0)(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", msg.sender, _value, _data)));"
            ],
            "vulnerabilityReason": "The contract uses a low-level call to '_to' which can invoke any contract's fallback function that uses 'tokenFallback'. If the external contract is malicious and executes a call back to this contract before the balance update is final, it can lead to a reentrancy attack.",
            "potentialSecurityRisk": "An attacker could potentially exploit this reentrancy issue to withdraw more tokens than they are entitled to by repeatedly calling the 'tokenFallback' method during the execution of the transfer, jeopardizing the integrity of token balances.",
            "fixedCode": "// Update the state before the external call to prevent reentrancy\nbalances[msg.sender] = safeSub(balances[msg.sender], _value);\nbalances[_to] = safeAdd(balances[_to], _value);\nemit Transfer(msg.sender, _to, _value, _data);\nassert(_to.call.value(0)(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", msg.sender, _value, _data)));"
        },
        {
            "vulnerableLines": "129-129",
            "vulnerableCode": [
                "assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "Similar to the previous point, the use of a low-level call without ensuring that internal state changes are finalized before invoking the external call makes this function susceptible to reentrancy attacks.",
            "potentialSecurityRisk": "Malicious contracts can exploit this pattern by recursively re-entering into the transfer process, thereby permitting withdrawals that exceed their original allowances.",
            "fixedCode": "// Update the state before the external call to prevent reentrancy\nbalances[msg.sender] = safeSub(balances[msg.sender], _value);\nbalances[_to] = safeAdd(balances[_to], _value);\nemit Transfer(msg.sender, _to, _value, _data);\nassert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));"
        }
    ]
}