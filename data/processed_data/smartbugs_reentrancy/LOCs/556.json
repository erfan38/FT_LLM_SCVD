{
    "vulnerabilities": [
        {
            "vulnerableLines": "245-246",
            "vulnerableCode": [
                "require(d.token.transfer(receiver,tokenAmount));",
                "d.balanceRemaining = d.balanceRemaining.sub(tokenAmount);"
            ],
            "vulnerabilityReason": "The contract calls the external `transfer` function of the token before updating the state variable `d.balanceRemaining`, which causes a potential reentrancy attack if the receiver is a malicious contract that calls back into the `PresalePool` contract before the state is updated.",
            "potentialSecurityRisk": "An attacker could exploit this by implementing a fallback function in the token contract to call back into the `PresalePool` during or after the token transfer, allowing repeated withdrawals and draining the contract's funds.",
            "fixedCode": "d.balanceRemaining = d.balanceRemaining.sub(tokenAmount); // Update state first\nrequire(d.token.transfer(receiver,tokenAmount)); // Transfer tokens after updating state"
        },
        {
            "vulnerableLines": "348-348",
            "vulnerableCode": [
                "require (receiverAddress.call.value(amountInWei).gas(msg.gas.sub(5000))());"
            ],
            "vulnerabilityReason": "The contract calls `call.value()` to send Ether without checking whether the call was successful and does not update the contract's state before this call, which could lead to reentrancy if the `receiverAddress` is a malicious contract.",
            "potentialSecurityRisk": "If `receiverAddress` is a malicious contract that can recursively call back into the `PresalePool`, it could allow an attacker to pull funds multiple times before the state reflects the changes, ultimately resulting in a drain of the contract's balance.",
            "fixedCode": "(bool success, ) = receiverAddress.call.value(amountInWei).gas(msg.gas.sub(5000))(); // Use a local variable to check success\nrequire(success, \"Transfer failed\");"
        }
    ]
}