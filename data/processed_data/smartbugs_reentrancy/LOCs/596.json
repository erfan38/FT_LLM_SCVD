{
    "vulnerabilities": [
        {
            "vulnerableLines": "131-146",
            "vulnerableCode": [
                "            _eth = withdrawEarnings(_pID);",
                "            if (_eth > 0)",
                "                plyr_[_pID].addr.transfer(_eth);",
                "            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);",
                "            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;",
                "            emit RSEvents.onWithdrawAndDistribute",
                "            (",
                "                msg.sender,",
                "                plyr_[_pID].name,",
                "                _eth,",
                "                _eventData_.compressedData,",
                "                _eventData_.compressedIDs,",
                "                _eventData_.winnerAddr,",
                "                _eventData_.winnerName,",
                "                _eventData_.amountWon,",
                "                _eventData_.newPot,",
                "                _eventData_.genAmount",
                "            );"
            ],
            "vulnerabilityReason": "The order of operations allows for a transfer of funds to take place before updating the state. This means that if a malicious contract were to call the withdraw function, it could make recursive calls before the player's balance is set to zero.",
            "potentialSecurityRisk": "A malicious actor can exploit the reentrancy vulnerability by calling the withdraw function multiple times in rapid succession, draining the contract's funds.",
            "fixedCode": "uint256 _eth = withdrawEarnings(_pID);\nif (_eth > 0) {\n    plyr_[_pID].addr.transfer(_eth);\n}\n_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n_eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\nemit RSEvents.onWithdrawAndDistribute(msg.sender, plyr_[_pID].name, _eth, _eventData_.compressedData, _eventData_.compressedIDs,\n_eventData_.winnerAddr, _eventData_.winnerName, _eventData_.amountWon, _eventData_.newPot, _eventData_.genAmount);"
        },
        {
            "vulnerableLines": "217-228",
            "vulnerableCode": [
                "            _eth = withdrawEarnings(_pID);",
                "            if (_eth > 0)",
                "                plyr_[_pID].addr.transfer(_eth);",
                "            emit RSEvents.onBuyAndDistribute",
                "            (",
                "                msg.sender,",
                "                plyr_[_pID].name,",
                "                msg.value,",
                "                _eventData_.compressedData,",
                "                _eventData_.compressedIDs,",
                "                _eventData_.winnerAddr,",
                "                _eventData_.winnerName,",
                "                _eventData_.amountWon,",
                "                _eventData_.newPot,",
                "                _eventData_.genAmount",
                "            );"
            ],
            "vulnerabilityReason": "The function makes an external call to transfer funds without updating the player's state beforehand. This can be exploited to allow reentrance before state modifications take place.",
            "potentialSecurityRisk": "An attacker can repeatedly call buyCore during the external transfer, draining the contract by continuously withdrawing earnings before the state can be updated.",
            "fixedCode": "uint256 _eth = withdrawEarnings(_pID);\nif (_eth > 0) {\n    plyr_[_pID].addr.transfer(_eth);\n}\nemmit RSEvents.onBuyAndDistribute(msg.sender, plyr_[_pID].name, msg.value, _eventData_.compressedData, _eventData_.compressedIDs,\n_eventData_.winnerAddr, _eventData_.winnerName, _eventData_.amountWon, _eventData_.newPot, _eventData_.genAmount);"
        },
        {
            "vulnerableLines": "244-255",
            "vulnerableCode": [
                "            _eth = withdrawEarnings(_pID);",
                "            if (_eth > 0)",
                "                plyr_[_pID].addr.transfer(_eth);",
                "            emit RSEvents.onReLoadAndDistribute",
                "            (",
                "                msg.sender,",
                "                plyr_[_pID].name,",
                "                _eventData_.compressedData,",
                "                _eventData_.compressedIDs,",
                "                _eventData_.winnerAddr,",
                "                _eventData_.winnerName,",
                "                _eventData_.amountWon,",
                "                _eventData_.newPot,",
                "                _eventData_.genAmount",
                "            );"
            ],
            "vulnerabilityReason": "The external call to transfer funds occurs before the state change, allowing for potentially malicious reentrant calls before the player's balance resets.",
            "potentialSecurityRisk": "This can lead to an attacker exploiting the capability of draining contract balances through recursive calls before the state reflects any deductions.",
            "fixedCode": "uint256 _eth = withdrawEarnings(_pID);\nif (_eth > 0) {\n    plyr_[_pID].addr.transfer(_eth);\n}\nemit RSEvents.onReLoadAndDistribute(msg.sender, plyr_[_pID].name, _eventData_.compressedData, _eventData_.compressedIDs,\n_eventData_.winnerAddr, _eventData_.winnerName, _eventData_.amountWon, _eventData_.newPot, _eventData_.genAmount);"
        },
        {
            "vulnerableLines": "1031-1040",
            "vulnerableCode": [
                "        if (!address(TeamUnicorn).call.value(_com)(bytes4(keccak256(\"deposit()\"))))",
                "        {",
                "            _gen = _gen.add(_com);",
                "            _com = 0;",
                "        }"
            ],
            "vulnerabilityReason": "The usage of `call.value()` to send funds to another contract without ensuring safety can lead to vulnerabilities if that contract is malicious. An attacker could control the recipient contract's code execution.",
            "potentialSecurityRisk": "If the external contract is compromised, malicious behaviors can trigger further functions or reentrancy vulnerabilities, allowing for unauthorized fund withdrawals or other unforeseen actions.",
            "fixedCode": "require(address(TeamUnicorn).call.value(_com)(bytes4(keccak256(\"deposit()\"))), \"Transfer failed\");"
        }
    ]
}