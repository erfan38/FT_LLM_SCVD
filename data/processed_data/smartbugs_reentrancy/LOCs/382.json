{
    "vulnerabilities": [
        {
            "vulnerableLines": "49-49",
            "vulnerableCode": [
                "if (!founder.call.value(value)()) throw;"
            ],
            "vulnerabilityReason": "The contract uses call.value() to transfer Ether after state changes occur, which exposes it to reentrancy attacks. An attacker can exploit this by recursively calling the buyToken function before the function completes, allowing them to withdraw funds multiple times without the contract's state being updated correctly.",
            "potentialSecurityRisk": "This vulnerability allows an attacker to drain Ether from the contract by re-entering during the Ether transfer to the founder, leading to potential financial losses for the contract owner and investors.",
            "fixedCode": "uint256 initialBalance = balances[recipient]; // Store initial state before call\nif (!founder.call.value(value)()) throw; // Transfer Ether to the founder\n// Ensure the state updates are safe by using custom checks\nrequire(balances[recipient] == initialBalance + tokens, \"Invalid balance update\"); // Replace with state verification after transaction."
        },
        {
            "vulnerableLines": "64-64",
            "vulnerableCode": [
                "function changeFounder(address newFounder) {"
            ],
            "vulnerabilityReason": "The changeFounder function lacks access control, allowing any user to change the founder address if they know the function exists. This can lead to unauthorized changes and further exploit existing vulnerabilities in functions like buyToken.",
            "potentialSecurityRisk": "Without proper access control, a malicious user could change the founder to their address, allowing them to collect Ether intended for the actual founder and potentially draining the contract's funds.",
            "fixedCode": "function changeFounder(address newFounder) public onlyFounder { // Implement modifier to restrict access\n    founder = newFounder;\n} \n\nmodifier onlyFounder { // Only the current founder can change the address\n    require(msg.sender == founder);\n    _;\n}"
        }
    ]
}