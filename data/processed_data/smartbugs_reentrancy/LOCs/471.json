{
    "vulnerabilities": [
        {
            "vulnerableLines": "357-384",
            "vulnerableCode": [
                "uint256 _rID = rID_;",
                "uint256 _now = now;",
                "uint256 _pID = pIDxAddr_[msg.sender];",
                "if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)",
                "POOHMOXDatasets.EventReturns memory _eventData_;",
                "round_[_rID].ended = true;",
                "_eth = withdrawEarnings(_pID);",
                "if (_eth > 0)",
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The 'withdraw' function first transfers funds to the player's address before updating the earnings to zero. This allows for potential reentrant calls via a malicious contract during the fund transfer, leading to multiple withdrawals without the contract tracking the balance properly.",
            "potentialSecurityRisk": "An attacker can exploit reentrancy by invoking the 'withdraw' function repeatedly before the contract has time to reset earnings. This could allow them to drain all funds from the contract by continuously re-entering the function during each fund transfer.",
            "fixedCode": "uint256 _rID = rID_; \nuint256 _now = now; \nuint256 _pID = pIDxAddr_[msg.sender]; \nuint256 _eth = withdrawEarnings(_pID); /* Retrieve earnings first */ \nif (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0) {  \n    round_[_rID].ended = true; \n}\nif (_eth > 0) { \n    plyr_[_pID].addr.transfer(_eth); \n} "
        },
        {
            "vulnerableLines": "1112-1143",
            "vulnerableCode": [
                "function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, POOHMOXDatasets.EventReturns memory _eventData_)",
                "uint256 _dev = _eth / 100;",
                "if (!address(admin).call.value(_dev)()) {",
                "flushDivs.call.value(_POOH)(bytes4(keccak256(\"donate()\")));"
            ],
            "vulnerabilityReason": "The function makes a call to transfer funds to the admin without checking the success of the transaction. If this call fails, the state changes are not effectively handled, leading to a possibility of reentrant calls between the external call and the current context, risking fund loss.",
            "potentialSecurityRisk": "Should an attacker control the address that receives funds, they can create a malicious fallback to invoke re-entrancy before the distribution state is established. This can lead to significant financial losses for the contract.",
            "fixedCode": "function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, POOHMOXDatasets.EventReturns memory _eventData_) {\n    uint256 _dev = _eth / 100;\n    uint256 _POOH = 0;\n    require(address(admin).call.value(_dev)(\"\"), \"Transfer to admin failed\"); /* Ensure transfer succeeds */\n    flushDivs.call.value(_POOH)(bytes4(keccak256(\"donate()\")));\n}"
        },
        {
            "vulnerableLines": "1152-1157",
            "vulnerableCode": [
                "function potSwap()",
                "admin.transfer(msg.value);"
            ],
            "vulnerabilityReason": "The 'potSwap' function directly transfers Ether to the admin without updating any state or checking the success of the operation, creating a risk for reentrant calls.",
            "potentialSecurityRisk": "A malicious contract can exploit this function by re-entering and triggering multiple transfers before the completion of the previous call, leading to a potential loss of Ether from the contract.",
            "fixedCode": "function potSwap() external payable { /* Send to admin after ensuring no previous state manipulation */\n    require(msg.value > 0, \"Value must be greater than 0\");\n    admin.transfer(msg.value); /* Transfer is secure */\n}"
        },
        {
            "vulnerableLines": "407-408",
            "vulnerableCode": [
                "if(!sendTo.send(originalPlayerBetValue)) throw;"
            ],
            "vulnerabilityReason": "The use of 'send' does not enforce gas limits, and if a reentrant call is made, it allows attackers to re-enter before the contract updates its state, leading to potential fund theft.",
            "potentialSecurityRisk": "Should the external call not complete successfully, funds can be lost, and the state could allow an attacker to exploit the function's vulnerabilities, leading to unaccounted withdrawals.",
            "fixedCode": "require(sendTo.send(originalPlayerBetValue), \"Transfer failed\"); /* Check for transfer success */"
        }
    ]
}