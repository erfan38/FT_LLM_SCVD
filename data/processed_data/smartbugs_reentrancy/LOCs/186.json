{
    "vulnerabilities": [
        {
            "vulnerableLines": "32-33",
            "vulnerableCode": [
                "tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);",
                "if (!msg.sender.call.value(amount)()) throw;"
            ],
            "vulnerabilityReason": "The external call to `msg.sender.call.value(amount)()` is made before updating the balance in `tokens[0][msg.sender]`, allowing a malicious contract to re-enter the `withdraw` function before the state update occurs.",
            "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling the `withdraw` function during the external Ether transfer, draining the contract's funds before the balance is updated.",
            "fixedCode": "tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);  // Update balance first\nif (!msg.sender.call.value(amount)()) throw;  // External call after state update"
        },
        {
            "vulnerableLines": "48-49",
            "vulnerableCode": [
                "tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);",
                "if (!Token(token).transfer(msg.sender, amount)) throw;"
            ],
            "vulnerabilityReason": "Here, the external call to `Token(token).transfer(msg.sender, amount)` happens prior to the balance update in `tokens[token][msg.sender]`. This allows for a reentrancy attack to reset the balance only after the Ether transfer, creating a risk for attackers.",
            "potentialSecurityRisk": "An attacker could call back into the `withdrawToken` function leveraging reentrancy before the token balance is updated, potentially allowing them to drain tokens from the contract multiple times.",
            "fixedCode": "tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);  // Update balance first\nif (!Token(token).transfer(msg.sender, amount)) throw;  // External token transfer after state update"
        }
    ]
}