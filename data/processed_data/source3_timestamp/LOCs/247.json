{
    "vulnerabilities": [
        {
            "vulnerableLines": "33-33",
            "vulnerableCode": [
                "require(_start > block.timestamp);"
            ],
            "vulnerabilityReason": "The condition checks if the start time for the vesting period is in the future. Using block.timestamp introduces vulnerability since it can be manipulated by miners, who can set the timestamp just above the current time to fulfill the requirement.",
            "potentialSecurityRisk": "Miners could manipulate the timestamp to set a vesting start time that benefits them, potentially allowing them to alter the vesting schedule for their advantage.",
            "fixedCode": "require(_start > block.timestamp + 15 minutes); // Introduce a buffer to protect against timestamp manipulation"
        },
        {
            "vulnerableLines": "86-91",
            "vulnerableCode": [
                "if (block.timestamp < value.cliff) {",
                "  return 0;",
                "} else if (block.timestamp >= value.start.add(value.duration)) {",
                "  return totalBalance;",
                "} else {",
                "  return totalBalance.mul(block.timestamp.sub(value.start)).div(value.duration);"
            ],
            "vulnerabilityReason": "The calculations in this function rely heavily on block.timestamp to determine how many tokens a beneficiary is entitled to based on the vesting schedule. This introduces vulnerabilities as miners can adjust the timestamps to manipulate the vested amount.",
            "potentialSecurityRisk": "Manipulating the timestamp could allow miners to access tokens either ahead of time or delay their access, impacting fairness in token distribution and potentially leading to losses for legitimate investors.",
            "fixedCode": "if (block.timestamp + 15 minutes < value.cliff) { // Adding buffer to cliff check\n    return 0;\n} else if (block.timestamp >= value.start.add(value.duration) + 15 minutes) { // Adding buffer to duration check\n    return totalBalance;\n} else {\n    return totalBalance.mul((block.timestamp - value.start)).div(value.duration);\n} // Use a buffer on checks to prevent timestamp manipulation."
        }
    ]
}