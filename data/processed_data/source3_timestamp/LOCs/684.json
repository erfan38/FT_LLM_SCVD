{
    "vulnerabilities": [
        {
            "vulnerableLines": "42-42",
            "vulnerableCode": [
                "require(block.timestamp >= startTime && block.timestamp <= endTime);"
            ],
            "vulnerabilityReason": "Using block.timestamp in the preValidatePurchase function makes the contract dependent on the mining timestamp, which miners can manipulate within certain constraints.",
            "potentialSecurityRisk": "Miners could adjust block timestamp to benefit from the price differences between the discounted and the standard token price, leading to potential financial losses for other participants.",
            "fixedCode": "require(block.timestamp + TIME_TOLERANCE >= startTime && block.timestamp <= endTime); // Ensures a buffer using TIME_TOLERANCE."
        },
        {
            "vulnerableLines": "65-65",
            "vulnerableCode": [
                "require(_startTime >= block.timestamp);"
            ],
            "vulnerabilityReason": "This require statement relies on block.timestamp to check that the offering start time is in the future, which can be influenced by miner manipulation.",
            "potentialSecurityRisk": "If miners adjust the block timestamp slightly, they could manipulate the acceptable start time for offerings, potentially allowing early access to token purchases.",
            "fixedCode": "require(_startTime >= block.timestamp + TIME_TOLERANCE); // Adds a buffer to prevent timestamp manipulation."
        },
        {
            "vulnerableLines": "93-93",
            "vulnerableCode": [
                "require(_startTime >= block.timestamp);"
            ],
            "vulnerabilityReason": "Similar to the previous instance, this line strictly depends on the blockchain's timestamp, which is manipulatable by miners.",
            "potentialSecurityRisk": "Manipulations of the timestamp by miners could enable them to alter valid timelines for start times, giving them an unfair advantage in offering new tokens before others.",
            "fixedCode": "require(_startTime >= block.timestamp + TIME_TOLERANCE); // Adds a protective buffer to prevent miner manipulation."
        }
    ]
}