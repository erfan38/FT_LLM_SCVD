{
    "vulnerabilities": [
        {
            "vulnerableLines": "63-63",
            "vulnerableCode": [
                "require(block.timestamp > lockStartTime);"
            ],
            "vulnerabilityReason": "The use of block.timestamp in this require statement means that miners can alter this value, which could allow them to expedite or delay the token allocation process depending on whether they manipulate the timestamp just before the transaction is mined.",
            "potentialSecurityRisk": "If a miner manipulates the timestamp, they can prevent the token allocation from happening when it should, potentially affecting the fairness and timing of the allocation process.",
            "fixedCode": "require(block.timestamp > lockStartTime + TIME_TOLERANCE); // Using a tolerance period can help mitigate exact timestamp manipulation"
        },
        {
            "vulnerableLines": "93-93",
            "vulnerableCode": [
                "uint256 stage = (block.timestamp.sub(lockStartTime)).div(vestingMonths);"
            ],
            "vulnerabilityReason": "Calculating the vesting stage based on block.timestamp makes it vulnerable to manipulation by miners, similarly to the allocation function.",
            "potentialSecurityRisk": "Miners could manipulate the block timestamp to alter the vesting schedule, resulting in different unlock times for stakeholders, which could compromise the contract's intended vesting logic and create fairness issues.",
            "fixedCode": "uint256 stage = (block.timestamp.add(TIME_TOLERANCE).sub(lockStartTime)).div(vestingMonths); // Adding a tolerance before the calculation can help reduce the effectiveness of miner manipulation."
        }
    ]
}