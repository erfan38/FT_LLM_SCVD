{
    "vulnerabilities": [
        {
            "vulnerableLines": "6-6",
            "vulnerableCode": [
                "if( !(msg.sender.call.value(userBalance[msg.sender])()) ){ throw; }"
            ],
            "vulnerabilityReason": "The contract uses 'call.value(userBalance[msg.sender])()', which allows an external contract (the caller) to execute code before the user's balance is set to zero. This means if a malicious contract calls this function, it can re-enter before the user's balance is reset, allowing multiple withdrawals of the same funds.",
            "potentialSecurityRisk": "A malicious user could exploit this vulnerability by repeating calls through a fallback function, draining the contract's funds by withdrawing their balance multiple times before it is updated to zero.",
            "fixedCode": "// Update the user balance before transferring funds.\nuserBalance[msg.sender] = 0;  // Set balance to zero first.\nif( !(msg.sender.call.value(userBalance[msg.sender])()) ){ throw; } // Transfer funds after balance update."
        }
    ]
}