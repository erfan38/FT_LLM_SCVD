{
    "vulnerabilities": [
        {
            "vulnerableLines": "10-10",
            "vulnerableCode": [
                "require(msg.sender.call.value(_weiToWithdraw)());"
            ],
            "vulnerabilityReason": "The use of `call.value(_weiToWithdraw)()` directly sends Ether to `msg.sender` before the state change occurs. This means that if `msg.sender` is a contract, it can execute arbitrary code including calling back into `withdrawFunds`, leading to reentrancy attacks.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that, upon receiving Ether, calls back into the `withdrawFunds` function before the balance has been updated. This could allow the attacker to withdraw more funds than they are entitled to, draining the contract's balances.",
            "fixedCode": "// Deduct balance before sending Ether to prevent reentrancy\nbalances[msg.sender] -= _weiToWithdraw;\n// Ensure the transfer is successful\n(bool success, ) = msg.sender.call{value: _weiToWithdraw}('');\nrequire(success, 'Transfer failed');"
        }
    ]
}