{
    "vulnerabilities": [
        {
            "vulnerableLines": "10-10",
            "vulnerableCode": [
                "if (_addressToRefund.call.value(amount)()) {"
            ],
            "vulnerabilityReason": "The contract uses `_addressToRefund.call.value(amount)()`, allowing an external contract to receive Ether. If the external contract has fallback logic, it could call back into the `calcRefund` function before the balance is updated, leading to reentrancy exploitation.",
            "potentialSecurityRisk": "An attacker could deploy a malicious contract that, upon receiving funds, calls back into `calcRefund` repeatedly, allowing them to withdraw more than their current balance, potentially draining the contract's balance entirely.",
            "fixedCode": "// Before making the external call, update the balance\nbalanceOf[_addressToRefund] = 0;\n\n// Transfer the amount after the state change\n(bool success, ) = _addressToRefund.call.value(amount)();\nrequire(success, 'Transfer failed');"
        }
    ]
}