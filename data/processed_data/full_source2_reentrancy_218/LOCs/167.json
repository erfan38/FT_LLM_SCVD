{
    "vulnerabilities": [
        {
            "vulnerableLines": "8-8",
            "vulnerableCode": [
                "if (!(msg.sender.call.value(userBalances[msg.sender])())) { throw; }"
            ],
            "vulnerabilityReason": "The function uses `call.value(userBalances[msg.sender])()`, which allows reentrancy if the address of the `msg.sender` is a contract. This means that the receiving contract can execute its fallback function, potentially calling this function again before the user balance is set to zero, thus allowing multiple withdrawals.",
            "potentialSecurityRisk": "An attacker could create a malicious contract to exploit this vulnerability, allowing them to withdraw more funds than they are legitimately owed by repeatedly triggering the `withdrawBalance` function, draining the contract's balance.",
            "fixedCode": "require(userBalances[msg.sender] > 0, 'No balance to withdraw');\nuint amount = userBalances[msg.sender];\nuserBalances[msg.sender] = 0; // Update state before making external call\n(bool success, ) = msg.sender.call.value(amount)();\nrequire(success, 'Transfer failed');"
        }
    ]
}