{
    "vulnerabilities": [
        {
            "vulnerableLines": "199-199",
            "vulnerableCode": [
                "require(timestamp >= 1546300801);"
            ],
            "vulnerabilityReason": "The use of block.timestamp to enforce a time constraint means that miners can manipulate the effective time in order to influence the execution of this function, allowing them to unfreeze the funds earlier than intended.",
            "potentialSecurityRisk": "If a miner sets the block timestamp to a value equal to or greater than 1546300801, they can bypass the requirement, potentially accessing funds before the intended unlocking time.",
            "fixedCode": "require(block.timestamp >= 1546300801 + TIME_TOLERANCE); // Adds a tolerance buffer to the timestamp check."
        },
        {
            "vulnerableLines": "201-201",
            "vulnerableCode": [
                "if (timestamp < 1577836801) {"
            ],
            "vulnerabilityReason": "This condition checks the block timestamp against a hardcoded value that reflects a specific point in time, which can be manipulated by miners with current block timestamps within a minor range.",
            "potentialSecurityRisk": "Miners could adjust the timestamp to either trigger or bypass the logic in this condition, impacting the ability to unfreeze specific funds, effectively affecting the token distribution.",
            "fixedCode": "if (block.timestamp < 1577836801 + TIME_TOLERANCE) { // Includes a tolerance to mitigate minor manipulation."
        },
        {
            "vulnerableLines": "229-229",
            "vulnerableCode": [
                "fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801];"
            ],
            "vulnerabilityReason": "Accessing balances tied to a specific block timestamp creates a vulnerability, as a miner could shift the timestamp before execution, allowing them to access or modify funds without authorization.",
            "potentialSecurityRisk": "This allows for potential exploitation where miners can manipulate access to balances by adjusting the timestamp to get unauthorized balances unblocked.",
            "fixedCode": "fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801]; // Consider using block.number instead or checks with tolerance."
        },
        {
            "vulnerableLines": "235-235",
            "vulnerableCode": [
                "fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201];"
            ],
            "vulnerabilityReason": "Similar to the previous lines, accessing balances based on a specific timestamp introduces risk as miner manipulation leads to determining access to funds contrary to the intended logic.",
            "potentialSecurityRisk": "This accessibility allows for funds to be frozen or unblocked inappropriately, either leading to unauthorized access or funds locked indefinitely due to miner behavior.",
            "fixedCode": "fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201]; // The use of block.number instead could help mitigate timestamp manipulation."
        }
    ]
}