{
    "vulnerabilities": [
        {
            "vulnerableLines": "79-84",
            "vulnerableCode": [
                "if (block.timestamp < cliff) {",
                "  return 0;",
                "} else if (block.timestamp >= start.add(duration) || revoked[token]) {",
                "  return totalBalance;",
                "} else {",
                "  return totalBalance.mul(block.timestamp.sub(start)).div(duration);"
            ],
            "vulnerabilityReason": "The function 'vestedAmount' in the TokenVesting contract relies on 'block.timestamp' for its calculations. This introduces a timestamp dependency vulnerability, where miners can manipulate the timestamp to impact how many tokens are considered vested and when they can be released, allowing them to trigger earlier releases or unfairly alter the vesting schedule.",
            "potentialSecurityRisk": "Miners could adjust the block timestamp to gain an advantage by manipulating the release timing of tokens, which could undermine the contract's intended vesting schedule and financial arrangements, potentially leading to losses for the token holders and a lack of trust in the contract's fairness.",
            "fixedCode": "if (block.timestamp < cliff) {\n  return 0;\n} else if (block.timestamp >= start.add(duration) || revoked[token]) {\n  return totalBalance;\n} else {\n  uint256 elapsedTime = block.timestamp > cliff ? block.timestamp.sub(start) : 0;\n  return totalBalance.mul(elapsedTime).div(duration);\n} // Protect against potential timestamp manipulation by avoiding using block.timestamp directly without checks."
        }
    ]
}