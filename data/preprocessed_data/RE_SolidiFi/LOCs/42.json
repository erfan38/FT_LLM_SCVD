[
    {
        "vulnerableLines": "6-11",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the lastPlayer and jackpot, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the lastPlayer and jackpot are updated, potentially draining the prize funds.",
        "fixedCode": "function buyTicket() public { address payable currentLastPlayer = lastPlayer; uint currentJackpot = jackpot; lastPlayer = msg.sender; jackpot = address(this).balance; if (!currentLastPlayer.send(currentJackpot)) { revert(); } }",
        "vulnerableCode": [
            "      function buyTicket() public{ // changed from buyTicket_re_ent2",
            "        if (!(lastPlayer.send(jackpot)))",
            "        revert();",
            "      lastPlayer = msg.sender;",
            "      jackpot    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "14-19",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating the user's balance, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the balance update, potentially draining the contract's funds.",
        "fixedCode": "function withdrawFunds(uint256 _weiToWithdraw) public { require(balances[msg.sender] >= _weiToWithdraw); balances[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(''); require(success); }",
        "vulnerableCode": [
            "function withdrawFunds (uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent17",
            "        require(balances[msg.sender] >= _weiToWithdraw);",
            "        (bool success,)=msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances[msg.sender] -= _weiToWithdraw;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "22-29",
        "vulnerabilityReason": "The function uses send to transfer ether before updating the notCalled variable, making it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function before the notCalled variable is updated, potentially draining the contract's balance.",
        "fixedCode": "function performCheck() public { require(notCalled); notCalled = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "  bool notCalled = true; // changed from not_called_re_ent27",
            "function performCheck() public{ // changed from bug_re_ent27",
            "        require(notCalled);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        notCalled = false;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "36-41",
        "vulnerabilityReason": "The function calls transfer to send ether before updating the user's redeemableEther balance, exposing the contract to reentrancy.",
        "potentialSecurityRisk": "An attacker could call this function repeatedly before the redeemableEther balance is updated, allowing them to drain funds.",
        "fixedCode": "function claimReward() public { require(redeemableEther[msg.sender] > 0); uint transferValue = redeemableEther[msg.sender]; redeemableEther[msg.sender] = 0; msg.sender.transfer(transferValue); }",
        "vulnerableCode": [
            "function claimReward() public { // changed from claimReward_re_ent32",
            "        require(redeemableEther[msg.sender] > 0);",
            "        uint transferValue = redeemableEther[msg.sender]; // changed from transferValue_re_ent32",
            "        msg.sender.transfer(transferValue);   ",
            "        redeemableEther[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "52-55",
        "vulnerabilityReason": "Funds are sent to the user before the balance is deducted, allowing for potential reentrancy.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function to withdraw more ether than their balance, depleting the contract\u2019s funds.",
        "fixedCode": "function withdrawFunds2(uint256 _weiToWithdraw) public { require(balances2[msg.sender] >= _weiToWithdraw); balances2[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "function withdrawFunds2 (uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent38",
            "        require(balances2[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances2[msg.sender] -= _weiToWithdraw;"
        ]
    },
    {
        "vulnerableLines": "94-99",
        "vulnerabilityReason": "The call to transfer funds occurs before the user's redeemableEther balance is reset, allowing reentrancy.",
        "potentialSecurityRisk": "An attacker can exploit this to repeatedly claim rewards, depleting the contract's balance.",
        "fixedCode": "function claimReward2() public { require(redeemableEther2[msg.sender] > 0); uint transferValue2 = redeemableEther2[msg.sender]; redeemableEther2[msg.sender] = 0; msg.sender.transfer(transferValue2); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther2; // changed from redeemableEther_re_ent4",
            "function claimReward2() public { // changed from claimReward_re_ent4",
            "        require(redeemableEther2[msg.sender] > 0);",
            "        uint transferValue2 = redeemableEther2[msg.sender]; // changed from transferValue_re_ent4",
            "        msg.sender.transfer(transferValue2);   ",
            "        redeemableEther2[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "103-109",
        "vulnerabilityReason": "Potential reentrancy due to sending funds before updating the counter, enabling repeated invocations.",
        "potentialSecurityRisk": "Attackers may drain the contract of funds before the limit is enforced, exploiting race conditions.",
        "fixedCode": "function checkCallCount() public { require(counter <= 5); counter += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "function checkCallCount() public{ // changed from callme_re_ent7",
            "        require(counter<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter += 1;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "113-118",
        "vulnerabilityReason": "The function uses send to transfer the jackpot amount before updating the lastPlayer2, allowing reentrant calls.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function before the lastPlayer2 is updated, potentially draining the prize funds.",
        "fixedCode": "function buyTicket2() public { address payable currentLastPlayer2 = lastPlayer2; uint currentJackpot2 = jackpot2; lastPlayer2 = msg.sender; jackpot2 = address(this).balance; if (!currentLastPlayer2.send(currentJackpot2)) { revert(); } }",
        "vulnerableCode": [
            "      function buyTicket2() public{ // changed from buyTicket_re_ent23",
            "        if (!(lastPlayer2.send(jackpot2)))",
            "        revert();",
            "      lastPlayer2 = msg.sender;",
            "      jackpot2    = address(this).balance;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "124-128",
        "vulnerabilityReason": "The function uses `send` to transfer the jackpot amount before updating `lastPlayer3`. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could repeatedly call this function to drain funds associated with the jackpot as `lastPlayer3` is not updated before sending ether.",
        "fixedCode": "function buyTicket3() public { address payable previousPlayer = lastPlayer3; uint previousJackpot = jackpot3; lastPlayer3 = msg.sender; jackpot3 = address(this).balance; if (!previousPlayer.send(previousJackpot)) { revert(); } }",
        "vulnerableCode": [
            "      function buyTicket3() public{ // changed from buyTicket_re_ent37",
            "        if (!(lastPlayer3.send(jackpot3)))",
            "        revert();",
            "      lastPlayer3 = msg.sender;",
            "      jackpot3    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "132-136",
        "vulnerabilityReason": "Funds are sent using `call.value` before the user balance is deducted, allowing for potential reentrant execution.",
        "potentialSecurityRisk": "An attacker could reenter the function before the balances are updated, leading to an unauthorized withdrawal of additional funds.",
        "fixedCode": "function withdrawFunds3(uint256 _weiToWithdraw) public { require(balances3[msg.sender] >= _weiToWithdraw); balances3[msg.sender] -= _weiToWithdraw; (bool success,) = msg.sender.call.value(_weiToWithdraw)(\"\"); require(success); }",
        "vulnerableCode": [
            "function withdrawFunds3 (uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent3",
            "        require(balances3[msg.sender] >= _weiToWithdraw);",
            "    (bool success,)= msg.sender.call.value(_weiToWithdraw)(\"\");",
            "        require(success);  ",
            "        balances3[msg.sender] -= _weiToWithdraw;"
        ]
    },
    {
        "vulnerableLines": "141-146",
        "vulnerabilityReason": "The function sends funds using `call.value` before updating `lastPlayer4`, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "A malicious contract could reenter and call this function repeatedly, draining the contract's funds.",
        "fixedCode": "function buyTicket4() public { address payable previousPlayer = lastPlayer4; uint previousJackpot = jackpot4; lastPlayer4 = msg.sender; jackpot4 = address(this).balance; (bool success,) = previousPlayer.call.value(previousJackpot)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "      function buyTicket4() public{ // changed from buyTicket_re_ent9",
            "        (bool success,) = lastPlayer4.call.value(jackpot4)(\"\");",
            "        if (!success)",
            "            revert();",
            "      lastPlayer4 = msg.sender;",
            "      jackpot4    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "150-154",
        "vulnerabilityReason": "Sent funds using `transfer` call before updating the balance of the user, which makes it vulnerable to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker can reenter during the `transfer` call and withdraw more than their entitled balance, draining contract funds.",
        "fixedCode": "function claimReward3() public { require(redeemableEther3[msg.sender] > 0); uint transferValue3 = redeemableEther3[msg.sender]; redeemableEther3[msg.sender] = 0; msg.sender.transfer(transferValue3); }",
        "vulnerableCode": [
            "function claimReward3() public { // changed from claimReward_re_ent25",
            "        require(redeemableEther3[msg.sender] > 0);",
            "        uint transferValue3 = redeemableEther3[msg.sender]; // changed from transferValue_re_ent25",
            "        msg.sender.transfer(transferValue3);   ",
            "        redeemableEther3[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "159-163",
        "vulnerabilityReason": "The function sends funds using `send` before resetting the user balance, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter this function multiple times, withdrawing more funds than they are entitled to, draining the contract balance.",
        "fixedCode": "function withdrawBalance2() public { uint balance = userBalance2[msg.sender]; userBalance2[msg.sender] = 0; if (!msg.sender.send(balance)) { revert(); } }",
        "vulnerableCode": [
            "function withdrawBalance2() public{ // changed from withdrawBalance_re_ent19",
            "        if( ! (msg.sender.send(userBalance2[msg.sender]) ) ){",
            "            revert();",
            "        }",
            "        userBalance2[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "167-172",
        "vulnerabilityReason": "Funds are sent using `call.value` before resetting the user's balance, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could exploit this to withdraw repeatedly, siphoning funds away from the contract.",
        "fixedCode": "function withdrawBalance3() public { uint balance = userBalance3[msg.sender]; userBalance3[msg.sender] = 0; (bool success,) = msg.sender.call.value(balance)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "function withdrawBalance3() public{ // changed from withdrawBalance_re_ent26",
            "        (bool success,)= msg.sender.call.value(userBalance3[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance3[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "176-179",
        "vulnerabilityReason": "Funds are sent using `send` before deducting the user's balance, exposing the contract to reentrancy attacks.",
        "potentialSecurityRisk": "An attacker could exploit reentrancy to repeatedly withdraw funds before their balance is updated, potentially draining the contract.",
        "fixedCode": "function withdrawFunds4(uint256 _weiToWithdraw) public { require(balances4[msg.sender] >= _weiToWithdraw); balances4[msg.sender] -= _weiToWithdraw; require(msg.sender.send(_weiToWithdraw)); }",
        "vulnerableCode": [
            "function withdrawFunds4 (uint256 _weiToWithdraw) public { // changed from withdrawFunds_re_ent31",
            "        require(balances4[msg.sender] >= _weiToWithdraw);",
            "        require(msg.sender.send(_weiToWithdraw));  ",
            "        balances4[msg.sender] -= _weiToWithdraw;"
        ]
    },
    {
        "vulnerableLines": "183-189",
        "vulnerabilityReason": "The function uses `call.value` before updating the `notCalled2` variable, allowing for potential reentrant calls.",
        "potentialSecurityRisk": "An attacker could repeatedly call this function, siphoning ether from the contract before `notCalled2` is set to false.",
        "fixedCode": "function performCheck2() public { require(notCalled2); notCalled2 = false; (bool success,) = msg.sender.call.value(1 ether)(\"\"); if (!success) { revert(); } }",
        "vulnerableCode": [
            "function performCheck2() public{ // changed from bug_re_ent13",
            "        require(notCalled2);",
            "        (bool success,)=msg.sender.call.value(1 ether)(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        notCalled2 = false;"
        ]
    },
    {
        "vulnerableLines": "199-204",
        "vulnerabilityReason": "Funds are sent using `send` before setting the `notCalled3` variable, making it susceptible to reentrant attacks.",
        "potentialSecurityRisk": "This could be exploited by attackers to execute multiple withdrawals before state change, draining contract funds.",
        "fixedCode": "function performCheck3() public { require(notCalled3); notCalled3 = false; if (!msg.sender.send(1 ether)) { revert(); } }",
        "vulnerableCode": [
            "function performCheck3() public{ // changed from bug_re_ent20",
            "        require(notCalled3);",
            "        if( ! (msg.sender.send(1 ether) ) ){",
            "            revert();",
            "        }",
            "        notCalled3 = false;"
        ]
    },
    {
        "vulnerableLines": "215-220",
        "vulnerabilityReason": "The function uses `send` to transfer ether before updating the counter, allowing for reentrant calls to this function.",
        "potentialSecurityRisk": "An attacker could exploit this to repeatedly withdraw ether beyond intended limits, exhausting the balance of the contract.",
        "fixedCode": "function checkCallCount2() public { require(counter2 <= 5); counter2 += 1; if (!msg.sender.send(10 ether)) { revert(); } }",
        "vulnerableCode": [
            "function checkCallCount2() public{ // changed from callme_re_ent14",
            "        require(counter2<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter2 += 1;"
        ]
    },
    {
        "vulnerableLines": "232-236",
        "vulnerabilityReason": "The function uses `send` to transfer the jackpot amount before updating `lastPlayer5`. This allows a reentrant call to execute again before state changes.",
        "potentialSecurityRisk": "A malicious contract could reenter and call this function repeatedly, draining the contract's funds.",
        "fixedCode": "function buyTicket5() public { address payable previousPlayer = lastPlayer5; uint previousJackpot = jackpot5; lastPlayer5 = msg.sender; jackpot5 = address(this).balance; if (!previousPlayer.send(previousJackpot)) { revert(); } }",
        "vulnerableCode": [
            "      function buyTicket5() public{ // changed from buyTicket_re_ent30",
            "        if (!(lastPlayer5.send(jackpot5)))",
            "        revert();",
            "      lastPlayer5 = msg.sender;",
            "      jackpot5    = address(this).balance;"
        ]
    },
    {
        "vulnerableLines": "249-253",
        "vulnerabilityReason": "The function uses call.value to transfer funds before the user's balance is reset, allowing for reentrancy.",
        "potentialSecurityRisk": "An attacker could reenter the function and exploit the contract by withdrawing more than their balance.",
        "fixedCode": "function withdrawFunds5() public { uint amount = balances5[msg.sender]; balances5[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if (!success) { balances5[msg.sender] = amount; } }",
        "vulnerableCode": [
            "mapping(address => uint) balances5; // changed from balances_re_ent8",
            "    function withdrawFunds5() public { // changed from withdraw_balances_re_ent8",
            "       (bool success,) = msg.sender.call.value(balances5[msg.sender])(\"\");",
            "       if (success)",
            "          balances5[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "259-265",
        "vulnerabilityReason": "The function transfers funds before the user's balance is reset, making it vulnerable to reentrancy.",
        "potentialSecurityRisk": "Malicious actors could repeatedly call this function, draining more ether than their stored balance.",
        "fixedCode": "function claimReward4() public { require(redeemableEther4[msg.sender] > 0); uint transferValue4 = redeemableEther4[msg.sender]; redeemableEther4[msg.sender] = 0; msg.sender.transfer(transferValue4); }",
        "vulnerableCode": [
            "mapping(address => uint) redeemableEther4; // changed from redeemableEther_re_ent39",
            "function claimReward4() public { // changed from claimReward_re_ent39 ",
            "        require(redeemableEther4[msg.sender] > 0);",
            "        uint transferValue4 = redeemableEther4[msg.sender]; // changed from transferValue_re_ent39",
            "        msg.sender.transfer(transferValue4);   ",
            "        redeemableEther4[msg.sender] = 0;",
            "    }"
        ]
    },
    {
        "vulnerableLines": "270-274",
        "vulnerabilityReason": "Ether is sent to the user before resetting the balance, leading to potential reentrance vulnerability.",
        "potentialSecurityRisk": "Intending steps after fund transfer may be executed multiple times by attackers, leveraging repeated calls before disallowed.",
        "fixedCode": "function withdrawFunds6() public { uint amount = balances6[msg.sender]; if (msg.sender.send(amount)) { balances6[msg.sender] = 0; } else { balances6[msg.sender] = amount; } }",
        "vulnerableCode": [
            "mapping(address => uint) balances6; // changed from balances_re_ent36",
            "    function withdrawFunds6() public { // changed from withdraw_balances_re_ent36",
            "       if (msg.sender.send(balances6[msg.sender ]))",
            "          balances6[msg.sender] = 0;",
            "      }"
        ]
    },
    {
        "vulnerableLines": "280-286",
        "vulnerabilityReason": "The function sends ether before incrementing the counter, exposing it to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can exploit this by calling function multiple times beyond intended counter limit, draining contract funds.",
        "fixedCode": "function checkCallCount3() public { require(counter3 <= 5); counter3 += 1; if (!(msg.sender.send(10 ether))) { counter3 -= 1; revert(); } }",
        "vulnerableCode": [
            "uint256 counter3 =0; // changed from counter_re_ent35",
            "function checkCallCount3() public{ // changed from callme_re_ent35",
            "        require(counter3<=5);",
            "    if( ! (msg.sender.send(10 ether) ) ){",
            "            revert();",
            "        }",
            "        counter3 += 1;"
        ]
    },
    {
        "vulnerableLines": "292-298",
        "vulnerabilityReason": "The function uses call.value to transfer funds before updating user's balance, leading to potential reentrance vulnerability.",
        "potentialSecurityRisk": "An attacker could exploit this by repeatedly calling function reentrantly, draining balance more than stored.",
        "fixedCode": "function withdrawBalance4() public { uint amount = userBalance4[msg.sender]; userBalance4[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance4[msg.sender] = amount; } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance4; // changed from userBalance_re_ent40",
            "function withdrawBalance4() public{ // changed from withdrawBalance_re_ent40",
            "        (bool success,)=msg.sender.call.value(userBalance4[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance4[msg.sender] = 0;"
        ]
    },
    {
        "vulnerableLines": "306-312",
        "vulnerabilityReason": "The function sends funds before resetting the balance, making it susceptible to reentrancy attacks.",
        "potentialSecurityRisk": "Attackers can exploit this inconsistency by calling function multiple times, draining the balance more than available.",
        "fixedCode": "function withdrawBalance5() public { uint amount = userBalance5[msg.sender]; userBalance5[msg.sender] = 0; (bool success, ) = msg.sender.call.value(amount)(\"\"); if (!success) { userBalance5[msg.sender] = amount; } }",
        "vulnerableCode": [
            "mapping(address => uint) userBalance5; // changed from userBalance_re_ent33",
            "function withdrawBalance5() public{ // changed from withdrawBalance_re_ent33",
            "        (bool success,)= msg.sender.call.value(userBalance5[msg.sender])(\"\");",
            "        if( ! success ){",
            "            revert();",
            "        }",
            "        userBalance5[msg.sender] = 0;"
        ]
    }
]