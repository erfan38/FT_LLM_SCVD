{
    "vulnerabilities": [
        {
            "vulnerableLines": "103-103",
            "vulnerableCode": [
                "uint      public nextUnLockTime = block.timestamp + ONE_YEAR_TIME_LEN;"
            ],
            "vulnerabilityReason": "Using block.timestamp directly to initialize nextUnLockTime introduces vulnerability to timestamp manipulation. Miners have the ability to adjust the block timestamp, potentially leading to premature fund unlocks.",
            "potentialSecurityRisk": "A malicious miner could manipulate the block.timestamp to make the fund unlock condition true sooner than expected, allowing unauthorized access to funds that should remain locked for a longer period.",
            "fixedCode": "uint      public nextUnLockTime = now + ONE_YEAR_TIME_LEN; // Use now instead, potentially with a time tolerance to allow more flexibility."
        },
        {
            "vulnerableLines": "122-127",
            "vulnerableCode": [
                "while(unLockIdx > 0 && block.timestamp >= nextUnLockTime){",
                "uint256 append = creatorsLocked/unLockIdx;",
                "creatorsLocked -= append;",
                "unLockIdx -= 1;",
                "nextUnLockTime = block.timestamp + ONE_YEAR_TIME_LEN;"
            ],
            "vulnerabilityReason": "This loop uses block.timestamp to check if the funds can be unlocked. As miners can manipulate timestamp, they can exploit this function to unlock funds repeatedly before the intended time has passed.",
            "potentialSecurityRisk": "If exploited by a malicious miner, they could allow for quicker than intended fund releases, violating the intended lock period. This would lead to financial losses for the deploying entity or beneficiaries reliant on the contract's integrity.",
            "fixedCode": "while(unLockIdx > 0 && now >= nextUnLockTime) { nextUnLockTime = now + ONE_YEAR_TIME_LEN; // use now with a time tolerance to increase robustness."
        }
    ]
}