{
    "vulnerabilities": [
        {
            "vulnerableLines": "44-44",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The line uses a low-level call to invoke a fallback function on the recipient contract after updating the balances. This allows a malicious contract to execute a callback before the transfer is fully completed, potentially invoking the transfer function again with changed parameters.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by introducing recursive calls, leading to multiple calls to transfer before the initial balance update is complete. This could allow an attacker to withdraw more funds than they are entitled to, effectively draining the contract's balance.",
            "fixedCode": "// Using the Checks-Effects-Interactions pattern.\n        emit Transfer(msg.sender, _to, _value, _data);\n        require(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data)); // External call after state has been ensured."
        }
    ]
}