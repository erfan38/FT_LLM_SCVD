{
    "vulnerabilities": [
        {
            "vulnerableLines": "105-105",
            "vulnerableCode": [
                "require(_bankroller.call.value(_amount)(_sig));"
            ],
            "vulnerabilityReason": "The use of 'call.value()' allows the external contract to run and potentially call back into the Bankrollable contract before the current transaction finishes. This creates an exploit risk where a malicious contract can re-enter `removeBankroll()` before the state is updated, leading to incorrect balance calculations.",
            "potentialSecurityRisk": "An attacker could drain funds from the contract by invoking the function repeatedly before the state updates reflect the withdrawals, thus allowing them to withdraw more than they should.",
            "fixedCode": "uint _amount = ledger.subtract(_bankroller, _amount);\nbankroll = ledger.total();\nif (_amount == 0) return;\nrequire(_bankroller.send(_amount));"
        },
        {
            "vulnerableLines": "121-121",
            "vulnerableCode": [
                "require(_tr.call.value(_profits)());"
            ],
            "vulnerabilityReason": "Similar to the previous vulnerability, the use of 'call.value()' sends profits before updating the 'profitsSent' state variable. This creates a window for reentrancy, whereby an attacker could manipulate the profits being sent before they are accounted for in the state.",
            "potentialSecurityRisk": "A malicious contract could exploit this by calling the function multiple times before the 'profitsSent' variable is updated, leading to multiple payouts of the same profits.",
            "fixedCode": "profitsSent += _profits;\nrequire(_tr.send(_profits));"
        }
    ]
}