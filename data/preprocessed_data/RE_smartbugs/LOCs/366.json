{
    "vulnerabilities": [
        {
            "vulnerableLines": "261-261",
            "vulnerableCode": [
                "require(msg.sender.call.value(_user.r_payout)());"
            ],
            "vulnerabilityReason": "The contract uses `call.value()` to send ether making it susceptible to reentrancy attacks as this allows the recipient contract to execute code before the state updates are finalized.",
            "potentialSecurityRisk": "An attacker could create a malicious contract to repeatedly call this function, draining the contract's balance by withdrawing funds multiple times before the state is updated.",
            "fixedCode": "uint72 payout = _user.r_payout; require(payout <= address(this).balance, 'Insufficient contract balance'); _user.r_payout = 0; (bool success, ) = msg.sender.call.value(payout)(''); require(success, 'Transfer failed');"
        },
        {
            "vulnerableLines": "273-273",
            "vulnerableCode": [
                "require(msg.sender.call.value(msg.value)());"
            ],
            "vulnerabilityReason": "The contract directly uses `call.value()` to refund, which allows potential reentrancy during the ether transfer, leading to inconsistent state updates.",
            "potentialSecurityRisk": "An attacker could exploit this by re-entering the function through a fallback function, repeatedly withdrawing funds as the state may not reflect the correct balance in time.",
            "fixedCode": "require(msg.value <= address(this).balance, 'Insufficient contract balance'); (bool success, ) = msg.sender.call.value(msg.value)(''); require(success, 'Transfer failed');"
        }
    ]
}