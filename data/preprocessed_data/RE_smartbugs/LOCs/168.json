{
    "vulnerabilities": [
        {
            "vulnerableLines": "22-24",
            "vulnerableCode": [
                "            if(msg.sender.call.value(_am)())",
                "                acc.balance-=_am;"
            ],
            "vulnerabilityReason": "The function Collect sends Ether to the caller's address using a low-level call before updating the account balance. This allows a malicious contract to execute its fallback function recursively, potentially calling Collect again before the balance is updated, which can drain the contract's funds before the withdrawal limit is enforced.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability to withdraw more Ether than they are entitled to by recursively calling the Collect function, leading to a complete depletion of the contract's funds.",
            "fixedCode": "if (acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime) {\n    acc.balance -= _am; // Update balance first\n    (bool success, ) = msg.sender.call.value(_am)(); // Send Ether after state update\n    require(success, \"Transfer failed\"); // Ensure the transfer was successful\n    LogFile.AddMessage(msg.sender, _am, \"Collect\");\n}"
        }
    ]
}