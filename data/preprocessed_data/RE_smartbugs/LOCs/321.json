{
    "vulnerabilities": [
        {
            "vulnerableLines": "774-778",
            "vulnerableCode": [
                "        if(msg.value > 0) owner.transfer(msg.value);",
                "        balanceOf[owner] = balanceOf[owner].sub(distributeAmount);",
                "        balanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);"
            ],
            "vulnerabilityReason": "The function `autoDistribute()` updates the state (decreasing `balanceOf[owner]`) after making an external call to `owner.transfer(msg.value)`. This sequence can be exploited by an attacker, who could call back into the function through a fallback function, allowing them to withdraw multiple times before the state update takes effect.",
            "potentialSecurityRisk": "An attacker could exploit this order of operations by deploying a malicious contract that calls `autoDistribute()` and repeatedly withdraws funds before the state is updated, potentially draining the contract's funds entirely.",
            "fixedCode": "// Update the state before making the external call\nif(msg.value > 0) { \n    balanceOf[owner] = balanceOf[owner].sub(distributeAmount); // Update state first\n    owner.transfer(msg.value); \n} \nbalanceOf[msg.sender] = balanceOf[msg.sender].add(distributeAmount);"
        },
        {
            "vulnerableLines": "268-268",
            "vulnerableCode": [
                "            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The use of `_to.call.value(0)(...)` allows the recipient contract to execute arbitrary code. If this arbitrary code contains a reentrant call to the current contract, it can manipulate the state before the original function completes.",
            "potentialSecurityRisk": "If the recipient is a contract with malicious code, it could perform reentrant calls to withdraw more tokens or Ether than intended, potentially draining the contractâ€™s balance or altering its state in unexpected ways.",
            "fixedCode": "// Use a safer pattern and ensure state correctness before calling external contracts\nif (isContract(_to)) {\n    // Reset state or validate the action before allowing external calls\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    // Call the fallback function but ensure it cannot re-enter harmful states\n    require(_to.call(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data), \"Transfer failed\");\n}"
        }
    ]
}