{
    "vulnerabilities": [
        {
            "vulnerableLines": "394-399",
            "vulnerableCode": [
                "if(msg.value > 0) owner.transfer(msg.value);"
            ],
            "vulnerabilityReason": "The `transfer` function sends Ether using the low-level `transfer` call, which allows the owner to execute arbitrary code upon receiving the Ether before the state of the contract is updated. This creates a potential reentrancy vulnerability.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that, upon receiving Ether, executes code that calls back into the `autoDistribute` function, allowing the attacker to withdraw more funds than intended.",
            "fixedCode": "uint256 amount = msg.value;\nif(amount > 0) {\n    require(owner.call.value(amount)()); // Use require to ensure the call was successful\n} // Ensures that the contract's state is updated before the Ether is sent."
        },
        {
            "vulnerableLines": "146-146",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The use of `call` to invoke an unknown fallback function `_custom_fallback` poses a reentrancy risk, as it allows the called contract to execute code before control is returned to the `transfer` function, including re-invocation of the `transfer` function itself.",
            "potentialSecurityRisk": "A malicious contract can exploit this to access the contractâ€™s state or withdraw funds, leading to potential loss of funds for the users and the contract owner.",
            "fixedCode": "(bool success,) = _to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data);\nrequire(success, \"Fallback call failed\"); // Ensure that the call was successful."
        }
    ]
}