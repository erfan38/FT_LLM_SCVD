{
    "vulnerabilities": [
        {
            "vulnerableLines": "383-383",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The use of `.transfer()` sends Ether to the player without ensuring that the player's address is not a contract, allowing for potential reentrancy attacks if the player's contract has a fallback function.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that calls back into the withdraw function before the internal state is updated, allowing them to withdraw more funds than they should be entitled to, ultimately draining the contract's Ether balance.",
            "fixedCode": "uint256 balanceBeforeTransfer = address(this).balance; require(balanceBeforeTransfer >= _eth, 'Insufficient balance'); plyr_[_pID].addr.transfer(_eth); require(address(this).balance == balanceBeforeTransfer - _eth, 'Transfer failed');"
        },
        {
            "vulnerableLines": "412-412",
            "vulnerableCode": [
                "plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "Similar to the previous case, this transfer also occurs without the necessary state checks or balance updates prior, rendering it vulnerable to reentrancy attacks.",
            "potentialSecurityRisk": "An attacker could exploit this by repeatedly invoking their contract within the `transfer` call, allowing them to drain the Ether balance of the contract.",
            "fixedCode": "uint256 balanceBeforeTransfer = address(this).balance; require(balanceBeforeTransfer >= _eth, 'Insufficient balance'); plyr_[_pID].addr.transfer(_eth); require(address(this).balance == balanceBeforeTransfer - _eth, 'Transfer failed');"
        },
        {
            "vulnerableLines": "1047-1047",
            "vulnerableCode": [
                "address(ObokContract).call.value(_OBOK.sub((_OBOK / 3).mul(2)))(bytes4(keccak256(\"donateDivs()\")));"
            ],
            "vulnerabilityReason": "Using `call.value()` transfers Ether to an external contract and can allow for reentrancy if the external contract executes code that calls back into this contract, leading to unexpected behaviors or state corruption.",
            "potentialSecurityRisk": "A malicious contract could exploit this functionality to manipulate the state of this contract or drain its funds by calling back in during the execution of `donateDivs()` before the original function completes.",
            "fixedCode": "(bool success, ) = ObokContract.call.value(_OBOK.sub((_OBOK / 3).mul(2)))(bytes4(keccak256(\"donateDivs()\"))); require(success, 'Transfer to ObokContract failed');"
        },
        {
            "vulnerableLines": "1153-1153",
            "vulnerableCode": [
                "address(ObokContract).call.value(_OBOK.sub(_potAmount))(bytes4(keccak256(\"donateDivs()\")));"
            ],
            "vulnerabilityReason": "This line again utilizes `call.value()` in a way that could lead to reentrancy issues by allowing a callback into the same function before state updates are completed.",
            "potentialSecurityRisk": "Similar to the previous case, this allows an attacker to amplify their gains by re-entering the contract and executing operations before the internal state is properly adjusted, potentially draining funds from the contract.",
            "fixedCode": "(bool success, ) = ObokContract.call.value(_OBOK.sub(_potAmount))(bytes4(keccak256(\"donateDivs()\"))); require(success, 'Transfer to ObokContract failed');"
        }
    ]
}