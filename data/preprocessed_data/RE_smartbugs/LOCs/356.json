{
    "vulnerabilities": [
        {
            "vulnerableLines": "115-115",
            "vulnerableCode": [
                "assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));"
            ],
            "vulnerabilityReason": "The use of call.value() exposes the contract to reentrancy vulnerabilities by allowing an external contract to invoke the fallback function, which might call back into this contract before the state changes (balance updates) are finalized.",
            "potentialSecurityRisk": "An attacker can exploit this by implementing a malicious contract that hijacks control during the execution, potentially draining the contract's funds via multiple recursive calls before the original function completes its execution.",
            "fixedCode": "// Update balances first, then execute the external call\nbalances[msg.sender] = balances[msg.sender].sub(_value);\nbalances[_to] = balances[_to].add(_value);\nbool success = _to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data);\nrequire(success, \"Transfer failed\");"
        }
    ]
}