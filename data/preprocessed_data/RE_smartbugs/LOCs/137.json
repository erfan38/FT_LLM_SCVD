{
    "vulnerabilities": [
        {
            "vulnerableLines": "205-221",
            "vulnerableCode": [
                "function withdrawEther() public {",
                "        if (roundFailedToStart == true) {",
                "            require(msg.sender.send(deals[msg.sender].sumEther));",
                "        }",
                "        if (msg.sender == operator) {",
                "            require(projectWallet.send(ethForMilestone+postDisputeEth));",
                "            ethForMilestone = 0;",
                "            postDisputeEth = 0;",
                "        }",
                "        if (msg.sender == juryOnlineWallet) {",
                "            require(juryOnlineWallet.send(etherAllowance));",
                "            require(jotter.call.value(jotAllowance)(abi.encodeWithSignature(\"swapMe()\")));",
                "            etherAllowance = 0;",
                "            jotAllowance = 0;",
                "        }",
                "        if (deals[msg.sender].verdictForInvestor == true) {",
                "            require(msg.sender.send(deals[msg.sender].sumEther - deals[msg.sender].etherUsed));",
                "        }"
            ],
            "vulnerabilityReason": "The function 'withdrawEther()' contains multiple low-level calls to send Ether before updating state variables (like zeroing out allowances and balances). If an attacker controls msg.sender, they can recursively call this function, allowing multiple withdrawals before the contractâ€™s state is updated properly.",
            "potentialSecurityRisk": "An attacker could potentially drain funds from the contract by repeatedly invoking the 'withdrawEther()' function while the state balances are not yet updated, leading to financial loss for the contract owner and other legitimate users.",
            "fixedCode": "function withdrawEther() public { require(msg.sender != address(0), \"Invalid address\"); if (roundFailedToStart == true) { uint256 amount = deals[msg.sender].sumEther; require(amount > 0, \"No funds available\"); deals[msg.sender].sumEther = 0; require(msg.sender.send(amount)); } if (msg.sender == operator) { uint256 amount = ethForMilestone + postDisputeEth; require(amount > 0, \"No funds available\"); ethForMilestone = 0; postDisputeEth = 0; require(projectWallet.send(amount)); } if (msg.sender == juryOnlineWallet) { require(etherAllowance > 0, \"No allowance available\"); uint256 allowance = etherAllowance; etherAllowance = 0; require(juryOnlineWallet.send(allowance)); require(jotter.call.value(jotAllowance)(abi.encodeWithSignature(\"swapMe()\"))); jotAllowance = 0; } if (deals[msg.sender].verdictForInvestor == true) { uint256 amount = deals[msg.sender].sumEther - deals[msg.sender].etherUsed; require(amount > 0, \"No funds available to withdraw\"); deals[msg.sender].sumEther = 0; require(msg.sender.send(amount)); } }"
        },
        {
            "vulnerableLines": "326-357",
            "vulnerableCode": [
                "function acceptOffer(address _investor, uint _offerNumber) public sealed onlyOperator {",
                "        require(offers[_investor][_offerNumber].etherAmount > 0);",
                "        require(offers[_investor][_offerNumber].accepted != true);",
                "        offers[_investor][_offerNumber].accepted = true;",
                "        uint  _etherAmount = offers[_investor][_offerNumber].etherAmount;",
                "        uint _tokenAmount = offers[_investor][_offerNumber].tokenAmount;",
                "        require(token.balanceOf(address(this)) >= promisedTokens + _tokenAmount);",
                "        if (commissionOnInvestmentEth > 0 || commissionOnInvestmentJot > 0) {",
                "            uint etherCommission = _etherAmount.mul(commissionOnInvestmentEth).div(100);",
                "            uint jotCommission = _etherAmount.mul(commissionOnInvestmentJot).div(100);",
                "            _etherAmount = _etherAmount.sub(etherCommission).sub(jotCommission);",
                "            offers[_investor][_offerNumber].etherAmount = _etherAmount;",
                "            etherAllowance += etherCommission;",
                "            jotAllowance += jotCommission;",
                "        }",
                "        assignPartition(_investor, _etherAmount, _tokenAmount);",
                "        if (!(deals[_investor].sumEther > 0)) dealsList.push(_investor);",
                "        if (tokenReleaseAtStart == true) {",
                "            deals[_investor].tokenAllowance = _tokenAmount;",
                "        }",
                "        deals[_investor].sumEther += _etherAmount;",
                "        deals[_investor].sumToken += _tokenAmount;",
                "        promisedTokens += _tokenAmount;",
                "        raisedEther += _etherAmount;"
            ],
            "vulnerabilityReason": "In the 'acceptOffer()' function, Ether is sent to the contract without previously updating the state to reflect this, providing an opportunity for reentrancy in case Ether is wrongfully managed or received by external contracts during the acceptance phase.",
            "potentialSecurityRisk": "If an attacker creates a malicious contract to trigger this function during the Ether transfer, they might be able to manipulate funds or exploit other weaknesses before the state is recorded, allowing multiple withdrawals or altering allocations.",
            "fixedCode": "function acceptOffer(address _investor, uint _offerNumber) public sealed onlyOperator { require(offers[_investor][_offerNumber].etherAmount > 0); require(offers[_investor][_offerNumber].accepted == false); uint _etherAmount = offers[_investor][_offerNumber].etherAmount; uint _tokenAmount = offers[_investor][_offerNumber].tokenAmount; // Update the state before any transfers: offers[_investor][_offerNumber].accepted = true; deals[_investor].sumEther = deals[_investor].sumEther.add(_etherAmount); deals[_investor].sumToken = deals[_investor].sumToken.add(_tokenAmount); promisedTokens = promisedTokens.add(_tokenAmount); raisedEther = raisedEther.add(_etherAmount); // Transfer only after setting state, to avoid reentrancy require(token.balanceOf(address(this)) >= promisedTokens + _tokenAmount); if (commissionOnInvestmentEth > 0 || commissionOnInvestmentJot > 0) { uint etherCommission = _etherAmount.mul(commissionOnInvestmentEth).div(100); uint jotCommission = _etherAmount.mul(commissionOnInvestmentJot).div(100); etherAllowance = etherAllowance.add(etherCommission); jotAllowance = jotAllowance.add(jotCommission); } assignPartition(_investor, _etherAmount.sub(etherCommission).sub(jotCommission), _tokenAmount); if (!(deals[_investor].sumEther > 0)) dealsList.push(_investor); if (tokenReleaseAtStart) { deals[_investor].tokenAllowance = _tokenAmount; } }"
        }
    ]
}