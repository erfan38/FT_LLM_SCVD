{
    "vulnerabilities": [
        {
            "vulnerableLines": "409-414",
            "vulnerableCode": [
                "_eth = withdrawEarnings(_pID);",
                "if (_eth > 0)",
                "    plyr_[_pID].addr.transfer(_eth);"
            ],
            "vulnerabilityReason": "The contract issues a transfer using `transfer()` before checking the transaction's success which could lead to reentrancy as the state is updated after the transfer.",
            "potentialSecurityRisk": "An attacker could exploit this by implementing a fallback function in their contract to recursively call the `withdraw` function, allowing them to withdraw funds repeatedly before the balance is updated, depleting the contract's Ether.",
            "fixedCode": "uint256 _eth = withdrawEarnings(_pID); require(_eth > 0, \"No earnings to withdraw\"); address playerAddr = plyr_[_pID].addr; plyr_[_pID].addr = address(0); playerAddr.transfer(_eth); plyr_[_pID].addr = playerAddr;"
        },
        {
            "vulnerableLines": "333-335",
            "vulnerableCode": [
                "reLoadCore(_pID, _affCode, _team, _eth, _eventData_);"
            ],
            "vulnerabilityReason": "External calls to `reLoadCore` happen before state updates, which can be manipulated through reentrancy attacks if the external contract calls back into this contract.",
            "potentialSecurityRisk": "A malicious actor could repeatedly invoke this function, obtaining payouts or other funds before their changes in the contract state are finalized, leading to potential fund drainage.",
            "fixedCode": "updateStateBeforeExternalCall(); reLoadCore(_pID, _affCode, _team, _eth, _eventData_);"
        },
        {
            "vulnerableLines": "296-298",
            "vulnerableCode": [
                "distributeExternal(_rID, _pID, _eth, _affID, _team, _eventData_);"
            ],
            "vulnerabilityReason": "At this point, an external call to `distributeExternal` occurs before updating state variables, allowing for reentrant calls during the Ether sending process.",
            "potentialSecurityRisk": "An attacker could re-enter the `distributeExternal` function, manipulating payouts or other contract state before the original transaction is completed, potentially leading to financial losses.",
            "fixedCode": "updateStateBeforeExternalCall(); distributeExternal(_rID, _pID, _eth, _affID, _team, _eventData_);"
        }
    ]
}