{
    "vulnerabilities": [
        {
            "vulnerableLines": "63-65",
            "vulnerableCode": [
                "if (etherHero.call.value(address(this).balance).gas(estGas)()) {",
                "    emit MoneyWithdraw(balance);",
                "    investFund = address(this).balance;"
            ],
            "vulnerabilityReason": "The function uses `call.value()` to transfer Ether before updating the state variable `investFund`. This order of operations allows an attacker to exploit the contract via a reentrancy attack, potentially repeatedly calling `ReturnEthToEtherhero` before the state updates take effect.",
            "potentialSecurityRisk": "An attacker could deplete the contract's funds by calling the fallback function, withdrawing more funds than intended by recursively invoking `ReturnEthToEtherhero` before the state reflects the updated balance.",
            "fixedCode": "uint initialBalance = address(this).balance;    \nrequire(initialBalance > estGas, 'Not enough funds for transaction');\n\n// Update the investFund before the external call to prevent reentrancy\ninvestFund = initialBalance;\nif (etherHero.call.value(initialBalance).gas(estGas)()) {\n    emit MoneyWithdraw(initialBalance);\n    return true;\n} else {\n    return false;\n}"
        }
    ]
}