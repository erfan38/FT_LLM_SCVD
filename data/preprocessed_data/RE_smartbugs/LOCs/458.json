{
    "vulnerabilities": [
        {
            "vulnerableLines": "200-201",
            "vulnerableCode": [
                "if(!jackpotAddress.call.value(ethToPay).gas(400000) {",
                "jackpotReceived = SafeMath.sub(jackpotReceived, ethToPay);"
            ],
            "vulnerabilityReason": "The jackpotSend() function calls the jackpotAddress to send Ether before updating the jackpotReceived state variable. This allows a reentrancy attack where the jackpotAddress could call back into the contract, potentially manipulating its state before the initial function completes.",
            "potentialSecurityRisk": "An attacker can exploit this by causing multiple reentrant calls, potentially draining the jackpot or manipulating the state of the contract before it correctly updates the jackpotReceived value.",
            "fixedCode": "// Update jackpotReceived before the external call to prevent reentrancy\njackpotReceived = SafeMath.add(jackpotReceived, ethToPay);\nrequire(jackpotAddress.call.value(ethToPay).gas(400000)());"
        },
        {
            "vulnerableLines": "267-267",
            "vulnerableCode": [
                "_customerAddress.transfer(_dividends);"
            ],
            "vulnerabilityReason": "The withdraw() function transfers Ether to the user before resetting their referralBalance_. This allows an attacker to call back into the contract during the execution of this transfer, leading to potential fund misappropriation before the balance is set to zero.",
            "potentialSecurityRisk": "An attacker might recursively call withdraw() during the Ether transfer, leading to draining more Ether than intended if the referralBalance_ is not set to zero beforehand.",
            "fixedCode": "// Reset referralBalance_ before transferring to prevent reentrancy\nuint256 _dividends = myDividends(false);\n_customerAddress.transfer(_dividends);\nreferralBalance_[_customerAddress] = 0;"
        }
    ]
}