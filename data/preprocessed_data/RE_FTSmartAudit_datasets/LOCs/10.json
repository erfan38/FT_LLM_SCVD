{
    "vulnerabilities": [
        {
            "vulnerableLines": "18-20",
            "vulnerableCode": [
                "        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\";\n        require(success);",
                "        userBalances[msg.sender] = 0;"
            ],
            "vulnerabilityReason": "The function sends Ether to `msg.sender` using `call.value(amountToWithdraw)`, which allows a malicious contract to execute its fallback function before the user's balance is set to zero. This could enable the malicious contract to re-enter the `withdrawBalance` function and withdraw funds again before the previous withdrawal is fully processed.",
            "potentialSecurityRisk": "An attacker could exploit this vulnerability by deploying a malicious contract that calls the `withdrawBalance` function. By re-entering it, the attacker can withdraw more Ether than what was initially available in their balance, leading to a potential draining of the contract's funds.",
            "fixedCode": "        userBalances[msg.sender] = 0;  // Set balance to zero before sending funds\n        (bool success, ) = msg.sender.call.value(amountToWithdraw)(\"\"\");\n        require(success); // Check if the transfer was successful."
        }
    ]
}