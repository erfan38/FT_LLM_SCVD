{
    "vulnerabilities": [
        {
            "vulnerableLines": "23",
            "vulnerableCode": [
                "            if(msg.sender.call.value(_am)())"
            ],
            "vulnerabilityReason": "The contract makes an external call to `msg.sender` using `call.value(_am)()` before updating the account balance. This allows for a reentrancy attack if the `msg.sender` is a contract that can call back into the `Collect` function before the state has been updated, exploiting the unchanged balance to withdraw funds multiple times.",
            "potentialSecurityRisk": "An attacker could create a malicious contract that re-enters the `Collect` function during the Ether transfer, draining the contract's balance by withdrawing more Ether than intended, potentially leading to a complete loss of funds for the contract.",
            "fixedCode": "    uint256 amountToTransfer = _am; \n    acc.balance -= amountToTransfer; \n    if(!msg.sender.call.value(amountToTransfer)()) {\n        acc.balance += amountToTransfer;  // Revert balance if transfer fails\n    } else {\n        LogFile.AddMessage(msg.sender, amountToTransfer, \"Collect\");\n    }"
        }
    ]
}