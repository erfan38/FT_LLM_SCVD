{
    "vulnerabilities": [
        {
            "vulnerableLines": "18-21",
            "vulnerableCode": [
                "          if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){",
                "              throw;",
                "          }",
                "          userBalance[msg.sender] = 0;"
            ],
            "vulnerabilityReason": "The contract first sends Ether to the `msg.sender` before updating the user's balance to 0. This creates a reentrancy vulnerability, as a malicious contract could call back into the `withdrawBalance` function before the balance is set to zero, allowing the attacker to withdraw funds multiple times.",
            "potentialSecurityRisk": "An attacker can exploit this vulnerability by deploying a malicious contract that can receive Ether. By calling `withdrawBalance`, the attacker can repeatedly withdraw funds before the balance is updated to zero, draining the contract's funds.",
            "fixedCode": "          uint amount = userBalance[msg.sender];  // Store the amount to be transferred before calling external contract\n          userBalance[msg.sender] = 0;  // Update the balance first\n          if( ! (msg.sender.call.value(amount)()) ){  // Send the Ether after the state change\n              throw;  // Revert if the call fails\n          }"
        }
    ]
}