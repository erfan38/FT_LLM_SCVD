[
    {
        "Vulnerability Type":"time_manipulation",
        "File Name":"ether_lotto.sol",
        "Source Code":"\/*\n * @article: https:\/\/blog.positive.com\/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620\n * @source: https:\/\/etherscan.io\/address\/0xa11e4ed59dc94e69612f3111942626ed513cb172#code\n * @vulnerable_at_lines: 43\n * @author: -\n *\/\n\n pragma solidity ^0.4.15;\n\n\/\/\/ @title Ethereum Lottery Game.\n\ncontract EtherLotto {\n\n    \/\/ Amount of ether needed for participating in the lottery.\n    uint constant TICKET_AMOUNT = 10;\n\n    \/\/ Fixed amount fee for each lottery game.\n    uint constant FEE_AMOUNT = 1;\n\n    \/\/ Address where fee is sent.\n    address public bank;\n\n    \/\/ Public jackpot that each participant can win (minus fee).\n    uint public pot;\n\n    \/\/ Lottery constructor sets bank account from the smart-contract owner.\n    function EtherLotto() {\n        bank = msg.sender;\n    }\n\n    \/\/ Public function for playing lottery. Each time this function\n    \/\/ is invoked, the sender has an oportunity for winning pot.\n    function play() payable {\n\n        \/\/ Participants must spend some fixed ether before playing lottery.\n        assert(msg.value == TICKET_AMOUNT);\n\n        \/\/ Increase pot for each participant.\n        pot += msg.value;\n\n        \/\/ Compute some *almost random* value for selecting winner from current transaction.\n        \/\/ <yes> <report> TIME_MANIPULATION\n        var random = uint(sha3(block.timestamp)) % 2;\n\n        \/\/ Distribution: 50% of participants will be winners.\n        if (random == 0) {\n\n            \/\/ Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            \/\/ Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            \/\/ Restart jackpot.\n            pot = 0;\n        }\n    }\n\n}",
        "input":"pragma solidity ^0.4.15;\n\n\n\ncontract EtherLotto {\n\n    \n    uint constant TICKET_AMOUNT = 10;\n\n    \n    uint constant FEE_AMOUNT = 1;\n\n    \n    address public bank;\n\n    \n    uint public pot;\n\n    \n    function EtherLotto() {\n        bank = msg.sender;\n    }\n\n    \n    \n    function play() payable {\n\n        \n        assert(msg.value == TICKET_AMOUNT);\n\n        \n        pot += msg.value;\n\n        \n        \n        var random = uint(sha3(block.timestamp)) % 2;\n\n        \n        if (random == 0) {\n\n            \n            bank.transfer(FEE_AMOUNT);\n\n            \n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            \n            pot = 0;\n        }\n    }\n\n}"
    },
    {
        "Vulnerability Type":"time_manipulation",
        "File Name":"roulette.sol",
        "Source Code":"\/*\n * @source: https:\/\/github.com\/sigp\/solidity-security-blog\n * @author: -\n * @vulnerable_at_lines: 18,20\n *\/\n\npragma solidity ^0.4.25;\n\ncontract Roulette {\n    uint public pastBlockTime; \/\/ Forces one bet per block\n\n    constructor() public payable {} \/\/ initially fund contract\n\n    \/\/ fallback function used to make a bet\n    function () public payable {\n        require(msg.value == 10 ether); \/\/ must send 10 ether to play\n        \/\/ <yes> <report> TIME_MANIPULATION\n        require(now != pastBlockTime); \/\/ only 1 transaction per block\n        \/\/ <yes> <report> TIME_MANIPULATION\n        pastBlockTime = now;\n        if(now % 15 == 0) { \/\/ winner\n            msg.sender.transfer(this.balance);\n        }\n    }\n}",
        "input":"pragma solidity ^0.4.25;\n\ncontract Roulette {\n    uint public pastBlockTime; \n\n    constructor() public payable {} \n\n    \n    function () public payable {\n        require(msg.value == 10 ether); \n        \n        require(now != pastBlockTime); \n        \n        pastBlockTime = now;\n        if(now % 15 == 0) { \n            msg.sender.transfer(this.balance);\n        }\n    }\n}"
    },
    {
        "Vulnerability Type":"time_manipulation",
        "File Name":"lottopollo.sol",
        "Source Code":"\/*\n * @source: https:\/\/github.com\/seresistvanandras\/EthBench\/blob\/master\/Benchmark\/Simple\/timestampdependent.sol\n * @author: -\n * @vulnerable_at_lines: 13,27\n *\/\n\npragma solidity ^0.4.0;\ncontract lottopollo {\n  address leader;\n  uint    timestamp;\n  function payOut(uint rand) internal {\n    \/\/ <yes> <report> TIME MANIPULATION\n    if ( rand> 0 && now - rand > 24 hours ) {\n      msg.sender.send( msg.value );\n\n      if ( this.balance > 0 ) {\n        leader.send( this.balance );\n      }\n    }\n    else if ( msg.value >= 1 ether ) {\n      leader = msg.sender;\n      timestamp = rand;\n    }\n  }\n  function randomGen() constant returns (uint randomNumber) {\n      \/\/ <yes> <report> TIME MANIPULATION\n      return block.timestamp;   \n    }\n  function draw(uint seed){\n    uint randomNumber=randomGen(); \n    payOut(randomNumber);\n  }\n}",
        "input":"pragma solidity ^0.4.0;\ncontract lottopollo {\n  address leader;\n  uint    timestamp;\n  function payOut(uint rand) internal {\n    \n    if ( rand> 0 && now - rand > 24 hours ) {\n      msg.sender.send( msg.value );\n\n      if ( this.balance > 0 ) {\n        leader.send( this.balance );\n      }\n    }\n    else if ( msg.value >= 1 ether ) {\n      leader = msg.sender;\n      timestamp = rand;\n    }\n  }\n  function randomGen() constant returns (uint randomNumber) {\n      \n      return block.timestamp;   \n    }\n  function draw(uint seed){\n    uint randomNumber=randomGen(); \n    payOut(randomNumber);\n  }\n}"
    },
    {
        "Vulnerability Type":"time_manipulation",
        "File Name":"governmental_survey.sol",
        "Source Code":"\/*\n * @source: http:\/\/blockchain.unica.it\/projects\/ethereum-survey\/attacks.html#governmental\n * @author: -\n * @vulnerable_at_lines: 27\n *\/\n\n\/\/added pragma version\npragma solidity ^0.4.0;\n\ncontract Governmental {\n  address public owner;\n  address public lastInvestor;\n  uint public jackpot = 1 ether;\n  uint public lastInvestmentTimestamp;\n  uint public ONE_MINUTE = 1 minutes;\n\n  function Governmental() {\n    owner = msg.sender;\n    if (msg.value<1 ether) throw;\n  }\n\n  function invest() {\n    if (msg.value<jackpot\/2) throw;\n    lastInvestor = msg.sender;\n    jackpot += msg.value\/2;\n    \/\/ <yes> <report> TIME_MANIPULATION\n    lastInvestmentTimestamp = block.timestamp;\n  }\n\n  function resetInvestment() {\n    if (block.timestamp < lastInvestmentTimestamp+ONE_MINUTE)\n      throw;\n\n    lastInvestor.send(jackpot);\n    owner.send(this.balance-1 ether);\n\n    lastInvestor = 0;\n    jackpot = 1 ether;\n    lastInvestmentTimestamp = 0;\n  }\n}\n\ncontract Attacker {\n\n  function attack(address target, uint count) {\n    if (0<=count && count<1023) {\n      this.attack.gas(msg.gas-2000)(target, count+1);\n    }\n    else {\n      Governmental(target).resetInvestment();\n    }\n  }\n}",
        "input":"pragma solidity ^0.4.0;\n\ncontract Governmental {\n  address public owner;\n  address public lastInvestor;\n  uint public jackpot = 1 ether;\n  uint public lastInvestmentTimestamp;\n  uint public ONE_MINUTE = 1 minutes;\n\n  function Governmental() {\n    owner = msg.sender;\n    if (msg.value<1 ether) throw;\n  }\n\n  function invest() {\n    if (msg.value<jackpot\/2) throw;\n    lastInvestor = msg.sender;\n    jackpot += msg.value\/2;\n    \n    lastInvestmentTimestamp = block.timestamp;\n  }\n\n  function resetInvestment() {\n    if (block.timestamp < lastInvestmentTimestamp+ONE_MINUTE)\n      throw;\n\n    lastInvestor.send(jackpot);\n    owner.send(this.balance-1 ether);\n\n    lastInvestor = 0;\n    jackpot = 1 ether;\n    lastInvestmentTimestamp = 0;\n  }\n}\n\ncontract Attacker {\n\n  function attack(address target, uint count) {\n    if (0<=count && count<1023) {\n      this.attack.gas(msg.gas-2000)(target, count+1);\n    }\n    else {\n      Governmental(target).resetInvestment();\n    }\n  }\n}"
    },
    {
        "Vulnerability Type":"time_manipulation",
        "File Name":"timed_crowdsale.sol",
        "Source Code":"\/*\n * @source: https:\/\/github.com\/SmartContractSecurity\/SWC-registry\/blob\/master\/test_cases\/timestamp_dependence\/timed_crowdsale.sol\n * @author: -\n * @vulnerable_at_lines: 13\n *\/\n\npragma solidity ^0.4.25;\n\ncontract TimedCrowdsale {\n  \/\/ Sale should finish exactly at January 1, 2019\n  function isSaleFinished() view public returns (bool) {\n    \/\/ <yes> <report> TIME_MANIPULATION\n    return block.timestamp >= 1546300800;\n  }\n}",
        "input":"pragma solidity ^0.4.25;\n\ncontract TimedCrowdsale {\n  \n  function isSaleFinished() view public returns (bool) {\n    \n    return block.timestamp >= 1546300800;\n  }\n}"
    }
]